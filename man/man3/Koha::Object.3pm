.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Object 3pm"
.TH Koha::Object 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Object \- Koha Object base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Koha::Object;
\&    my $object = Koha::Object\->new({ property1 => $property1, property2 => $property2, etc... } );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class must always be subclassed.
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIKoha::Object\->\f(BInew()\fI;\fR
.IX Subsection "Koha::Object->new();"
.PP
my \f(CW$object\fR = Koha::Object\->\fBnew()\fR;
my \f(CW$object\fR = Koha::Object\->new($attributes);
.PP
Note that this cannot be used to retrieve record from the \s-1DB.\s0
.PP
\fIKoha::Object\->\f(BI_new_from_dbic()\fI;\fR
.IX Subsection "Koha::Object->_new_from_dbic();"
.PP
my \f(CW$object\fR = Koha::Object\->_new_from_dbic($dbic_row);
.PP
\fI\f(CI$object\fI\->\f(BIstore()\fI;\fR
.IX Subsection "$object->store();"
.PP
Saves the object in storage.
If the object is new, it will be created.
If the object previously existed, it will be updated.
.PP
Returns:
    \f(CW$self\fR  if the store was a success
    undef  if the store failed
.PP
\fI\f(CI$object\fI\->\f(BIupdate()\fI;\fR
.IX Subsection "$object->update();"
.PP
A shortcut for set + store in one call.
.PP
\fI\f(CI$object\fI\->\f(BIdelete()\fI;\fR
.IX Subsection "$object->delete();"
.PP
Removes the object from storage.
.PP
Returns:
    The item object if deletion was a success
    The DBIX::Class error if deletion failed
.PP
\fI\f(CI$object\fI\->set( \f(CI$properties_hashref\fI )\fR
.IX Subsection "$object->set( $properties_hashref )"
.PP
\&\f(CW$object\fR\->set(
    {
        property1 => \f(CW$property1\fR,
        property2 => \f(CW$property2\fR,
        property3 => \f(CW$propery3\fR,
    }
);
.PP
Enables multiple properties to be set at once
.PP
Returns:
    1      if all properties were set.
    0      if one or more properties do not exist.
    undef  if all properties exist but a different error
           prevents one or more properties from being set.
.PP
If one or more of the properties do not exist,
no properties will be set.
.PP
\fI\f(CI$object\fI\->set_or_blank( \f(CI$properties_hashref\fI )\fR
.IX Subsection "$object->set_or_blank( $properties_hashref )"
.PP
\&\f(CW$object\fR\->set_or_blank(
    {
        property1 => \f(CW$property1\fR,
        property2 => \f(CW$property2\fR,
        property3 => \f(CW$propery3\fR,
    }
);
.PP
If not listed in \f(CW$properties_hashref\fR, the property will be set to the default
value defined at \s-1DB\s0 level, or nulled.
.PP
\fI\f(CI$object\fI\->\f(BIunblessed()\fI;\fR
.IX Subsection "$object->unblessed();"
.PP
Returns an unblessed representation of object.
.PP
\fI\f(CI$object\fI\->get_from_storage;\fR
.IX Subsection "$object->get_from_storage;"
.PP
\fI\f(CI$object\fI\->object_messages\fR
.IX Subsection "$object->object_messages"
.PP
.Vb 1
\&    my @messages = @{ $object\->object_messages };
.Ve
.PP
Returns the (probably non-fatal) messages that were recorded on the object.
.PP
\fI\f(CI$object\fI\->add_message\fR
.IX Subsection "$object->add_message"
.PP
.Vb 7
\&    try {
\&        <some action that might fail>
\&    }
\&    catch {
\&        if ( <fatal condition> ) {
\&            Koha::Exception\->throw...
\&        }
\&
\&        # This is a non fatal error, notify the caller
\&        $self\->add_message({ message => $error, type => \*(Aqerror\*(Aq });
\&    }
\&    return $self;
.Ve
.PP
Adds a message.
.PP
\fI\f(CI$object\fI\->\s-1TO_JSON\s0\fR
.IX Subsection "$object->TO_JSON"
.PP
Returns an unblessed representation of the object, suitable for \s-1JSON\s0 output.
.PP
\fIprefetch_whitelist\fR
.IX Subsection "prefetch_whitelist"
.PP
.Vb 1
\&    my $whitelist = $object\->prefetch_whitelist()
.Ve
.PP
Returns a hash of prefetchable subs and the type they return.
.PP
\fIto_api\fR
.IX Subsection "to_api"
.PP
.Vb 10
\&    my $object_for_api = $object\->to_api(
\&        {
\&          [ embed => {
\&                items => {
\&                    children => {
\&                        holds => {,
\&                            children => {
\&                              ...
\&                            }
\&                        }
\&                    }
\&                },
\&                library => {
\&                    ...
\&                }
\&            },
\&            public => 0|1,
\&            ...
\&         ]
\&        }
\&    );
.Ve
.PP
Returns a representation of the object, suitable for \s-1API\s0 output.
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
.Vb 1
\&    my $mapping = $object\->to_api_mapping;
.Ve
.PP
Generic method that returns the attribute name mappings required to
render the object on the \s-1API.\s0
.PP
Note: this only returns an empty \fIhashref\fR. Each class should have its
own mapping returned.
.PP
\fIstrings_map\fR
.IX Subsection "strings_map"
.PP
.Vb 1
\&    my $string_map = $object\->strings_map($params);
.Ve
.PP
Generic method that returns the string map for coded attributes.
.PP
Return should be a hashref keyed on database field name with the values
being hashrefs containing 'str', 'type' and optionally 'category'.
.PP
This is then used in to_api to render the _strings embed when requested.
.PP
Note: this only returns an empty \fIhashref\fR. Each class should have its
own mapping returned.
.PP
\fIpublic_read_list\fR
.IX Subsection "public_read_list"
.PP
.Vb 1
\&    my @public_read_list = @{$object\->public_read_list};
.Ve
.PP
Generic method that returns the list of database columns that are allowed to
be passed to render objects on the public \s-1API.\s0
.PP
Note: this only returns an empty \fIarrayref\fR. Each class should have its
own implementation.
.PP
\fIfrom_api_mapping\fR
.IX Subsection "from_api_mapping"
.PP
.Vb 1
\&    my $mapping = $object\->from_api_mapping;
.Ve
.PP
Generic method that returns the attribute name mappings so the data that
comes from the \s-1API\s0 is correctly renamed to match what is required for the \s-1DB.\s0
.PP
\fInew_from_api\fR
.IX Subsection "new_from_api"
.PP
.Vb 2
\&    my $object = Koha::Object\->new_from_api;
\&    my $object = Koha::Object\->new_from_api( $attrs );
.Ve
.PP
Creates a new object, mapping the \s-1API\s0 attribute names to the ones on the \s-1DB\s0 schema.
.PP
\fIset_from_api\fR
.IX Subsection "set_from_api"
.PP
.Vb 2
\&    my $object = Koha::Object\->new(...);
\&    $object\->set_from_api( $attrs )
.Ve
.PP
Sets the object's attributes mapping \s-1API\s0 attribute names to the ones on the \s-1DB\s0 schema.
.PP
\fIattributes_from_api\fR
.IX Subsection "attributes_from_api"
.PP
.Vb 1
\&    my $attributes = attributes_from_api( $params );
.Ve
.PP
Returns the passed params, converted from \s-1API\s0 naming into the model.
.PP
\fI\f(CI$object\fI\->unblessed_all_relateds\fR
.IX Subsection "$object->unblessed_all_relateds"
.PP
my \f(CW$everything_into_one_hashref\fR = \f(CW$object\fR\->unblessed_all_relateds
.PP
The unblessed method only retrieves column' values for the column of the object.
In a *few* cases we want to retrieve the information of all the prefetched data.
.PP
\fI\f(CI$object\fI\->\f(BI_result()\fI;\fR
.IX Subsection "$object->_result();"
.PP
Returns the internal \s-1DBIC\s0 Row object
.PP
\fI\f(CI$object\fI\->\f(BI_columns()\fI;\fR
.IX Subsection "$object->_columns();"
.PP
Returns an arrayref of the table columns
.PP
\fI\s-1AUTOLOAD\s0\fR
.IX Subsection "AUTOLOAD"
.PP
The autoload method is used only to get and set values for an objects properties.
.PP
\fI_type\fR
.IX Subsection "_type"
.PP
This method must be defined in the child class. The value is the name of the \s-1DBIC\s0 resultset.
For example, for borrowers, the _type method will return \*(L"Borrower\*(R".
.PP
\fI_handle_to_api_child\fR
.IX Subsection "_handle_to_api_child"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
.PP
Jonathan Druart <jonathan.druart@bugs.koha\-community.org>
