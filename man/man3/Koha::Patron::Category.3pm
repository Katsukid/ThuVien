.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Patron::Category 3pm"
.TH Koha::Patron::Category 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Patron;;Category \- Koha Patron;;Category Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIeffective_BlockExpiredPatronOpacActions\fR
.IX Subsection "effective_BlockExpiredPatronOpacActions"
.PP
my \f(CW$BlockExpiredPatronOpacActions\fR = \f(CW$category\fR\->effective_BlockExpiredPatronOpacActions
.PP
Return the effective BlockExpiredPatronOpacActions value.
.PP
\fIstore\fR
.IX Subsection "store"
.PP
\fIdefault_messaging\fR
.IX Subsection "default_messaging"
.PP
my \f(CW$messaging\fR = \f(CW$category\fR\->\fBdefault_messaging()\fR;
.PP
\fIget_password_expiry_date\fR
.IX Subsection "get_password_expiry_date"
.PP
Returns date based on password expiry days set for the category. If the value is not set
we return undef, password does not expire
.PP
my \f(CW$expiry_date\fR = \f(CW$category\fR\->\fBget_password_expiry_date()\fR;
.PP
\fIeffective_reset_password\fR
.IX Subsection "effective_reset_password"
.PP
Returns if patrons in this category can reset their password. If set in \f(CW$self\fR\->reset_password
or, if undef, falls back to the OpacResetPassword system preference.
.PP
\fIeffective_change_password\fR
.IX Subsection "effective_change_password"
.PP
Returns if patrons in this category can change their password. If set in \f(CW$self\fR\->change_password
or, if undef, falls back to the OpacPasswordChange system preference.
.PP
\fIeffective_min_password_length\fR
.IX Subsection "effective_min_password_length"
.PP
.Vb 1
\&    $category\->effective_min_password_length()
.Ve
.PP
Retrieve category's password length if set, or minPasswordLength otherwise
.PP
\fIeffective_require_strong_password\fR
.IX Subsection "effective_require_strong_password"
.PP
.Vb 1
\&    $category\->effective_require_strong_password()
.Ve
.PP
Retrieve category's password strength if set, or RequireStrongPassword otherwise
.PP
\fIoverride_hidden_items\fR
.IX Subsection "override_hidden_items"
.PP
.Vb 3
\&    if ( $patron\->category\->override_hidden_items ) {
\&        ...
\&    }
.Ve
.PP
Returns a boolean that if patrons of this category are exempt from the OPACHiddenItems policies
.PP
\&\s-1TODO:\s0 Remove on bug 22547
.PP
\fIcan_make_suggestions\fR
.IX Subsection "can_make_suggestions"
.PP
.Vb 3
\&    if ( $patron\->category\->can_make_suggestions ) {
\&        ...
\&    }
.Ve
.PP
Returns if the \s-1OPAC\s0 logged-in user is allowed to make \s-1OPAC\s0 purchase suggestions.
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_library_limits\fR
.IX Subsection "_library_limits"
.PP
.Vb 1
\& configure library limits
.Ve
.PP
\fItype\fR
.IX Subsection "type"
