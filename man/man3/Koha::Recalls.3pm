.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Recalls 3pm"
.TH Koha::Recalls 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Recalls \- Koha Recalls Object set class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIfilter_by_current\fR
.IX Subsection "filter_by_current"
.PP
.Vb 1
\&    my $current_recalls = $recalls\->filter_by_current;
.Ve
.PP
Returns a new resultset, filtering out finished recalls.
.PP
\fIfilter_by_finished\fR
.IX Subsection "filter_by_finished"
.PP
.Vb 1
\&    my $finished_recalls = $recalls\->filter_by_finished;
.Ve
.PP
Returns a new resultset, filtering out current recalls.
.PP
\fIadd_recall\fR
.IX Subsection "add_recall"
.PP
.Vb 8
\&    my ( $recall, $due_interval, $due_date ) = Koha::Recalls\->add_recall({
\&        patron => $patron_object,
\&        biblio => $biblio_object,
\&        branchcode => $branchcode,
\&        item => $item_object,
\&        expirationdate => $expirationdate,
\&        interface => \*(AqOPAC\*(Aq,
\&    });
.Ve
.PP
Add a new requested recall. We assume at this point that a recall is allowed to be placed on this item or biblio. We are past the checks and are now doing the recall.
Interface param is either \s-1OPAC\s0 or \s-1INTRANET\s0
Send a \s-1RETURN_RECALLED_ITEM\s0 notice.
Add statistics and logs.
#FIXME: Add recallnotes and priority when staff-side recalls is added
.PP
\fImove_recall\fR
.IX Subsection "move_recall"
.PP
.Vb 6
\&    my $message = Koha::Recalls\->move_recall({
\&        recall_id = $recall_id,
\&        action => $action,
\&        item => $item_object,
\&        borrowernumber => $borrowernumber,
\&    });
.Ve
.PP
A patron is attempting to check out an item that has been recalled by another patron.
If the recall is requested/overdue, they have the option of cancelling the recall.
If the recall is waiting, they also have the option of reverting the waiting status.
.PP
We can also fulfill the recall here if the recall is placed by this borrower.
.PP
recall_id = \s-1ID\s0 of the recall to perform the action on
action = either cancel or revert
item = item object that the patron is attempting to check out
borrowernumber = borrowernumber of the patron that is attemptig to check out
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
.PP
\fIobject_class\fR
.IX Subsection "object_class"
