.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::UI::Form::Builder::Item 3pm"
.TH Koha::UI::Form::Builder::Item 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::UI::Form::Builder::Item
.PP
Helper to build a form to add or edit a new item.
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 6
\&    my $form = Koha::UI::Form::Builder::Item\->new(
\&        {
\&            biblionumber => $biblionumber,
\&            item => $current_item,
\&        }
\&    );
.Ve
.PP
Constructor.
biblionumber should be passed if we are creating a new item.
For edition, an hashref representing the item to edit item must be passed.
.PP
\fIgenerate_subfield_form\fR
.IX Subsection "generate_subfield_form"
.PP
Generate subfield's info for given tag, subfieldtag, etc.
.PP
\fIedit_form\fR
.IX Subsection "edit_form"
.PP
.Vb 10
\&    my $subfields =
\&      Koha::UI::Form::Builder::Item\->new(
\&        { biblionumber => $biblionumber, item => $current_item } )\->edit_form(
\&        {
\&            branchcode           => $branchcode,
\&            restricted_editition => $restrictededition,
\&            (
\&                @subfields_to_prefill
\&                ? ( subfields_to_prefill => \e@subfields_to_prefill )
\&                : ()
\&            ),
\&            prefill_with_default_values => 1,
\&            branch_limit => C4::Context\->userenv\->{"branch"},
\&        }
\&    );
.Ve
.PP
Returns the list of subfields to display on the add/edit item form.
.PP
Use it in the view with:
  [% \s-1PROCESS\s0 subfields_for_item subfields => subfields %]
.PP
Parameters:
.IP "branchcode" 4
.IX Item "branchcode"
Pre-select a library (for logged in user)
.IP "restricted_editition" 4
.IX Item "restricted_editition"
Flag to restrict the edition if the user does not have necessary permissions.
.IP "subfields_to_prefill" 4
.IX Item "subfields_to_prefill"
List of subfields to prefill (value of syspref SubfieldsToUseWhenPrefill)
.Sp
If empty all subfields will be prefilled. For none, you can pass an array with a single false value.
.IP "subfields_to_allow" 4
.IX Item "subfields_to_allow"
List of subfields to allow (value of syspref SubfieldsToAllowForRestrictedBatchmod or SubfieldsToAllowForRestrictedEditing)
.IP "ignore_not_allowed_subfields" 4
.IX Item "ignore_not_allowed_subfields"
If set, the subfields in subfields_to_allow will be ignored (ie. they will not be part of the subfield list.
If not set, the subfields in subfields_to_allow will be marked as readonly.
.IP "kohafields_to_ignore" 4
.IX Item "kohafields_to_ignore"
List of subfields to ignore/skip
.IP "prefill_with_default_values" 4
.IX Item "prefill_with_default_values"
Flag to prefill with the default values defined in the framework.
.IP "branch_limit" 4
.IX Item "branch_limit"
Limit info depending on the library (so far only item types).
.IP "default_branches_empty" 4
.IX Item "default_branches_empty"
Flag to add an empty option to the library list.
.IP "ignore_invisible_subfields" 4
.IX Item "ignore_invisible_subfields"
Skip the subfields that are not visible on the editor.
.Sp
When duplicating an item we do not want to retrieve the subfields that are hidden.
