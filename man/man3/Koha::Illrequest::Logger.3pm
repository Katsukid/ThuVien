.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Illrequest::Logger 3pm"
.TH Koha::Illrequest::Logger 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Illrequest::Logger \- Koha ILL Action / Event logger
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Object-oriented class that provides event logging functionality for
\&\s-1ILL\s0 requests
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides the ability to log arbitrary actions or events
relating to Illrequest to the action log.
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&    my $config = Koha::Illrequest::Logger\->new();
.Ve
.PP
Create a new Koha::Illrequest::Logger object.
We also set up what can be logged, how to do it and how to display
log entries we get back out
.PP
\fIlog_maybe\fR
.IX Subsection "log_maybe"
.PP
.Vb 1
\&    Koha::IllRequest::Logger\->log_maybe($params);
.Ve
.PP
Receive params hashref, containing a request object and an attrs
hashref (which may or may not be defined) If the attrs hashref contains
a key matching our \*(L"loggers\*(R" hashref then we want to log it
.PP
\fIlog_patron_notice\fR
.IX Subsection "log_patron_notice"
.PP
.Vb 1
\&    Koha::IllRequest::Logger\->log_patron_notice($params);
.Ve
.PP
Receive a hashref containing a request object and params to log,
and log it
.PP
\fIlog_status_change\fR
.IX Subsection "log_status_change"
.PP
.Vb 1
\&    Koha::IllRequest::Logger\->log_status_change($params);
.Ve
.PP
Receive a hashref containing a request object and a status to log,
and log it
.PP
\fIlog_something\fR
.IX Subsection "log_something"
.PP
.Vb 10
\&    Koha::IllRequest::Logger\->log_something({
\&        modulename   => \*(AqILL\*(Aq,
\&        actionname   => \*(AqSTATUS_CHANGE\*(Aq,
\&        objectnumber => $req\->id,
\&        infos        => to_json({
\&            log_origin    => \*(Aqcore\*(Aq,
\&            status_before => $req\->{previous_status},
\&            status_after  => $new_status
\&        })
\&    });
.Ve
.PP
If we have the required data passed, log an action
.PP
\fIget_log_template\fR
.IX Subsection "get_log_template"
.PP
.Vb 1
\&    $template_path = get_log_template($params);
.Ve
.PP
Given a log's origin and action, get the appropriate display template
.PP
\fIget_request_logs\fR
.IX Subsection "get_request_logs"
.PP
.Vb 1
\&    $requestlogs = Koha::IllRequest::Logger\->get_request_logs($request_id);
.Ve
.PP
Get all logged actions for a given request
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Isherwood <andrew.isherwood@ptfs\-europe.com>
