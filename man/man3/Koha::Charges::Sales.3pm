.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Charges::Sales 3pm"
.TH Koha::Charges::Sales 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Charges::Sale \- Module for collecting sales in Koha
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Koha::Charges::Sale;
\&
\&  my $sale =
\&    Koha::Charges::Sale\->new( { cash_register => $register, staff_id => $staff_id } );
\&  $sale\->add_item($item);
\&  $sale\->purchase( { payment_type => \*(AqCASH\*(Aq } );
.Ve
.SS "Class methods"
.IX Subsection "Class methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 9
\&  Koha::Charges::Sale\->new(
\&    {
\&        cash_register  => $cash_register,
\&        staff_id        => $staff_id,
\&        [ payment_type => $payment_type ],
\&        [ items        => $items ],
\&        [ patron       => $patron ],
\&    }
\&  );
.Ve
.PP
\fIpayment_type\fR
.IX Subsection "payment_type"
.PP
.Vb 1
\&  my $payment_type = $sale\->payment_type( $payment_type );
.Ve
.PP
A getter/setter for this instances associated payment type.
.PP
\fI_get_valid_payments\fR
.IX Subsection "_get_valid_payments"
.PP
.Vb 1
\&  my $valid_payments = $sale\->_get_valid_payments;
.Ve
.PP
A getter which returns a hashref whose keys represent valid payment types.
.PP
\fIadd_item\fR
.IX Subsection "add_item"
.PP
.Vb 2
\&  my $item = { price => 0.25, quantity => 1, code => \*(AqCOPY\*(Aq };
\&  $sale\->add_item( $item );
.Ve
.PP
\fI_get_valid_items\fR
.IX Subsection "_get_valid_items"
.PP
.Vb 1
\&  my $valid_items = $sale\->_get_valid_items;
.Ve
.PP
A getter which returns a hashref whose keys represent valid sale items.
.PP
\fIpurchase\fR
.IX Subsection "purchase"
.PP
.Vb 1
\&  my $credit_line = $sale\->purchase;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
