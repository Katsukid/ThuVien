.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::REST::Plugin::Objects 3pm"
.TH Koha::REST::Plugin::Objects 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::REST::Plugin::Objects
.SH "API"
.IX Header "API"
.SS "Helper methods"
.IX Subsection "Helper methods"
\fIobjects.find\fR
.IX Subsection "objects.find"
.PP
.Vb 4
\&    my $patrons_rs = Koha::Patrons\->new;
\&    my $patrons = $c\->objects\->find( $patrons_rs, $id );
\&    . . .
\&    return $c\->render({ status => 200, openapi => $patron });
.Ve
.PP
Performs a database search using given Koha::Objects object and the \f(CW$id\fR.
.PP
Returns \fIundef\fR if no object is found or the \fI\s-1API\s0 representation\fR of
the requested object including any embeds specified in the request.
.PP
\fIobjects.find_rs\fR
.IX Subsection "objects.find_rs"
.PP
.Vb 4
\&    my $patrons_rs = Koha::Patrons\->new;
\&    my $patron_rs = $c\->objects\->find_rs( $patrons_rs, $id );
\&    . . .
\&    return $c\->render({ status => 200, openapi => $patron_rs\->to_api });
.Ve
.PP
Returns the passed Koha::Object result filtered to the passed \f(CW$id\fR and
with any embeds requested by the api applied.
.PP
The result object can then be used for further processing.
.PP
\fIobjects.search\fR
.IX Subsection "objects.search"
.PP
.Vb 4
\&    my $patrons_rs = Koha::Patrons\->new;
\&    my $patrons = $c\->objects\->search( $patrons_rs );
\&    . . .
\&    return $c\->render({ status => 200, openapi => $patrons });
.Ve
.PP
Performs a database search using given Koha::Objects object with any api
query parameters applied.
.PP
Returns an arrayref of \fI\s-1API\s0 representations\fR of the requested objects
including any embeds specified in the request.
.PP
Warning: this helper adds pagination headers to the calling controller, and thus
shouldn't be called twice in it.
.PP
\fIobjects.search_rs\fR
.IX Subsection "objects.search_rs"
.PP
.Vb 4
\&    my $patrons_object = Koha::Patrons\->new;
\&    my $patrons_rs = $c\->objects\->search_rs( $patrons_object [, $query_fixers ] );
\&    . . .
\&    return $c\->render({ status => 200, openapi => $patrons_rs\->to_api });
.Ve
.PP
Returns the passed Koha::Objects resultset filtered as requested by the api query
parameters and with requested embeds applied.
.PP
The optional \fI\f(CI$query_fixers\fI\fR parameter is expected to be a reference to a list of
function references. This functions need to accept two parameters: ( \f(CW$query\fR, \f(CW$no_quotes\fR ).
.PP
The \fI\f(CI$query\fI\fR is a string to be adapted. A modified version will be returned. The
\&\fI\f(CI$no_quotes\fI\fR parameter controls if quotes need to be added for matching inside the string.
Quoting should be used by default, for replacing \s-1JSON\s0 keys e.g \*(L"biblio.isbn\*(R" would match
and biblio.isbn wouldn't.
.PP
Warning: this helper stashes base values for the pagination headers to the calling
controller, and thus shouldn't be called twice in it.
.PP
\fIobjects.to_api\fR
.IX Subsection "objects.to_api"
.PP
.Vb 2
\&    my $patrons_rs = Koha::Patrons\->new;
\&    my $api_representation = $c\->objects\->to_api( $patrons_rs );
.Ve
.PP
Returns the \s-1API\s0 representation of the passed resultset.
