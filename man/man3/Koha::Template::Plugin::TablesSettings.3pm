.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Template::Plugin::TablesSettings 3pm"
.TH Koha::Template::Plugin::TablesSettings 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Template::Plugin::TablesSettings
.SS "\s-1SYNOPSYS\s0"
.IX Subsection "SYNOPSYS"
.Vb 1
\&    [% USE TablesSettings %]
\&
\&    . . .
\&
\&    [% UNLESS TablesSettings.is_hidden( \*(Aqmodule\*(Aq, \*(Aqpage\*(Aq, \*(Aqtable\*(Aq, \*(Aqcolumn\*(Aq) %]
\&        <th id="column" data\-colname="column">Column title</th>
\&    [% END %]
\&
\&    . . .
\&
\&    [% UNLESS TablesSettings.is_hidden( \*(Aqmodule\*(Aq, \*(Aqpage\*(Aq, \*(Aqtable\*(Aq, \*(Aqcolumn\*(Aq) %]
\&        <td>[% row.column %]</td>
\&    [% END %]
\&
\&    . . .
\&
\&    <script>
\&        var columns_settings = [% TablesSettings.GetColumns( \*(Aqmodule\*(Aq, \*(Aqpage\*(Aq, \*(Aqtable\*(Aq, \*(Aqjson\*(Aq ) | $raw %];
\&        var table = KohaTable("id", { "bAutoWidth": false }, columns_settings );
\&    </script>
.Ve
.PP
This plugin allows to get the column configuration for a table. It should be used both in table markup
and as the input for datatables visibility settings to take full effect.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetColumns"
.IX Subsection "GetColumns"
.Vb 4
\&    <script>
\&        var tables_settings = [% TablesSettings.GetColumns( \*(Aqmodule\*(Aq, \*(Aqpage\*(Aq, \*(Aqtable\*(Aq, \*(Aqjson\*(Aq ) | $raw %];
\&        var table = KohaTable("id", { "bAutoWidth": false }, tables_settings );
\&    </script>
.Ve
.PP
Used to get the full column settings configuration for datatables, usually requires a format of 'json' to pass into
datatables instantiator.
.PP
\fIGetColumns\fR
.IX Subsection "GetColumns"
.PP
var columns_settings = [% TablesSettings.GetColumns( module, page, table 'json' ) | \f(CW$raw\fR%]
.PP
This method is usually be used to retrieve the columns settings for a DataTable init.
.PP
So the 'json' format will be provided and the columns_settings \s-1JS\s0 var will be
passed as argument of the constructor.
.SS "is_hidden"
.IX Subsection "is_hidden"
.Vb 3
\&    [% UNLESS TablesSettings.is_hidden( \*(Aqmodule\*(Aq, \*(Aqpage\*(Aq, \*(Aqtable\*(Aq, \*(Aqcolumn\*(Aq) %]
\&        <th id="column" data\-colname="column">Column title</th>
\&    [% END %]
.Ve
.PP
Used to fetch an individual columns display status so we can fully hide a column in the markup for cases where
it may contain confidential information and should be fully hidden rather than just hidden from display.
.PP
\fIGetTableSettings\fR
.IX Subsection "GetTableSettings"
.PP
[% \s-1SET\s0 table_settings = GetTableSettings( module, page, table ) %]
.PP
This method is used to retrieve the tables settings (like table_settings.default_display_length and
table_settings.default_sort_order).
They can be passed to the DataTable constructor (for iDisplayLength and order parameters)
