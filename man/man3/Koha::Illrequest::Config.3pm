.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Illrequest::Config 3pm"
.TH Koha::Illrequest::Config 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Illrequest::Config \- Koha ILL Configuration Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Object-oriented class that giving access to the illconfig data derived
from ill/config.yaml.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Config object providing abstract representation of the expected \s-1XML\s0
returned by \s-1ILL API.\s0
.PP
In particular the config object uses a \s-1YAML\s0 file, whose path is
defined by <illconfig> in koha\-conf.xml. That \s-1YAML\s0 file provides the
data structure exposed in this object.
.PP
By default the configured data structure complies with fields used by
the British Library Interlibrary Loan \s-1DSS API.\s0
.PP
The config file also provides mappings for Record Object accessors.
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&    my $config = Koha::Illrequest::Config\->new();
.Ve
.PP
Create a new Koha::Illrequest::Config object, with mapping data loaded from the
\&\s-1ILL\s0 configuration file.
.PP
\fIbackend\fR
.IX Subsection "backend"
.PP
.Vb 2
\&    $backend = $config\->backend($name);
\&    $backend = $config\->backend;
.Ve
.PP
Standard setter/accessor for our backend.
.PP
\fIbackend_dir\fR
.IX Subsection "backend_dir"
.PP
.Vb 2
\&    $backend_dir = $config\->backend_dir($new_path);
\&    $backend_dir = $config\->backend_dir;
.Ve
.PP
Standard setter/accessor for our backend_directory.
.PP
\fIavailable_backends\fR
.IX Subsection "available_backends"
.PP
.Vb 2
\&  $backends = $config\->available_backends;
\&  $backends = $config\->abailable_backends($reduced);
.Ve
.PP
Return a list of available backends, if passed a | delimited list it
will filter those backends down to only those present in the list.
.PP
\fIhas_branch\fR
.IX Subsection "has_branch"
.PP
Return whether a 'branch' block is defined
.PP
\fIpartner_code\fR
.IX Subsection "partner_code"
.PP
.Vb 2
\&    $partner_code = $config\->partner_code($new_code);
\&    $partner_code = $config\->partner_code;
.Ve
.PP
Standard setter/accessor for our partner_code.
.PP
\fIlimits\fR
.IX Subsection "limits"
.PP
.Vb 2
\&    $limits = $config\->limits($limitshash);
\&    $limits = $config\->limits;
.Ve
.PP
Standard setter/accessor for our limits.  No parsing is performed on
\&\f(CW$LIMITSHASH\fR, so caution should be exercised when using this setter.
.PP
\fIgetPrefixes\fR
.IX Subsection "getPrefixes"
.PP
.Vb 1
\&    my $prefixes = $config\->getPrefixes();
.Ve
.PP
Return the branch prefix for ILLs defined by our config.
.PP
\fIgetLimitRules\fR
.IX Subsection "getLimitRules"
.PP
.Vb 1
\&    my $rules = $config\->getLimitRules(\*(Aqbrw_cat\*(Aq | \*(Aqbranch\*(Aq)
.Ve
.PP
Return the hash of \s-1ILL\s0 limit rules defined by our config.
.PP
\fIgetDigitalRecipients\fR
.IX Subsection "getDigitalRecipients"
.PP
.Vb 1
\&    my $recipient_rules= $config\->getDigitalRecipients(\*(Aqbrw_cat\*(Aq | \*(Aqbranch\*(Aq);
.Ve
.PP
Return the hash of digital_recipient settings defined by our config.
.PP
\fIcensorship\fR
.IX Subsection "censorship"
.PP
.Vb 2
\&    my $censoredValues = $config\->censorship($hash);
\&    my $censoredValues = $config\->censorship;
.Ve
.PP
Standard setter/accessor for our limits.  No parsing is performed on \f(CW$HASH\fR, so
caution should be exercised when using this setter.
.PP
Return our censorship values for the \s-1OPAC\s0 as loaded from the koha\-conf.xml, or
the fallback value (no censorship).
.PP
\fI_load_configuration\fR
.IX Subsection "_load_configuration"
.PP
.Vb 1
\&    my $configuration = $config\->_load_configuration($config_from_xml);
.Ve
.PP
Read the configuration values passed as the parameter, and populate a hashref
suitable for use with these.
.PP
A key task performed here is the parsing of the input in the configuration
file to ensure we have only valid input there.
.PP
\fI_load_unit_config\fR
.IX Subsection "_load_unit_config"
.PP
.Vb 1
\&    my $configuration\->{part} = _load_unit_config($params);
.Ve
.PP
\&\f(CW$PARAMS\fR is a hashref with the following elements:
\&\- unit: the part of the configuration we are parsing.
\&\- id: the name within which we will store the parsed unit in config.
\&\- config: the configuration we are augmenting.
\&\- type: the type of config unit we are parsing.  Assumed to be 'default'.
.PP
Read `unit', and augment `config' with these under `id'.
.PP
This is a helper for _load_configuration.
.PP
A key task performed here is the parsing of the input in the configuration
file to ensure we have only valid input there.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Sassmannshausen <alex.sassmannshausen@ptfs\-europe.com>
