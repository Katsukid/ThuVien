.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Breeding 3pm"
.TH C4::Breeding 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Breeding : module to add biblios to import_records via
               the breeding/reservoir API.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    Z3950Search($pars, $template);
\&    ($count, @results) = &BreedingSearch($title,$isbn);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines related to Koha's Z39.50 search into
cataloguing reservoir features.
.SS "BreedingSearch"
.IX Subsection "BreedingSearch"
($count, \f(CW@results\fR) = &BreedingSearch($term);
\&\f(CW$term\fR contains the term to search, it will be searched as title,author, or isbn
.PP
\&\f(CW$count\fR is the number of items in \f(CW@results\fR. \f(CW@results\fR is an
array of references-to-hash; the keys are the items from the \f(CW\*(C`import_records\*(C'\fR and
\&\f(CW\*(C`import_biblios\*(C'\fR tables of the Koha database.
.SS "Z3950Search"
.IX Subsection "Z3950Search"
Z3950Search($pars, \f(CW$template\fR);
.PP
Parameters for Z3950 search are all passed via the \f(CW$pars\fR hash. It may contain isbn, title, author, dewey, subject, lccall, controlnumber, stdid, srchany.
Also it should contain an arrayref id that points to a list of id's of the z3950 targets to be queried (see z3950servers table).
This code is used in acqui/z3950_search and cataloging/z3950_search.
The second parameter \f(CW$template\fR is a Template object. The routine uses this parameter to store the found values into the template.
.SS "ImportBreedingAuth"
.IX Subsection "ImportBreedingAuth"
ImportBreedingAuth( \f(CW$marcrecord\fR, \f(CW$filename\fR, \f(CW$encoding\fR, \f(CW$heading\fR );
.PP
.Vb 1
\&    ImportBreedingAuth imports MARC records in the reservoir (import_records table) or returns their id if they already exist.
.Ve
.SS "Z3950SearchAuth"
.IX Subsection "Z3950SearchAuth"
Z3950SearchAuth($pars, \f(CW$template\fR);
.PP
Parameters for Z3950 search are all passed via the \f(CW$pars\fR hash. It may contain nameany, namepersonal, namecorp, namemeetingcon,
title, uniform title, subject, subjectsubdiv, srchany.
Also it should contain an arrayref id that points to a list of IDs of the z3950 targets to be queried (see z3950servers table).
This code is used in cataloging/z3950_auth_search.
The second parameter \f(CW$template\fR is a Template object. The routine uses this parameter to store the found values into the template.
