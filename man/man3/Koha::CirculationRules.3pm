.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::CirculationRules 3pm"
.TH Koha::CirculationRules 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::CirculationRules \- Koha CirculationRule Object set class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIrule_kinds\fR
.IX Subsection "rule_kinds"
.PP
This structure describes the possible rules that may be set, and what scopes they can be set at.
.PP
Any attempt to set a rule with a nonsensical scope (for instance, setting the \f(CW\*(C`patron_maxissueqty\*(C'\fR for a branchcode and itemtype), is an error.
.PP
\fIget_effective_rule\fR
.IX Subsection "get_effective_rule"
.PP
.Vb 8
\&  my $effective_rule = Koha::CirculationRules\->get_effective_rule(
\&    {
\&        rule_name    => $name,
\&        categorycode => $categorycode,
\&        itemtype     => $itemtype,
\&        branchcode   => $branchcode
\&    }
\&  );
.Ve
.PP
Return the effective rule object for the rule associated with the criteria passed.
.PP
\fIget_effective_rule_value\fR
.IX Subsection "get_effective_rule_value"
.PP
.Vb 8
\&  my $effective_rule_value = Koha::CirculationRules\->get_effective_rule_value(
\&    {
\&        rule_name    => $name,
\&        categorycode => $categorycode,
\&        itemtype     => $itemtype,
\&        branchcode   => $branchcode
\&    }
\&  );
.Ve
.PP
Return the effective value for the rule associated with the criteria passed.
.PP
This is a cached method so should be used in preference to get_effective_rule where possible
to aid performance.
.PP
\fIget_effective_rules\fR
.IX Subsection "get_effective_rules"
.PP
\fIset_rule\fR
.IX Subsection "set_rule"
.PP
\fIset_rules\fR
.IX Subsection "set_rules"
.PP
\fIdelete\fR
.IX Subsection "delete"
.PP
Delete a set of circulation rules, needed for cleaning up when deleting issuingrules
.PP
\fIclone\fR
.IX Subsection "clone"
.PP
Clone a set of circulation rules to another branch
.SS "get_return_branch_policy"
.IX Subsection "get_return_branch_policy"
.Vb 1
\&  my $returnbranch = Koha::CirculationRules\->get_return_branch_policy($item);
.Ve
.PP
Returns the branch to use for returning the item based on the
item type, and a branch selected via CircControlReturnsBranch.
.PP
The return value is the branch to which to return the item. Possible values:
  noreturn: do not return, let item remain where checked in (floating collections)
  homebranch: return to item's home branch
  holdingbranch: return to issuer branch
.PP
This searches branchitemrules in the following order:
  * Same branchcode and itemtype
  * Same branchcode, itemtype '*'
  * branchcode '*', same itemtype
  * branchcode '*' and itemtype '*'
.PP
\fIget_opacitemholds_policy\fR
.IX Subsection "get_opacitemholds_policy"
.PP
my \f(CW$can_place_a_hold_at_item_level\fR = Koha::CirculationRules\->get_opacitemholds_policy( { patron => \f(CW$patron\fR, item => \f(CW$item\fR } );
.PP
Return 'Y' or 'F' if the patron can place a hold on this item according to the issuing rules
and the \*(L"Item level holds\*(R" (opacitemholds).
Can be 'N' \- Don't allow, 'Y' \- Allow, and 'F' \- Force
.PP
\fIget_onshelfholds_policy\fR
.IX Subsection "get_onshelfholds_policy"
.PP
.Vb 1
\&    my $on_shelf_holds = Koha::CirculationRules\->get_onshelfholds_policy({ item => $item, patron => $patron });
.Ve
.PP
\fIget_lostreturn_policy\fR
.IX Subsection "get_lostreturn_policy"
.PP
.Vb 1
\&  my $lost_proc_refund_policy = Koha::CirculationRules\->get_lostreturn_policy( { return_branch => $return_branch, item => $item } );
.Ve
.PP
lostreturn return values are:
.IP "'0' \- Do not refund" 2
.IX Item "'0' - Do not refund"
.PD 0
.IP "'refund' \- Refund the lost item charge" 2
.IX Item "'refund' - Refund the lost item charge"
.IP "'restore' \- Refund the lost item charge and restore the original overdue fine" 2
.IX Item "'restore' - Refund the lost item charge and restore the original overdue fine"
.IP "'charge' \- Refund the lost item charge and charge a new overdue fine" 2
.IX Item "'charge' - Refund the lost item charge and charge a new overdue fine"
.PD
.PP
processing return return values are:
.IP "'0' \- Do not refund" 2
.IX Item "'0' - Do not refund"
.PD 0
.IP "'refund' \- Refund the lost item processing charge" 2
.IX Item "'refund' - Refund the lost item processing charge"
.IP "'restore' \- Refund the lost item processing charge and restore the original overdue fine" 2
.IX Item "'restore' - Refund the lost item processing charge and restore the original overdue fine"
.IP "'charge' \- Refund the lost item processing charge and charge a new overdue fine" 2
.IX Item "'charge' - Refund the lost item processing charge and charge a new overdue fine"
.PD
.PP
\fIarticle_requestable_rules\fR
.IX Subsection "article_requestable_rules"
.PP
.Vb 2
\&    Return rules that allow article requests, optionally filtered by
\&    patron categorycode.
\&
\&    Use with care; see guess_article_requestable_itemtypes.
.Ve
.PP
\fIguess_article_requestable_itemtypes\fR
.IX Subsection "guess_article_requestable_itemtypes"
.PP
.Vb 3
\&    Return item types in a hashref that are likely possible to be
\&    \*(Aqarticle requested\*(Aq. Constructed by an intelligent guess in the
\&    issuing rules (see article_requestable_rules).
\&
\&    Note: pref ArticleRequestsLinkControl overrides the algorithm.
\&
\&    Optional parameters: categorycode.
\&
\&    Note: the routine is used in opac\-search to obtain a reasonable
\&    estimate within performance borders (not looking at all items but
\&    just using default itemtype). Also we are not looking at the
\&    branchcode here, since home or holding branch of the item is
\&    leading and branch may be unknown too (anonymous opac session).
.Ve
.PP
\fIget_effective_daysmode\fR
.IX Subsection "get_effective_daysmode"
.PP
Return the value for daysmode defined in the circulation rules.
If not defined (or empty string), the value of the system preference useDaysMode is returned
.PP
\fItype\fR
.IX Subsection "type"
.PP
\fIobject_class\fR
.IX Subsection "object_class"
