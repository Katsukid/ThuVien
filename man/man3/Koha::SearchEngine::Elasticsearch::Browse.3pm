.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::SearchEngine::Elasticsearch::Browse 3pm"
.TH Koha::SearchEngine::Elasticsearch::Browse 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::SearchEngine::ElasticSearch::Browse \- browse functions for Elasticsearch
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&    my $browser =
\&      Koha::SearchEngine::Elasticsearch::Browse\->new( { index => \*(Aqbiblios\*(Aq } );
\&    my $results = $browser\->browse(
\&        \*(Aqprefi\*(Aq, \*(Aqtitle\*(Aq,
\&        {
\&            results   => \*(Aq500\*(Aq,
\&            fuzziness => 2,
\&        }
\&    );
\&    foreach my $r (@$results) {
\&        push @hits, $r\->{text};
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This provides an easy interface to the \*(L"browse\*(R" functionality. Essentially,
it does a fast prefix search on defined fields. The fields have to be marked
as \*(L"suggestible\*(R" in the database when indexing takes place.
.SH "METHODS"
.IX Header "METHODS"
.SS "browse"
.IX Subsection "browse"
.Vb 1
\&    my $results = $browser\->browse($prefix, $field, \e%options);
.Ve
.PP
Does a prefix search for \f(CW$prefix\fR, looking in \f(CW$field\fR. Options are:
.IP "count" 4
.IX Item "count"
The number of results to return. For Koha browse purposes, this should
probably be fairly high. Defaults to 500.
.IP "fuzziness" 4
.IX Item "fuzziness"
How much allowing for typos and misspellings is done. If 0, then it must match
exactly. If unspecified, it defaults to '1', which is probably the most useful.
Otherwise, it is a number specifying the Levenshtein edit distance relative to
the string length, according to the following lengths:
.RS 4
.IP "0..2" 4
.IX Item "0..2"
must match exactly
.IP "3..5" 4
.IX Item "3..5"
\&\f(CW\*(C`fuzziness\*(C'\fR edits allowed
.IP ">5" 4
.IX Item ">5"
\&\f(CW\*(C`fuzziness\*(C'\fR+1 edits allowed
.RE
.RS 4
.Sp
In all cases the maximum number of edits allowed is two (an elasticsearch
restriction.)
.RE
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
This returns an arrayref of hashrefs. Each hashref contains a \*(L"text\*(R" element
that contains the field as returned. There may be other fields in that
hashref too, but they're less likely to be important.
.PP
The array will be ordered as returned from Elasticsearch, which seems to be
in order of some form of relevance.
.SS "_build_query"
.IX Subsection "_build_query"
.Vb 1
\&    my $query = $self\->_build_query($prefix, $field, $options);
.Ve
.PP
Arguments are the same as for browse. This will return a query structure
for elasticsearch to use.
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Robin Sheat << <robin@catalyst.net.nz> >>" 4
.IX Item "Robin Sheat << <robin@catalyst.net.nz> >>"
