.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Z3950Responder 3pm"
.TH Koha::Z3950Responder 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Z3950Responder \- Main class for interfacing with Net::Z3950::SimpleServer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Koha::Z3950Responder;
\&
\&    my $z = Koha::Z3950Responder\->new( {
\&        add_item_status_subfield => 1,
\&        add_status_multi_subfield => 1,
\&        debug => 0,
\&        num_to_prefetch => 20,
\&        config_dir => \*(Aq/home/koha/etc\*(Aq,
\&        yaz_options => [ ],
\&    } );
\&
\&    $z\->start();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A daemon class that interfaces with Net::Z3950::SimpleServer to provider Z39.50/SRU
service. Uses a Session class for the actual functionality.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1INSTANCE METHODS\s0"
.IX Subsection "INSTANCE METHODS"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 3
\&    $self\->new({
\&        add_item_status_subfield => 1
\&    });
.Ve
.PP
\fIstart\fR
.IX Subsection "start"
.PP
.Vb 1
\&    $z\->start();
.Ve
.PP
Start the daemon and begin serving requests. Does not return unless initialization fails or a
fatal error occurs.
.SS "\s-1CALLBACKS\s0"
.IX Subsection "CALLBACKS"
These methods are SimpleServer callbacks bound to this Z3950Responder object.
It's worth noting that these callbacks don't return anything; they both
receive and return data in the \f(CW$args\fR hashref.
.PP
\fIinit_handler\fR
.IX Subsection "init_handler"
.PP
Callback that is called when a new connection is initialized
.PP
\fIsearch_handler\fR
.IX Subsection "search_handler"
.PP
Callback that is called when a new search is performed
.PP
\fIfetch_handler\fR
.IX Subsection "fetch_handler"
.PP
Callback that is called when records are requested
.PP
\fIclose_handler\fR
.IX Subsection "close_handler"
.PP
Callback that is called when a session is terminated
