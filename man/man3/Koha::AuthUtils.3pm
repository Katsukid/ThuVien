.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::AuthUtils 3pm"
.TH Koha::AuthUtils 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::AuthUtils \- utility routines for authentication
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Koha::AuthUtils qw/hash_password/;
\&    my $hash = hash_password($password);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides utility functions related to managing
user passwords.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "hash_password"
.IX Subsection "hash_password"
.Vb 1
\&    my $hash = Koha::AuthUtils::hash_password($password, $settings);
.Ve
.PP
Hash \fI\f(CI$password\fI\fR using Bcrypt. Accepts an extra \fI\f(CI$settings\fI\fR parameter for salt.
If \fI\f(CI$settings\fI\fR is not passed, a new salt is generated.
.PP
\&\s-1WARNING:\s0 If this method implementation is changed in the future, as of
bug 28772 there's at least one DBRev that uses this code and should
be taken care of.
.SS "generate_salt"
.IX Subsection "generate_salt"
.Vb 1
\&    my $salt = Koha::Auth::generate_salt($strength, $length);
.Ve
.IP "strength" 4
.IX Item "strength"
For general password salting a \f(CW$strength\fR of \f(CW\*(C`weak\*(C'\fR is recommend,
For generating a server-salt a \f(CW$strength\fR of \f(CW\*(C`strong\*(C'\fR is recommended
.Sp
\&'strong' uses /dev/random which may block until sufficient entropy is achieved.
\&'weak' uses /dev/urandom and is non-blocking.
.IP "length" 4
.IX Item "length"
\&\f(CW$length\fR is a positive integer which specifies the desired length of the returned string
.SS "is_password_valid"
.IX Subsection "is_password_valid"
my ( \f(CW$is_valid\fR, \f(CW$error\fR ) = is_password_valid( \f(CW$password\fR, \f(CW$category\fR );
.PP
return \f(CW$is_valid\fR == 1 if the password match category's minimum password length and strength if provided, or general minPasswordLength and RequireStrongPassword conditions
otherwise return \f(CW$is_valid\fR == 0 and \f(CW$error\fR will contain the error ('too_short' or 'too_weak')
.SS "generate_password"
.IX Subsection "generate_password"
my password = generate_password($category);
.PP
Generate a password according to category's minimum password length and strength if provided, or to the minPasswordLength and RequireStrongPassword system preferences.
.SS "get_script_name"
.IX Subsection "get_script_name"
This returns the correct script name, for use in redirecting back to the correct page after showing
the login screen. It depends on details of the package Plack configuration, and should not be used
outside this context.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBCrypt::Eksblowfish::Bcrypt\fR\|(3)
