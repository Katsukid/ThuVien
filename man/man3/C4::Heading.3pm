.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Heading 3pm"
.TH C4::Heading 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Heading
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& use C4::Heading;
\& my $heading = C4::Heading\->new_from_field($field, $frameworkcode);
\& my $thesaurus = $heading\->thesaurus();
\& my $type = $heading\->type();
\& my $display_heading = $heading\->display_form();
\& my $search_form = $heading\->search_form();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`C4::Heading\*(C'\fR implements a simple class to representing
headings found in bibliographic and authority records.
.SH "METHODS"
.IX Header "METHODS"
.SS "new_from_field"
.IX Subsection "new_from_field"
.Vb 1
\&  my $heading = C4::Heading\->new_from_field($field, $frameworkcode, [, $auth]);
.Ve
.PP
Given a \f(CW\*(C`MARC::Field\*(C'\fR object containing a heading from a 
bib record, create a \f(CW\*(C`C4::Heading\*(C'\fR object.
.PP
The optional third parameter is 'auth' \- it is handled as boolean. If supplied we treat the field as an auth record field. Otherwise if it is a bib field. The fields checked are the same in a \s-1UNIMARC\s0 system and this parameter is ignored
.PP
If the \s-1MARC\s0 field supplied is not a valid heading, undef
is returned.
.SS "auth_type"
.IX Subsection "auth_type"
.Vb 1
\&  my $auth_type = $heading\->auth_type();
.Ve
.PP
Return the auth_type of the heading.
.SS "field"
.IX Subsection "field"
.Vb 1
\&  my $field = $heading\->field();
.Ve
.PP
Return the MARC::Field the heading is based on.
.SS "display_form"
.IX Subsection "display_form"
.Vb 1
\&  my $display = $heading\->display_form();
.Ve
.PP
Return the \*(L"canonical\*(R" display form of the heading.
.SS "search_form"
.IX Subsection "search_form"
.Vb 1
\&  my $search_form = $heading\->search_form();
.Ve
.PP
Return the \*(L"canonical\*(R" search form of the heading.
.SS "authorities"
.IX Subsection "authorities"
.Vb 1
\&  my $authorities = $heading\->authorities([$skipmetadata]);
.Ve
.PP
Return a list of authority records for this 
heading. If passed a true value for \f(CW$skipmetadata\fR,
SearchAuthorities will return only authids.
.SS "preferred_authorities"
.IX Subsection "preferred_authorities"
.Vb 1
\&  my $preferred_authorities = $heading\->preferred_authorities;
.Ve
.PP
Return a list of authority records for headings
that are a preferred form of the heading.
.SS "valid_heading_subfield"
.IX Subsection "valid_heading_subfield"
.Vb 1
\&    if (C4::Heading::valid_heading_subfield(\*(Aq100\*(Aq, \*(Aqe\*(Aq, \*(Aq\*(Aq)) ...
.Ve
.PP
Check if the given subfield is valid for the given field.
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.SS "_search"
.IX Subsection "_search"
.SH "INTERNAL FUNCTIONS"
.IX Header "INTERNAL FUNCTIONS"
.SS "_marc_format_handler"
.IX Subsection "_marc_format_handler"
Returns a C4::Heading::MARC21 or C4::Heading::UNIMARC object
depending on the selected \s-1MARC\s0 flavour.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
