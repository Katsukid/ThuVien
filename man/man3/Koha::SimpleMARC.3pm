.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::SimpleMARC 3pm"
.TH Koha::SimpleMARC 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SimpleMARC \- Perl module for making simple MARC record alterations.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use SimpleMARC;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SimpleMARC is designed to make writing scripts
to modify \s-1MARC\s0 records simple and easy.
.PP
Every function in the modules requires a
MARC::Record object as its first parameter.
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle Hall <lt>kyle.m.hall@gmail.com<gt>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009 by Kyle Hall
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "copy_field"
.IX Subsection "copy_field"
.Vb 1
\&  copy_field( $record, $fromFieldName, $fromSubfieldName, $toFieldName, $toSubfieldName[, $regex[, $n ] ] );
\&
\&  Copies a value from one field to another. If a regular expression ( $regex ) is supplied,
\&  the value will be transformed by the given regex before being copied into the new field.
\&  Example: $regex = { search => \*(AqOld Text\*(Aq, replace => \*(AqReplacement Text\*(Aq, modifiers => \*(Aqg\*(Aq };
\&
\&  If $n is passed, copy_field will only copy the Nth field of the list of fields.
\&  E.g. $n = 1 will only use the first field\*(Aqs value, $n = 2 will use only the 2nd field\*(Aqs value.
.Ve
.SS "add_field"
.IX Subsection "add_field"
.Vb 7
\&  add_field({
\&      record   => $record,
\&      field    => $fieldName,
\&      subfield => $subfieldName,
\&      values   => \e@values,
\&      field_numbers => $field_numbers,
\&  });
\&
\&  Adds a new field/subfield with supplied value(s).
\&  This function always add a new field as opposed to \*(Aqupdate_field\*(Aq which will
\&  either update if field exists and add if it does not.
.Ve
.SS "read_field"
.IX Subsection "read_field"
.Vb 1
\&  my @values = read_field( $record, $fieldName[, $subfieldName, [, $n ] ] );
\&
\&  Returns an array of field values for the given field and subfield
\&
\&  If $n is given, it will return only the $nth value of the array.
\&  E.g. If $n = 1, it return the 1st value, if $n = 3, it will return the 3rd value.
.Ve
.SS "field_exists"
.IX Subsection "field_exists"
.Vb 1
\&  @field_numbers = field_exists( $record, $fieldName[, $subfieldName ]);
\&
\&  Returns the field numbers or an empty array.
.Ve
.SS "field_equals"
.IX Subsection "field_equals"
.Vb 1
\&  $bool = field_equals( $record, $value, $fieldName[, $subfieldName[, $regex ] ]);
\&
\&  Returns true if the field equals the given value, false otherwise.
\&
\&  If a regular expression ( $regex ) is supplied, the value will be compared using
\&  the given regex. Example: $regex = \*(Aqsought_text\*(Aq
.Ve
.SS "move_field"
.IX Subsection "move_field"
.Vb 1
\&  move_field( $record, $fromFieldName, $fromSubfieldName, $toFieldName, $toSubfieldName[, $regex [, $n ] ] );
\&
\&  Moves a value from one field to another. If a regular expression ( $regex ) is supplied,
\&  the value will be transformed by the given regex before being moved into the new field.
\&  Example: $regex = \*(Aqs/Old Text/Replacement Text/\*(Aq
\&
\&  If $n is passed, only the Nth field will be moved. $n = 1
\&  will move the first repeatable field, $n = 3 will move the third.
.Ve
.SS "_delete_field"
.IX Subsection "_delete_field"
.Vb 1
\&  _delete_field( $record, $fieldName[, $subfieldName [, $n ] ] );
\&
\&  Deletes the given field.
\&
\&  If $n is passed, only the Nth field will be deleted. $n = 1
\&  will delete the first repeatable field, $n = 3 will delete the third.
.Ve
