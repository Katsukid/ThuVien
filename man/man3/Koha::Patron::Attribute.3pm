.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Patron::Attribute 3pm"
.TH Koha::Patron::Attribute 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Patron::Attribute \- Koha Patron Attribute Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIstore\fR
.IX Subsection "store"
.PP
.Vb 3
\&    my $attribute = Koha::Patron::Attribute\->new({ code => \*(Aqa_code\*(Aq, ... });
\&    try { $attribute\->store }
\&    catch { handle_exception };
.Ve
.PP
\fItype\fR
.IX Subsection "type"
.PP
.Vb 1
\&    my $attribute_type = $attribute\->type;
.Ve
.PP
Returns a \f(CW\*(C`Koha::Patron::Attribute::Type\*(C'\fR object corresponding to the current patron attribute
.PP
\fIauthorised_value\fR
.IX Subsection "authorised_value"
.PP
my \f(CW$authorised_value\fR = \f(CW$attribute\fR\->authorised_value;
.PP
Return the Koha::AuthorisedValue object of this attribute when one is attached.
.PP
Return undef if this attribute is not attached to an authorised value
.PP
\fIdescription\fR
.IX Subsection "description"
.PP
my \f(CW$description\fR = \f(CW$patron_attribute\fR\->description;
.PP
Return the value of this attribute or the description of the authorised value (when attached).
.PP
This method must be called when the authorised value's description must be
displayed instead of the code.
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Patron::Attribute object
on the \s-1API.\s0
.PP
\fIrepeatable_ok\fR
.IX Subsection "repeatable_ok"
.PP
Checks if the attribute type is repeatable and returns a boolean representing
whether storing the current object state would break the repeatable constraint.
.PP
\fIunique_ok\fR
.IX Subsection "unique_ok"
.PP
Checks if the attribute type is marked as unique and returns a boolean representing
whether storing the current object state would break the unique constraint.
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
