.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::ExternalContent::OverDrive 3pm"
.TH Koha::ExternalContent::OverDrive 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::ExternalContent::OverDrive
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    Register return url with OverDrive:
\&      base app url + /cgi\-bin/koha/external/overdrive/auth.pl
\&
\&    use Koha::ExternalContent::OverDrive;
\&    my $od_client = Koha::ExternalContent::OverDrive\->new();
\&    my $od_auth_url = $od_client\->auth_url($return_page_url);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A (very) thin wrapper around \f(CW\*(C`WebService::ILS::OverDrive::Patron\*(C'\fR
.PP
Takes \*(L"OverDrive*\*(R" Koha preferences
.SH "WebService::ILS::OverDrive::Patron METHODS"
.IX Header "WebService::ILS::OverDrive::Patron METHODS"
Methods used without mods:
.ie n .IP """error_message()""" 4
.el .IP "\f(CWerror_message()\fR" 4
.IX Item "error_message()"
.PD 0
.ie n .IP """patron()""" 4
.el .IP "\f(CWpatron()\fR" 4
.IX Item "patron()"
.ie n .IP """checkouts()""" 4
.el .IP "\f(CWcheckouts()\fR" 4
.IX Item "checkouts()"
.ie n .IP """holds()""" 4
.el .IP "\f(CWholds()\fR" 4
.IX Item "holds()"
.ie n .IP """checkout($id, $format)""" 4
.el .IP "\f(CWcheckout($id, $format)\fR" 4
.IX Item "checkout($id, $format)"
.ie n .IP """checkout_download_url($id)""" 4
.el .IP "\f(CWcheckout_download_url($id)\fR" 4
.IX Item "checkout_download_url($id)"
.ie n .IP """return($id)""" 4
.el .IP "\f(CWreturn($id)\fR" 4
.IX Item "return($id)"
.ie n .IP """place_hold($id)""" 4
.el .IP "\f(CWplace_hold($id)\fR" 4
.IX Item "place_hold($id)"
.ie n .IP """remove_hold($id)""" 4
.el .IP "\f(CWremove_hold($id)\fR" 4
.IX Item "remove_hold($id)"
.PD
.PP
Methods with slightly moded interfaces:
.SS "auth_url($page_url)"
.IX Subsection "auth_url($page_url)"
.Vb 1
\&  Input: url of the page from which OverDrive authentication was requested
\&
\&  Returns: Post OverDrive auth return handler url (see SYNOPSIS)
.Ve
.ie n .SS "auth_by_code($code, $base_url)"
.el .SS "auth_by_code($code, \f(CW$base_url\fP)"
.IX Subsection "auth_by_code($code, $base_url)"
.Vb 1
\&  To be called in external/overdrive/auth.pl upon return from OverDrive Granted auth
.Ve
.ie n .SS "auth_by_userid($userid, $password, $website_id, $authorization_name)"
.el .SS "auth_by_userid($userid, \f(CW$password\fP, \f(CW$website_id\fP, \f(CW$authorization_name\fP)"
.IX Subsection "auth_by_userid($userid, $password, $website_id, $authorization_name)"
.Vb 2
\&  To be called to check auth of patron using OverDrive Patron Authentication method
\&  This requires a SIP connection configured with OverDrive
.Ve
.SS "checkout_download_url($item_id)"
.IX Subsection "checkout_download_url($item_id)"
.Vb 1
\&  Input: id of the item to download
\&
\&  Returns: Fulfillment URL for reidrection
.Ve
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.SS "\fBis_logged_in()\fP"
.IX Subsection "is_logged_in()"
.Vb 1
\&  Returns boolean
.Ve
.SS "\fBforget()\fP"
.IX Subsection "forget()"
.Vb 1
\&  Removes stored OverDrive token
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
CatalystIT
