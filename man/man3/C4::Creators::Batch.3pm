.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Creators::Batch 3pm"
.TH C4::Creators::Batch 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Labels::Batch \- A class for creating and manipulating batch objects in Koha
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This module provides methods for creating, and otherwise manipulating batch objects used by Koha to create and export labels.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBnew()\fP"
.IX Subsection "new()"
.Vb 2
\&    Invoking the I<new> method constructs a new batch object with no items. It is possible to pre\-populate the batch with items and a branch code by passing them
\&    as in the second example below.
\&
\&    B<NOTE:> The items list must be an arrayref pointing to an array of hashes containing a key/data pair after this fashion: {item_number => item_number}. The order of
\&    the array elements determines the order of the items in the batch.
\&
\&    example:
\&        C<my $batch = C4::Labels::Batch\->new(); # Creates and returns a new batch object>
\&
\&        C<my $batch = C4::Labels::Batch\->new(items => $arrayref, branch_code => branch_code) #    Creates and returns a new batch object containing the items passed in
\&            with the branch code passed in.>
\&
\&    B<NOTE:> This batch is I<not> written to the database until C<$batch\->save()> is invoked. You have been warned!
.Ve
.ie n .SS "$batch\->add_item(item_number => $item_number, branch_code => $branch_code)"
.el .SS "\f(CW$batch\fP\->add_item(item_number => \f(CW$item_number\fP, branch_code => \f(CW$branch_code\fP)"
.IX Subsection "$batch->add_item(item_number => $item_number, branch_code => $branch_code)"
.Vb 1
\&    Invoking the I<add_item> method will add the supplied item to the batch object.
\&
\&    example:
\&        $batch\->add_item(item_number => $item_number, branch_code => $branch_code);
.Ve
.ie n .SS "$batch\->get_attr($attribute)"
.el .SS "\f(CW$batch\fP\->get_attr($attribute)"
.IX Subsection "$batch->get_attr($attribute)"
.Vb 1
\&    Invoking the I<get_attr> method will return the requested attribute.
\&
\&    example:
\&        my @items = $batch\->get_attr(\*(Aqitems\*(Aq);
.Ve
.ie n .SS "$batch\->remove_item($item_number)"
.el .SS "\f(CW$batch\fP\->remove_item($item_number)"
.IX Subsection "$batch->remove_item($item_number)"
.Vb 1
\&    Invoking the I<remove_item> method will remove the supplied item number from the batch object.
\&
\&    example:
\&        $batch\->remove_item($item_number);
.Ve
.ie n .SS "C4::Labels::Batch\->retrieve(batch_id => $batch_id)"
.el .SS "C4::Labels::Batch\->retrieve(batch_id => \f(CW$batch_id\fP)"
.IX Subsection "C4::Labels::Batch->retrieve(batch_id => $batch_id)"
.Vb 2
\&    Invoking the I<retrieve> method constructs a new batch object containing the current values for batch_id. The method returns a new object upon success and 1 upon failure.
\&    Errors are logged to the Apache log.
\&
\&    examples:
\&
\&        my $batch = C4::Labels::Batch\->retrieve(batch_id => 1); # Retrieves batch 1 and returns an object containing the record
.Ve
.SS "\fBdelete()\fP"
.IX Subsection "delete()"
.Vb 2
\&    Invoking the delete method attempts to delete the template from the database. The method returns \-1 upon failure. Errors are logged to the Apache log.
\&    NOTE: This method may also be called as a function and passed a key/value pair simply deleteing that batch from the database. See the example below.
\&
\&    examples:
\&        my $exitstat = $batch\->delete(); # to delete the record behind the $batch object
\&        my $exitstat = C4::Labels::Batch\->delete(batch_id => 1); # to delete batch 1
.Ve
.SS "\fBremove_duplicates()\fP"
.IX Subsection "remove_duplicates()"
.Vb 3
\&    Invoking the remove_duplicates method attempts to remove duplicate items in the batch from the database. The method returns the count of duplicate records removed upon
\&    success and \-1 upon failure. Errors are logged to the Apache log.
\&    NOTE: This method may also be called as a function and passed a key/value pair removing duplicates in the batch passed in. See the example below.
\&
\&    examples:
\&        my $remove_count = $batch\->remove_duplicates(); # to remove duplicates the record behind the $batch object
\&        my $remove_count = C4::Labels::Batch\->remove_duplicates(batch_id => 1); # to remove duplicates in batch 1
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Nighswonger <cnighswonger \s-1AT\s0 foundations \s-1DOT\s0 edu>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2009 Foundations Bible College.
.SH "LICENSE"
.IX Header "LICENSE"
This file is part of Koha.
.PP
Koha is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.
.PP
Koha is distributed in the hope that it will be useful, but
\&\s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with Koha; if not, see <http://www.gnu.org/licenses>.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
Koha is distributed in the hope that it will be useful, but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR
A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details.
