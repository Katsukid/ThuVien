.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Hold 3pm"
.TH Koha::Hold 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Hold \- Koha Hold object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIage\fR
.IX Subsection "age"
.PP
returns the number of days since a hold was placed, optionally
using the calendar
.PP
my \f(CW$age\fR = \f(CW$hold\fR\->age( \f(CW$use_calendar\fR );
.PP
\fIsuspend_hold\fR
.IX Subsection "suspend_hold"
.PP
my \f(CW$hold\fR = \f(CW$hold\fR\->suspend_hold( \f(CW$suspend_until\fR );
.PP
\fIresume\fR
.IX Subsection "resume"
.PP
my \f(CW$hold\fR = \f(CW$hold\fR\->\fBresume()\fR;
.PP
\fIdelete\fR
.IX Subsection "delete"
.PP
\&\f(CW$hold\fR\->\fBdelete()\fR;
.PP
\fIset_transfer\fR
.IX Subsection "set_transfer"
.PP
\fIset_waiting\fR
.IX Subsection "set_waiting"
.PP
\fIis_pickup_location_valid\fR
.IX Subsection "is_pickup_location_valid"
.PP
.Vb 3
\&    if ($hold\->is_pickup_location_valid({ library_id => $library\->id }) ) {
\&        ...
\&    }
.Ve
.PP
Returns a \fIboolean\fR representing if the passed pickup location is valid for the hold.
It throws a \fIKoha::Exceptions::_MissingParameter\fR if the library_id parameter is not
passed.
.PP
\fIset_pickup_location\fR
.IX Subsection "set_pickup_location"
.PP
.Vb 6
\&    $hold\->set_pickup_location(
\&        {
\&            library_id => $library\->id,
\&          [ force   => 0|1 ]
\&        }
\&    );
.Ve
.PP
Updates the hold pickup location. It throws a \fIKoha::Exceptions::Hold::InvalidPickupLocation\fR if
the passed pickup location is not valid.
.PP
Note: It is up to the caller to verify if \fIAllowHoldPolicyOverride\fR is set when setting the
\&\fBforce\fR parameter.
.PP
\fIset_processing\fR
.IX Subsection "set_processing"
.PP
\&\f(CW$hold\fR\->set_processing;
.PP
Mark the hold as in processing.
.PP
\fIis_found\fR
.IX Subsection "is_found"
.PP
Returns true if hold is waiting, in transit or in processing
.PP
\fIis_waiting\fR
.IX Subsection "is_waiting"
.PP
Returns true if hold is a waiting hold
.PP
\fIis_in_transit\fR
.IX Subsection "is_in_transit"
.PP
Returns true if hold is a in_transit hold
.PP
\fIis_in_processing\fR
.IX Subsection "is_in_processing"
.PP
Returns true if hold is a in_processing hold
.PP
\fIis_cancelable_from_opac\fR
.IX Subsection "is_cancelable_from_opac"
.PP
Returns true if hold is a cancelable hold
.PP
Holds may be only canceled if they are not found.
.PP
This is used from the \s-1OPAC.\s0
.PP
\fIcancellation_requestable_from_opac\fR
.IX Subsection "cancellation_requestable_from_opac"
.PP
.Vb 1
\&    if ( $hold\->cancellation_requestable_from_opac ) { ... }
.Ve
.PP
Returns a \fIboolean\fR representing if a cancellation request can be placed on the hold
from the \s-1OPAC.\s0 It targets holds that cannot be cancelled from the \s-1OPAC\s0 (see the
\&\fBis_cancelable_from_opac\fR method above), but for which circulation rules allow
requesting cancellation.
.PP
Throws a \fBKoha::Exceptions::InvalidStatus\fR exception with the following \fIinvalid_status\fR
values:
.IP "\fB'hold_not_waiting'\fR: the hold is expected to be waiting and it is not." 4
.IX Item "'hold_not_waiting': the hold is expected to be waiting and it is not."
.PD 0
.IP "\fB'no_item_linked'\fR: the waiting hold doesn't have an item properly linked." 4
.IX Item "'no_item_linked': the waiting hold doesn't have an item properly linked."
.PD
.PP
\fIis_at_destination\fR
.IX Subsection "is_at_destination"
.PP
Returns true if hold is waiting
and the hold's pickup branch matches
the hold item's holding branch
.PP
\fIbiblio\fR
.IX Subsection "biblio"
.PP
Returns the related Koha::Biblio object for this hold
.PP
\fIpatron\fR
.IX Subsection "patron"
.PP
Returns the related Koha::Patron object for this hold
.PP
\fIitem\fR
.IX Subsection "item"
.PP
Returns the related Koha::Item object for this Hold
.PP
\fIitem_group\fR
.IX Subsection "item_group"
.PP
Returns the related Koha::Biblio::ItemGroup object for this Hold
.PP
\fIbranch\fR
.IX Subsection "branch"
.PP
Returns the related Koha::Library object for this Hold
.PP
\fIdesk\fR
.IX Subsection "desk"
.PP
Returns the related Koha::Desk object for this Hold
.PP
\fIborrower\fR
.IX Subsection "borrower"
.PP
Returns the related Koha::Patron object for this Hold
.PP
\fIis_suspended\fR
.IX Subsection "is_suspended"
.PP
my \f(CW$bool\fR = \f(CW$hold\fR\->\fBis_suspended()\fR;
.PP
\fIadd_cancellation_request\fR
.IX Subsection "add_cancellation_request"
.PP
.Vb 1
\&    my $cancellation_request = $hold\->add_cancellation_request({ [ creation_date => $creation_date ] });
.Ve
.PP
Adds a cancellation request to the hold. Returns the generated
\&\fIKoha::Hold::CancellationRequest\fR object.
.PP
\fIcancellation_requests\fR
.IX Subsection "cancellation_requests"
.PP
.Vb 1
\&    my $cancellation_requests = $hold\->cancellation_requests;
.Ve
.PP
Returns related a \fIKoha::Hold::CancellationRequests\fR resultset.
.PP
\fIcancellation_requested\fR
.IX Subsection "cancellation_requested"
.PP
.Vb 1
\&    if ( $hold\->cancellation_requested ) { ... }
.Ve
.PP
Returns true if a cancellation request has been placed for the hold.
.PP
\fIcancel\fR
.IX Subsection "cancel"
.PP
my \f(CW$cancel_hold\fR = \f(CW$hold\fR\->cancel(
    {
        [ charge_cancel_fee   => 1||0, ]
        [ cancellation_reason => \f(CW$cancellation_reason\fR, ]
        [ skip_holds_queue    => 1||0 ]
    }
);
.PP
Cancel a hold:
\&\- The hold will be moved to the old_reserves table with a priority=0
\&\- The priority of other holds will be updated
\&\- The patron will be charge (see ExpireReservesMaxPickUpDelayCharge) if the charge_cancel_fee parameter is set
\&\- The canceled hold will have the cancellation reason added to old_reserves.cancellation_reason if one is passed in
\&\- a \s-1CANCEL HOLDS\s0 log will be done if the pref HoldsLog is on
.PP
\fIfill\fR
.IX Subsection "fill"
.PP
.Vb 1
\&    $hold\->fill({ [ item_id => $item\->id ] });
.Ve
.PP
This method marks the hold as filled. It effectively moves it to old_reserves.
The optional \fIitem_id\fR parameter is used to set the information about the
item that filled the hold.
.PP
\fIstore\fR
.IX Subsection "store"
.PP
Override base store method to set default
expirationdate for holds.
.PP
\fI_move_to_old\fR
.IX Subsection "_move_to_old"
.PP
my \f(CW$is_moved\fR = \f(CW$hold\fR\->_move_to_old;
.PP
Move a hold to the old_reserve table following the same pattern as Koha::Patron\->move_to_deleted
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Hold object
on the \s-1API.\s0
.PP
\fIcan_update_pickup_location_opac\fR
.IX Subsection "can_update_pickup_location_opac"
.PP
.Vb 1
\&    my $can_update_pickup_location_opac = $hold\->can_update_pickup_location_opac;
.Ve
.PP
Returns if a hold can change pickup location from opac
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
.SH "AUTHORS"
.IX Header "AUTHORS"
Kyle M Hall <kyle@bywatersolutions.com>
Jonathan Druart <jonathan.druart@bugs.koha\-community.org>
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
