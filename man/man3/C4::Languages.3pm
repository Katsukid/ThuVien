.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Languages 3pm"
.TH C4::Languages 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Languages \- Perl Module containing language list functions for Koha
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Languages;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "getFrameworkLanguages"
.IX Subsection "getFrameworkLanguages"
Returns a reference to an array of hashes:
.PP
.Vb 6
\& my $languages = getFrameworkLanguages();
\& for my $language(@$languages) {
\&    print "$language\->{language_code}\en"; # language code in iso 639\-2
\&    print "$language\->{language_name}\en"; # language name in native script
\&    print "$language\->{language_locale_name}\en"; # language name in current locale
\& }
.Ve
.SS "getTranslatedLanguages"
.IX Subsection "getTranslatedLanguages"
Returns a reference to an array of hashes:
.PP
.Vb 7
\& my $languages = getTranslatedLanguages();
\& print "Available translated languages:\en";
\& for my $language(@$trlanguages) {
\&    print "$language\->{language_code}\en"; # language code in iso 639\-2
\&    print "$language\->{language_name}\en"; # language name in native script
\&    print "$language\->{language_locale_name}\en"; # language name in current locale
\& }
.Ve
.SS "getAllLanguages"
.IX Subsection "getAllLanguages"
Returns a reference to an array of hashes:
.PP
.Vb 7
\& my $alllanguages = getAllLanguages();
\& print "Available translated languages:\en";
\& for my $language(@$alllanguages) {
\&    print "$language\->{language_code}\en";
\&    print "$language\->{language_name}\en";
\&    print "$language\->{language_locale_name}\en";
\& }
.Ve
.PP
This routine is a wrapper for \fBgetLanguages()\fR.
.SS "getLanguages"
.IX Subsection "getLanguages"
.Vb 1
\&    my $lang_arrayref = getLanguages([$lang[, $isFiltered]]);
.Ve
.PP
Returns a reference to an array of hashes of languages.
.PP
\&\- If no parameter is passed to the function, it returns english languages names
\&\- If a \f(CW$lang\fR parameter conforming to \s-1RFC4646\s0 syntax is passed, the function returns languages names translated in \f(CW$lang\fR
  If a language name is not translated in \f(CW$lang\fR in database, the function returns english language name
\&\- If \f(CW$isFiltered\fR is set to true, only the detail of the languages selected in system preferences AdvanceSearchLanguages is returned.
.SS "_get_themes"
.IX Subsection "_get_themes"
Internal function, returns an array of all available themes.
.PP
.Vb 2
\&  (@themes) = &_get_themes(\*(Aqopac\*(Aq);
\&  (@themes) = &_get_themes(\*(Aqintranet\*(Aq);
.Ve
.SS "_get_language_dirs"
.IX Subsection "_get_language_dirs"
Internal function, returns an array of directory names, excluding non-language directories
.SS "_build_languages_arrayref"
.IX Subsection "_build_languages_arrayref"
Internal function for building the ref to array of hashes
.PP
\&\s-1FIXME:\s0 this could be rewritten and simplified using map
.SS "regex_lang_subtags"
.IX Subsection "regex_lang_subtags"
This internal sub takes a string composed according to \s-1RFC 4646\s0 as
an input and returns a reference to a hash containing keys and values
for ( language, script, region, variant, extension, privateuse )
.SS "getlanguage"
.IX Subsection "getlanguage"
.Vb 2
\&    Select a language based on the URL parameter \*(Aqlanguage\*(Aq, a cookie,
\&    syspref available languages & browser
.Ve
.SS "get_rfc4646_from_iso639"
.IX Subsection "get_rfc4646_from_iso639"
.Vb 1
\&    Select a language rfc4646 code given an iso639 code
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Joshua Ferraro
