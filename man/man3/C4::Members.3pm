.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Members 3pm"
.TH C4::Members 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Members \- Perl Module containing convenience functions for member handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Members;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines for adding, modifying and deleting members/patrons/borrowers
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "patronflags"
.IX Subsection "patronflags"
.Vb 1
\& $flags = &patronflags($patron);
.Ve
.PP
This function is not exported.
.PP
The following will be set where applicable:
 \f(CW$flags\fR\->{\s-1CHARGES\s0}\->{amount}        Amount of debt
 \f(CW$flags\fR\->{\s-1CHARGES\s0}\->{noissues}      Set if debt amount >$5.00 (or syspref noissuescharge)
 \f(CW$flags\fR\->{\s-1CHARGES\s0}\->{message}       Message \*(-- deprecated
.PP
.Vb 2
\& $flags\->{CREDITS}\->{amount}        Amount of credit
\& $flags\->{CREDITS}\->{message}       Message \-\- deprecated
\&
\& $flags\->{  GNA  }                  Patron has no valid address
\& $flags\->{  GNA  }\->{noissues}      Set for each GNA
\& $flags\->{  GNA  }\->{message}       "Borrower has no valid address" \-\- deprecated
\&
\& $flags\->{ LOST  }                  Patron\*(Aqs card reported lost
\& $flags\->{ LOST  }\->{noissues}      Set for each LOST
\& $flags\->{ LOST  }\->{message}       Message \-\- deprecated
\&
\& $flags\->{DBARRED}                  Set if patron debarred, no access
\& $flags\->{DBARRED}\->{noissues}      Set for each DBARRED
\& $flags\->{DBARRED}\->{message}       Message \-\- deprecated
\&
\& $flags\->{ NOTES }
\& $flags\->{ NOTES }\->{message}       The note itself.  NOT deprecated
\&
\& $flags\->{ ODUES }                  Set if patron has overdue books.
\& $flags\->{ ODUES }\->{message}       "Yes"  \-\- deprecated
\& $flags\->{ ODUES }\->{itemlist}      ref\-to\-array: list of overdue books
\& $flags\->{ ODUES }\->{itemlisttext}  Text list of overdue items \-\- deprecated
\&
\& $flags\->{WAITING}                  Set if any of patron\*(Aqs reserves are available
\& $flags\->{WAITING}\->{message}       Message \-\- deprecated
\& $flags\->{WAITING}\->{itemlist}      ref\-to\-array: list of available items
.Ve
.ie n .IP """$flags\->{ODUES}\->{itemlist}"" is a reference-to-array listing the overdue items. Its elements are references-to-hash, each describing an overdue item. The keys are selected fields from the issues, biblio, biblioitems, and items tables of the Koha database." 4
.el .IP "\f(CW$flags\->{ODUES}\->{itemlist}\fR is a reference-to-array listing the overdue items. Its elements are references-to-hash, each describing an overdue item. The keys are selected fields from the issues, biblio, biblioitems, and items tables of the Koha database." 4
.IX Item "$flags->{ODUES}->{itemlist} is a reference-to-array listing the overdue items. Its elements are references-to-hash, each describing an overdue item. The keys are selected fields from the issues, biblio, biblioitems, and items tables of the Koha database."
.PD 0
.ie n .IP """$flags\->{ODUES}\->{itemlisttext}"" is a string giving a text listing of the overdue items, one per line.  Deprecated." 4
.el .IP "\f(CW$flags\->{ODUES}\->{itemlisttext}\fR is a string giving a text listing of the overdue items, one per line.  Deprecated." 4
.IX Item "$flags->{ODUES}->{itemlisttext} is a string giving a text listing of the overdue items, one per line. Deprecated."
.ie n .IP """$flags\->{WAITING}\->{itemlist}"" is a reference-to-array listing the available items. Each element is a reference-to-hash whose keys are fields from the reserves table of the Koha database." 4
.el .IP "\f(CW$flags\->{WAITING}\->{itemlist}\fR is a reference-to-array listing the available items. Each element is a reference-to-hash whose keys are fields from the reserves table of the Koha database." 4
.IX Item "$flags->{WAITING}->{itemlist} is a reference-to-array listing the available items. Each element is a reference-to-hash whose keys are fields from the reserves table of the Koha database."
.PD
.PP
All the \*(L"message\*(R" fields that include language generated in this function are deprecated,
because such strings belong properly in the display layer.
.PP
The \*(L"message\*(R" field that comes from the \s-1DB\s0 is \s-1OK.\s0
.SS "GetAllIssues"
.IX Subsection "GetAllIssues"
.Vb 1
\&  $issues = &GetAllIssues($borrowernumber, $sortkey, $limit);
.Ve
.PP
Looks up what the patron with the given borrowernumber has borrowed,
and sorts the results.
.PP
\&\f(CW$sortkey\fR is the name of a field on which to sort the results. This
should be the name of a field in the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR,
\&\f(CW\*(C`biblioitems\*(C'\fR, or \f(CW\*(C`items\*(C'\fR table in the Koha database.
.PP
\&\f(CW$limit\fR is the maximum number of results to return.
.PP
\&\f(CW&GetAllIssues\fR an arrayref, \f(CW$issues\fR, of hashrefs, the keys of which
are the fields from the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR, \f(CW\*(C`biblioitems\*(C'\fR, and
\&\f(CW\*(C`items\*(C'\fR tables of the Koha database.
.SS "get_cardnumber_length"
.IX Subsection "get_cardnumber_length"
.Vb 1
\&    my ($min, $max) = C4::Members::get_cardnumber_length()
.Ve
.PP
Returns the minimum and maximum length for patron cardnumbers as
determined by the CardnumberLength system preference, the
BorrowerMandatoryField system preference, and the width of the
database column.
.SS "GetBorrowersToExpunge"
.IX Subsection "GetBorrowersToExpunge"
.Vb 7
\&  $borrowers = &GetBorrowersToExpunge(
\&      not_borrowed_since => $not_borrowed_since,
\&      expired_before       => $expired_before,
\&      category_code        => \e@category_code,
\&      patron_list_id       => $patron_list_id,
\&      branchcode           => $branchcode
\&  );
\&
\&  This function get all borrowers based on the given criteria.
.Ve
.SS "IssueSlip"
.IX Subsection "IssueSlip"
.Vb 1
\&  IssueSlip($branchcode, $borrowernumber, $quickslip)
\&
\&  Returns letter hash ( see C4::Letters::GetPreparedLetter )
\&
\&  $quickslip is boolean, to indicate whether we want a quick slip
\&
\&  IssueSlip populates ISSUESLIP and ISSUEQSLIP, and will make the following expansions:
\&
\&  Both slips:
\&
\&      <<branches.*>>
\&      <<borrowers.*>>
\&
\&  ISSUESLIP:
\&
\&      <checkedout>
\&         <<biblio.*>>
\&         <<items.*>>
\&         <<biblioitems.*>>
\&         <<issues.*>>
\&      </checkedout>
\&
\&      <overdue>
\&         <<biblio.*>>
\&         <<items.*>>
\&         <<biblioitems.*>>
\&         <<issues.*>>
\&      </overdue>
\&
\&      <news>
\&         <<additional_contents.*>>
\&      </news>
\&
\&  ISSUEQSLIP:
\&
\&      <checkedout>
\&         <<biblio.*>>
\&         <<items.*>>
\&         <<biblioitems.*>>
\&         <<issues.*>>
\&      </checkedout>
\&
\&  NOTE: Fields from tables issues, items, biblio and biblioitems are available
.Ve
.SS "DeleteExpiredOpacRegistrations"
.IX Subsection "DeleteExpiredOpacRegistrations"
.Vb 2
\&    Delete accounts that haven\*(Aqt been upgraded from the \*(Aqtemporary\*(Aq category
\&    Returns the number of removed patrons
.Ve
.SS "DeleteUnverifiedOpacRegistrations"
.IX Subsection "DeleteUnverifiedOpacRegistrations"
.Vb 2
\&    Delete all unverified self registrations in borrower_modifications,
\&    older than the specified number of days.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Team
