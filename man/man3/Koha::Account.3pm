.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Account 3pm"
.TH Koha::Account 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Accounts \- Module for managing payments and fees for patrons
.SS "pay"
.IX Subsection "pay"
This method allows payments to be made against fees/fines
.PP
Koha::Account\->new( { patron_id => \f(CW$borrowernumber\fR } )\->pay(
    {
        amount      => \f(CW$amount\fR,
        note        => \f(CW$note\fR,
        description => \f(CW$description\fR,
        library_id  => \f(CW$branchcode\fR,
        lines       => \f(CW$lines\fR, # Arrayref of Koha::Account::Line objects to pay
        credit_type => \f(CW$type\fR,  # credit_type_code code
        item_id     => \f(CW$itemnumber\fR,     # pass the itemnumber if this is a credit pertianing to a specific item (i.e \s-1LOST_FOUND\s0)
    }
);
.PP
\fIadd_credit\fR
.IX Subsection "add_credit"
.PP
This method allows adding credits to a patron's account
.PP
my \f(CW$credit_line\fR = Koha::Account\->new({ patron_id => \f(CW$patron_id\fR })\->add_credit(
    {
        amount       => \f(CW$amount\fR,
        description  => \f(CW$description\fR,
        interface    => \f(CW$interface\fR,
        issue_id     => \f(CW$checkout\fR\->id,
        item_id      => \f(CW$item_id\fR,
        library_id   => \f(CW$library_id\fR,
        note         => \f(CW$note\fR,
        payment_type => \f(CW$payment_type\fR,
        type         => \f(CW$credit_type\fR,
        user_id      => \f(CW$user_id\fR,
    }
);
.PP
\&\f(CW$credit_type\fR can be any of:
  \- '\s-1CREDIT\s0'
  \- '\s-1PAYMENT\s0'
  \- '\s-1FORGIVEN\s0'
  \- '\s-1LOST_FOUND\s0'
  \- '\s-1OVERPAYMENT\s0'
  \- '\s-1PAYMENT\s0'
  \- '\s-1WRITEOFF\s0'
  \- '\s-1PROCESSING_FOUND\s0'
.PP
\fIpayin_amount\fR
.IX Subsection "payin_amount"
.PP
.Vb 10
\&    my $credit = $account\->payin_amount(
\&        {
\&            amount          => $amount,
\&            type            => $credit_type,
\&            payment_type    => $payment_type,
\&            cash_register   => $register_id,
\&            interface       => $interface,
\&            library_id      => $branchcode,
\&            user_id         => $staff_id,
\&            debits          => $debit_lines,
\&            description     => $description,
\&            note            => $note
\&        }
\&    );
.Ve
.PP
This method allows an amount to be paid into a patrons account and immediately applied against debts.
.PP
You can optionally pass a debts parameter which consists of an arrayref of Koha::Account::Line debit lines.
.PP
\&\f(CW$credit_type\fR can be any of:
  \- '\s-1PAYMENT\s0'
  \- '\s-1WRITEOFF\s0'
  \- '\s-1FORGIVEN\s0'
.PP
\fIadd_debit\fR
.IX Subsection "add_debit"
.PP
This method allows adding debits to a patron's account
.PP
.Vb 10
\&    my $debit_line = Koha::Account\->new({ patron_id => $patron_id })\->add_debit(
\&        {
\&            amount           => $amount,
\&            description      => $description,
\&            note             => $note,
\&            user_id          => $user_id,
\&            interface        => $interface,
\&            library_id       => $library_id,
\&            type             => $debit_type,
\&            transaction_type => $transaction_type,
\&            cash_register    => $register_id,
\&            item_id          => $item_id,
\&            issue_id         => $issue_id
\&        }
\&    );
.Ve
.PP
\&\f(CW$debit_type\fR can be any of:
  \- \s-1ACCOUNT\s0
  \- \s-1ACCOUNT_RENEW\s0
  \- \s-1RESERVE_EXPIRED\s0
  \- \s-1LOST\s0
  \- sundry
  \- \s-1NEW_CARD\s0
  \- \s-1OVERDUE\s0
  \- \s-1PROCESSING\s0
  \- \s-1RENT\s0
  \- \s-1RENT_DAILY\s0
  \- \s-1RENT_RENEW\s0
  \- \s-1RENT_DAILY_RENEW\s0
  \- \s-1RESERVE\s0
  \- \s-1PAYOUT\s0
.PP
\fIpayout_amount\fR
.IX Subsection "payout_amount"
.PP
.Vb 10
\&    my $debit = $account\->payout_amount(
\&        {
\&            payout_type => $payout_type,
\&            register_id => $register_id,
\&            staff_id    => $staff_id,
\&            interface   => \*(Aqintranet\*(Aq,
\&            amount      => $amount,
\&            credits     => $credit_lines
\&        }
\&    );
.Ve
.PP
This method allows an amount to be paid out from a patrons account against outstanding credits.
.PP
\&\f(CW$payout_type\fR can be any of the defined payment_types:
.PP
\fIbalance\fR
.IX Subsection "balance"
.PP
my \f(CW$balance\fR = \f(CW$self\fR\->balance
.PP
Return the balance (sum of amountoutstanding columns)
.PP
\fIoutstanding_debits\fR
.IX Subsection "outstanding_debits"
.PP
my \f(CW$lines\fR = Koha::Account\->new({ patron_id => \f(CW$patron_id\fR })\->outstanding_debits;
.PP
It returns the debit lines with outstanding amounts for the patron.
.PP
It returns a Koha::Account::Lines iterator.
.PP
\fIoutstanding_credits\fR
.IX Subsection "outstanding_credits"
.PP
my \f(CW$lines\fR = Koha::Account\->new({ patron_id => \f(CW$patron_id\fR })\->outstanding_credits;
.PP
It returns the credit lines with outstanding amounts for the patron.
.PP
It returns a Koha::Account::Lines iterator.
.PP
\fInon_issues_charges\fR
.IX Subsection "non_issues_charges"
.PP
my \f(CW$non_issues_charges\fR = \f(CW$self\fR\->non_issues_charges
.PP
Calculates amount immediately owing by the patron \- non-issue charges.
.PP
Charges can be set as exempt from non-issue by editing the debit type in the Debit Types area of System Preferences.
.PP
\fIlines\fR
.IX Subsection "lines"
.PP
my \f(CW$lines\fR = \f(CW$self\fR\->lines;
.PP
Return all credits and debits for the user, outstanding or otherwise
.PP
\fIcredits\fR
.IX Subsection "credits"
.PP
.Vb 1
\&  my $credits = $self\->credits;
.Ve
.PP
Return all credits for the user
.PP
\fIdebits\fR
.IX Subsection "debits"
.PP
.Vb 1
\&  my $debits = $self\->debits;
.Ve
.PP
Return all debits for the user
.PP
\fIreconcile_balance\fR
.IX Subsection "reconcile_balance"
.PP
\&\f(CW$account\fR\->\fBreconcile_balance()\fR;
.PP
Find outstanding credits and use them to pay outstanding debits.
Currently, this implicitly uses the 'First In First Out' rule for
applying credits against debits.
.SH "AUTHORS"
.IX Header "AUTHORS"
Kyle M Hall <kyle.m.hall@gmail.com>
Tom√°s Cohen Arazi <tomascohen@gmail.com>
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
