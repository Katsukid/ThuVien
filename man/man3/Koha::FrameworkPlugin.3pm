.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::FrameworkPlugin 3pm"
.TH Koha::FrameworkPlugin 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::FrameworkPlugin \- Facilitate use of plugins in MARC/items editor
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use Koha::FrameworkPlugin;
\&    my $plugin = Koha::FrameworkPlugin({ name => \*(AqEXAMPLE.pl\*(Aq });
\&    $plugin\->build( { id => $id });
\&    $template\->param(
\&        javascript => $plugin\->javascript,
\&        noclick => $plugin\->noclick,
\&    );
\&
\&    use Koha::FrameworkPlugin;
\&    my $plugin = Koha::FrameworkPlugin({ name => \*(AqEXAMPLE.pl\*(Aq });
\&    $plugin\->launch( { cgi => $query });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 9
\&    A framework plugin provides additional functionality to a MARC or item
\&    field. It can be attached to a field in the framework structure.
\&    The functionality is twofold:
\&    \- Additional actions on the field via javascript in the editor itself
\&      via events as onfocus, onblur, etc.
\&      Focus may e.g. fill an empty field, Blur or Change may validate.
\&    \- Provide an additional form to edit the field value, possibly a
\&      combination of various subvalues. Look at e.g. MARC leader.
\&      The additional form is a popup on top of the MARC/items editor.
\&
\&    The plugin code is a perl script (with template for the popup),
\&    essentially doing two things:
\&    1) Build: The plugin returns javascript to the caller (addbiblio.pl a.o.)
\&    2) Launch: The plugin launches the additional form (popup). Launching is
\&       centralized via the plugin_launcher.pl script.
\&
\&    This object support two code styles:
\&    \- In the new style, the plugin returns a hashref with a builder and a
\&      launcher key pointing to two anynomous subroutines.
\&    \- In the old style, the builder is subroutine plugin_javascript and the
\&      launcher is subroutine plugin. For each plugin the routines are
\&      redefined.
\&
\&    In cataloguing/value_builder/EXAMPLE.pl, you can find a detailed example
\&    of a new style plugin. As long as we support the old style plugins, the
\&    unit test t/db_dependent/FrameworkPlugin.t still contains an example
\&    of the old style too.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    Create object (via Class::Accessor).
.Ve
.SS "build"
.IX Subsection "build"
.Vb 2
\&    Build uses the builder subroutine of the plugin to build javascript
\&    for the plugin.
.Ve
.SS "launch"
.IX Subsection "launch"
.Vb 1
\&    Run the popup of the plugin, as defined by the launcher subroutine.
.Ve
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "name"
.IX Subsection "name"
.Vb 1
\&    Filename of the plugin.
.Ve
.SS "path"
.IX Subsection "path"
.Vb 2
\&    Optional pathname of the plugin.
\&    By default plugins are found in cataloguing/value_builder.
.Ve
.SS "errstr"
.IX Subsection "errstr"
.Vb 2
\&    Error message.
\&    If set, the plugin will no longer build or launch.
.Ve
.SS "javascript"
.IX Subsection "javascript"
.Vb 1
\&    Generated javascript for the caller of the plugin (after building).
.Ve
.SS "noclick"
.IX Subsection "noclick"
.Vb 3
\&    Tells you (after building) that this plugin has no action connected to
\&    to clicking on the buttonDot anchor. (Note that some item plugins
\&    redirect click to focus instead of launching a popup.)
.Ve
.SH "ADDITIONAL COMMENTS"
.IX Header "ADDITIONAL COMMENTS"
.SS "new"
.IX Subsection "new"
.Vb 6
\&    Returns new object based on Class::Accessor, loads additional params.
\&    The params hash currently supports keys: name, path, item_style.
\&    Name is mandatory. Path is used in unit testing.
\&    Item_style is used to identify old\-style item plugins that still use
\&    an additional (irrelevant) first parameter in the javascript event
\&    functions.
.Ve
.SS "build"
.IX Subsection "build"
.Vb 1
\&    Generate html and javascript by calling the builder sub of the plugin.
\&
\&    Params is a hashref supporting keys: id (=html id for the input field),
\&    record (MARC record or undef), dbh (database handle), tagslib.
\&    Note that some of these parameters are not used in most (if not all)
\&    plugins and may be obsoleted in the future (kept for now to provide
\&    backward compatibility).
\&    The most important one is id; it is used to construct unique javascript
\&    function names.
\&
\&    Returns success or failure.
.Ve
.SS "launch"
.IX Subsection "launch"
.Vb 4
\&    Launches the popup for this plugin by calling its launcher sub
\&    Old style plugins still expect to receive a CGI oject, new style
\&    plugins expect a params hashref.
\&    Returns undef on failure, otherwise launcher return value (if any).
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Marcel de Rooy, Rijksmuseum Amsterdam, The Netherlands
.Ve
