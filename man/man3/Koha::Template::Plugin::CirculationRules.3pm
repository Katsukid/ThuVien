.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Template::Plugin::CirculationRules 3pm"
.TH Koha::Template::Plugin::CirculationRules 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Template::Plugin::CirculationRules \- A template plugin for dealing with things related to circulation
.SS "Methods"
.IX Subsection "Methods"
\fIGet\fR
.IX Subsection "Get"
.PP
[% \s-1SET\s0 rule = CirculationRules.Get( branchcode, categorycode, itemtype, rule_name ) %]
.PP
Returns the effective rule value for the given tuple.
.PP
\fISearch\fR
.IX Subsection "Search"
.PP
[% \s-1SET\s0 rule = CirculationRules.Search( branchcode, categorycode, itemtype, rule_name, { want_rule = 1 } ) %]
.PP
Returns the first rule that matches the given critea.
It does not perform precedence sorting as CirculationRules.Get would.
.PP
By default, it returns only the rule value. Set want_rule to true to return
the rule object.
.PP
\fIRenewals\fR
.IX Subsection "Renewals"
.PP
[% \s-1SET\s0 renewals = CirculationRules.Renewals( borrowernumber, itemnumber ) %]
[% renewals.remaining | html %]
.PP
Returns a hash of data about renewals for a checkout, by the given borrowernumber and itemnumber.
.PP
Hash keys include:
count \- The number of renewals already used
allowed \- The total number of renewals this checkout may have
remaining \- The total number of renewals that can still be made
unseen_count \- The number of unseen renewals already used
unseen_allowed \- The total number of unseen renewals this checkout may have
unseen_remaining \- The total number of unseen renewals that can still be made
