.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Biblio 3pm"
.TH Koha::Biblio 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Biblio \- Koha Biblio Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIstore\fR
.IX Subsection "store"
.PP
Overloaded \fIstore\fR method to set default values
.PP
\fImetadata\fR
.IX Subsection "metadata"
.PP
my \f(CW$metadata\fR = \f(CW$biblio\fR\->\fBmetadata()\fR;
.PP
Returns a Koha::Biblio::Metadata object
.PP
\fIrecord\fR
.IX Subsection "record"
.PP
my \f(CW$record\fR = \f(CW$biblio\fR\->\fBrecord()\fR;
.PP
Returns a Marc::Record object
.PP
\fIrecord_schema\fR
.IX Subsection "record_schema"
.PP
my \f(CW$schema\fR = \f(CW$biblio\fR\->\fBrecord_schema()\fR;
.PP
Returns the record schema (\s-1MARC21, USMARC\s0 or \s-1UNIMARC\s0).
.PP
\fIorders\fR
.IX Subsection "orders"
.PP
my \f(CW$orders\fR = \f(CW$biblio\fR\->\fBorders()\fR;
.PP
Returns a Koha::Acquisition::Orders object
.PP
\fIactive_orders\fR
.IX Subsection "active_orders"
.PP
my \f(CW$active_orders\fR = \f(CW$biblio\fR\->\fBactive_orders()\fR;
.PP
Returns the active acquisition orders related to this biblio.
An order is considered active when it is not cancelled (i.e. when datecancellation
is not undef).
.PP
\fItickets\fR
.IX Subsection "tickets"
.PP
.Vb 1
\&  my $tickets = $biblio\->tickets();
.Ve
.PP
Returns all tickets linked to the biblio
.PP
\fIill_requests\fR
.IX Subsection "ill_requests"
.PP
.Vb 1
\&    my $ill_requests = $biblio\->ill_requests();
.Ve
.PP
Returns a Koha::Illrequests object
.PP
\fIitem_groups\fR
.IX Subsection "item_groups"
.PP
my \f(CW$item_groups\fR = \f(CW$biblio\fR\->\fBitem_groups()\fR;
.PP
Returns a Koha::Biblio::ItemGroups object
.PP
\fIcan_article_request\fR
.IX Subsection "can_article_request"
.PP
my \f(CW$bool\fR = \f(CW$biblio\fR\->can_article_request( \f(CW$borrower\fR );
.PP
Returns true if article requests can be made for this record
.PP
\&\f(CW$borrower\fR must be a Koha::Patron object
.PP
\fIcan_be_transferred\fR
.IX Subsection "can_be_transferred"
.PP
\&\f(CW$biblio\fR\->can_be_transferred({ to => \f(CW$to_library\fR, from => \f(CW$from_library\fR })
.PP
Checks if at least one item of a biblio can be transferred to given library.
.PP
This feature is controlled by two system preferences:
UseBranchTransferLimits to enable / disable the feature
BranchTransferLimitsType to use either an itemnumber or ccode as an identifier
                         for setting the limitations
.PP
Performance-wise, it is recommended to use this method for a biblio instead of
iterating each item of a biblio with Koha::Item\->\fBcan_be_transferred()\fR.
.PP
Takes HASHref that can have the following parameters:
    \s-1MANDATORY PARAMETERS:\s0
    \f(CW$to\fR   : Koha::Library
    \s-1OPTIONAL PARAMETERS:\s0
    \f(CW$from\fR : Koha::Library # if given, only items from that
                          # holdingbranch are considered
.PP
Returns 1 if at least one of the item of a biblio can be transferred
to \f(CW$to_library\fR, otherwise 0.
.PP
\fIpickup_locations\fR
.IX Subsection "pickup_locations"
.PP
.Vb 1
\&    my $pickup_locations = $biblio\->pickup_locations({ patron => $patron });
.Ve
.PP
Returns a Koha::Libraries set of possible pickup locations for this biblio's items,
according to patron's home library and if item can be transferred to each pickup location.
.PP
Throws a \fIKoha::Exceptions::MissingParameter\fR exception if the \fBmandatory\fR parameter \fIpatron\fR
is not passed.
.PP
\fIhidden_in_opac\fR
.IX Subsection "hidden_in_opac"
.PP
.Vb 1
\&    my $bool = $biblio\->hidden_in_opac({ [ rules => $rules ] })
.Ve
.PP
Returns true if the biblio matches the hidding criteria defined in \f(CW$rules\fR.
Returns false otherwise. It involves the \fIOpacHiddenItems\fR and
\&\fIOpacHiddenItemsHidesRecord\fR system preferences.
.PP
Takes HASHref that can have the following parameters:
    \s-1OPTIONAL PARAMETERS:\s0
    \f(CW$rules\fR : { <field> => [ value_1, ... ], ... }
.PP
Note: \f(CW$rules\fR inherits its structure from the parsed \s-1YAML\s0 from reading
the \fIOpacHiddenItems\fR system preference.
.PP
\fIarticle_request_type\fR
.IX Subsection "article_request_type"
.PP
my \f(CW$type\fR = \f(CW$biblio\fR\->article_request_type( \f(CW$borrower\fR );
.PP
Returns the article request type based on items, or on the record
itself if there are no items.
.PP
\&\f(CW$borrower\fR must be a Koha::Patron object
.PP
\fIarticle_request_type_for_bib\fR
.IX Subsection "article_request_type_for_bib"
.PP
my \f(CW$type\fR = \f(CW$biblio\fR\->article_request_type_for_bib
.PP
Returns the article request type 'yes', 'no', 'item_only', 'bib_only', for the given record
.PP
\fIarticle_request_type_for_items\fR
.IX Subsection "article_request_type_for_items"
.PP
my \f(CW$type\fR = \f(CW$biblio\fR\->article_request_type_for_items
.PP
Returns the article request type 'yes', 'no', 'item_only', 'bib_only', for the given record's items
.PP
If there is a conflict where some items are 'bib_only' and some are 'item_only', 'bib_only' will be returned.
.PP
\fIarticle_requests\fR
.IX Subsection "article_requests"
.PP
.Vb 1
\&    my $article_requests = $biblio\->article_requests
.Ve
.PP
Returns the article requests associated with this biblio
.PP
\fIcurrent_checkouts\fR
.IX Subsection "current_checkouts"
.PP
.Vb 1
\&    my $current_checkouts = $biblio\->current_checkouts
.Ve
.PP
Returns the current checkouts associated with this biblio
.PP
\fIold_checkouts\fR
.IX Subsection "old_checkouts"
.PP
.Vb 1
\&    my $old_checkouts = $biblio\->old_checkouts
.Ve
.PP
Returns the past checkouts associated with this biblio
.PP
\fIitems\fR
.IX Subsection "items"
.PP
my \f(CW$items\fR = \f(CW$biblio\fR\->items({ [ host_items => 1 ] });
.PP
The optional param host_items allows you to include 'analytical' items.
.PP
Returns the related Koha::Items object for this biblio
.PP
\fIhost_items\fR
.IX Subsection "host_items"
.PP
my \f(CW$host_items\fR = \f(CW$biblio\fR\->\fBhost_items()\fR;
.PP
Return the host items (easy analytical record)
.PP
\fI_host_itemnumbers\fR
.IX Subsection "_host_itemnumbers"
.PP
my \f(CW$host_itemnumber\fR = \f(CW$biblio\fR\->\fB_host_itemnumbers()\fR;
.PP
Return the itemnumbers for analytical items on this record
.PP
\fIitemtype\fR
.IX Subsection "itemtype"
.PP
my \f(CW$itemtype\fR = \f(CW$biblio\fR\->\fBitemtype()\fR;
.PP
Returns the itemtype for this record.
.PP
\fIholds\fR
.IX Subsection "holds"
.PP
my \f(CW$holds\fR = \f(CW$biblio\fR\->\fBholds()\fR;
.PP
return the current holds placed on this record
.PP
\fIcurrent_holds\fR
.IX Subsection "current_holds"
.PP
my \f(CW$holds\fR = \f(CW$biblio\fR\->current_holds
.PP
Return the holds placed on this bibliographic record.
It does not include future holds.
.PP
\fIbiblioitem\fR
.IX Subsection "biblioitem"
.PP
my \f(CW$field\fR = \f(CW$self\fR\->biblioitem
.PP
Returns the related Koha::Biblioitem object for this Biblio object
.PP
\fIsuggestions\fR
.IX Subsection "suggestions"
.PP
my \f(CW$suggestions\fR = \f(CW$self\fR\->suggestions
.PP
Returns the related Koha::Suggestions object for this Biblio object
.PP
\fIget_marc_components\fR
.IX Subsection "get_marc_components"
.PP
.Vb 1
\&  my $components = $self\->get_marc_components();
.Ve
.PP
Returns an array of search results data, which are component parts of
this object (\s-1MARC21 773\s0 points to this)
.SS "get_components_query"
.IX Subsection "get_components_query"
Returns a query which can be used to search for all component parts of \s-1MARC21\s0 biblios
.PP
\fIsubscriptions\fR
.IX Subsection "subscriptions"
.PP
my \f(CW$subscriptions\fR = \f(CW$self\fR\->subscriptions
.PP
Returns the related Koha::Subscriptions object for this Biblio object
.PP
\fIhas_items_waiting_or_intransit\fR
.IX Subsection "has_items_waiting_or_intransit"
.PP
my \f(CW$itemsWaitingOrInTransit\fR = \f(CW$biblio\fR\->has_items_waiting_or_intransit
.PP
Tells if this bibliographic record has items waiting or in transit.
.SS "get_coins"
.IX Subsection "get_coins"
my \f(CW$coins\fR = \f(CW$biblio\fR\->get_coins;
.PP
Returns the COinS (a span) which can be included in a biblio record
.SS "get_openurl"
.IX Subsection "get_openurl"
my \f(CW$url\fR = \f(CW$biblio\fR\->get_openurl;
.PP
Returns url for OpenURL resolver set in OpenURLResolverURL system preference
.PP
\fIis_serial\fR
.IX Subsection "is_serial"
.PP
my \f(CW$serial\fR = \f(CW$biblio\fR\->is_serial
.PP
Return boolean true if this bibbliographic record is continuing resource
.PP
\fIcustom_cover_image_url\fR
.IX Subsection "custom_cover_image_url"
.PP
my \f(CW$image_url\fR = \f(CW$biblio\fR\->custom_cover_image_url
.PP
Return the specific url of the cover image for this bibliographic record.
It is built regaring the value of the system preference CustomCoverImagesURL
.PP
\fIcover_images\fR
.IX Subsection "cover_images"
.PP
Return the cover images associated with this biblio.
.PP
\fIget_marc_notes\fR
.IX Subsection "get_marc_notes"
.PP
.Vb 1
\&    $marcnotesarray = $biblio\->get_marc_notes({ opac => 1 });
.Ve
.PP
Get all notes from the \s-1MARC\s0 record and returns them in an array.
The notes are stored in different fields depending on \s-1MARC\s0 flavour.
\&\s-1MARC21 5XX\s0 \f(CW$u\fR subfields receive special attention as they are URIs.
.PP
\fI_get_marc_authors\fR
.IX Subsection "_get_marc_authors"
.PP
Private method to return the list of authors contained in the \s-1MARC\s0 record.
See get get_marc_contributors and get_marc_authors for the public methods.
.PP
\fIget_marc_contributors\fR
.IX Subsection "get_marc_contributors"
.PP
.Vb 1
\&    my $contributors = $biblio\->get_marc_contributors;
.Ve
.PP
Get all contributors (but first author) from the \s-1MARC\s0 record and returns them in an array.
They are stored in different fields depending on \s-1MARC\s0 flavour (700..720 for \s-1MARC21\s0)
.PP
\fIget_marc_authors\fR
.IX Subsection "get_marc_authors"
.PP
.Vb 1
\&    my $authors = $biblio\->get_marc_authors;
.Ve
.PP
Get all authors from the \s-1MARC\s0 record and returns them in an array.
They are stored in different fields depending on \s-1MARC\s0 flavour
(main author from 100 then secondary authors from 700..720).
.PP
\fIto_api\fR
.IX Subsection "to_api"
.PP
.Vb 1
\&    my $json = $biblio\->to_api;
.Ve
.PP
Overloaded method that returns a \s-1JSON\s0 representation of the Koha::Biblio object,
suitable for \s-1API\s0 output. The related Koha::Biblioitem object is merged as expected
on the \s-1API.\s0
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Biblio object
on the \s-1API.\s0
.PP
\fIget_marc_host\fR
.IX Subsection "get_marc_host"
.PP
.Vb 3
\&    $host = $biblio\->get_marc_host;
\&    # OR:
\&    ( $host, $relatedparts, $hostinfo ) = $biblio\->get_marc_host;
\&
\&    Returns host biblio record from MARC21 773 (undef if no 773 present).
\&    It looks at the first 773 field with MARCorgCode or only a control
\&    number. Complete $w or numeric part is used to search host record.
\&    The optional parameter no_items triggers a check if $biblio has items.
\&    If there are, the sub returns undef.
\&    Called in list context, it also returns 773$g (related parts).
\&
\&    If there is no $w, we use $0 (host biblionumber) or $9 (host itemnumber)
\&    to search for the host record. If there is also no $0 and no $9, we search
\&    using author and title. Failing all of that, we return an undef host and
\&    form a concatenation of strings with 773$agt for host information,
\&    returned when called in list context.
.Ve
.PP
\fIget_marc_host_only\fR
.IX Subsection "get_marc_host_only"
.PP
.Vb 1
\&    my $host = $biblio\->get_marc_host_only;
.Ve
.PP
Return host only
.PP
\fIget_marc_relatedparts_only\fR
.IX Subsection "get_marc_relatedparts_only"
.PP
.Vb 1
\&    my $relatedparts = $biblio\->get_marc_relatedparts_only;
.Ve
.PP
Return related parts only
.PP
\fIget_marc_hostinfo_only\fR
.IX Subsection "get_marc_hostinfo_only"
.PP
.Vb 1
\&    my $hostinfo = $biblio\->get_marc_hostinfo_only;
.Ve
.PP
Return host info only
.PP
\fIrecalls\fR
.IX Subsection "recalls"
.PP
.Vb 1
\&    my $recalls = $biblio\->recalls;
.Ve
.PP
Return recalls linked to this biblio
.PP
\fIcan_be_recalled\fR
.IX Subsection "can_be_recalled"
.PP
.Vb 1
\&    my @items_for_recall = $biblio\->can_be_recalled({ patron => $patron_object });
.Ve
.PP
Does biblio-level checks and returns the items attached to this biblio that are available for recall
.SS "Internal methods"
.IX Subsection "Internal methods"
\fItype\fR
.IX Subsection "type"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
