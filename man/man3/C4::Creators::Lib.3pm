.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Creators::Lib 3pm"
.TH C4::Creators::Lib 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Creators::Lib
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "\fBC4::Creators::Lib::get_all_templates()\fP"
.IX Subsection "C4::Creators::Lib::get_all_templates()"
.Vb 1
\&  my $templates = get_all_templates();
.Ve
.PP
This function returns a reference to a hash containing all templates upon success and 1 upon failure. Errors are logged to the Apache log.
.SS "\fBC4::Creators::Lib::get_all_layouts()\fP"
.IX Subsection "C4::Creators::Lib::get_all_layouts()"
.Vb 1
\&  my $layouts = get_all_layouts();
.Ve
.PP
This function returns a reference to a hash containing all layouts upon success and 1 upon failure. Errors are logged to the Apache log.
.SS "\fBC4::Creators::Lib::get_all_profiles()\fP"
.IX Subsection "C4::Creators::Lib::get_all_profiles()"
.Vb 1
\&  my $profiles = get_all_profiles();
\&
\&  my $profiles = get_all_profiles({ fields => [@fields], filters => { filters => [$value1, $value2] } });
.Ve
.PP
This function returns an arrayref whose elements are hashes containing all profiles upon success and 1 upon failure. Errors are logged
to the Apache log. Two parameters are accepted. The first limits the field(s) returned. This parameter should be string of comma separted
fields. ie. \*(L"field_1, field_2, ...field_n\*(R" The second limits the records returned based on a string containing a valud \s-1SQL\s0 '\s-1WHERE\s0' filter.
.PP
\&\s-1NOTE:\s0 Do not pass in the keyword '\s-1WHERE.\s0'
.SS "\fBC4::Creators::Lib::get_all_image_names()\fP"
.IX Subsection "C4::Creators::Lib::get_all_image_names()"
.SS "\fBC4::Creators::Lib::get_batch_summary()\fP"
.IX Subsection "C4::Creators::Lib::get_batch_summary()"
.Vb 1
\&  my $batches = get_batch_summary();
\&
\&  my $batches = get_batch_summary(filter => filter_string);
.Ve
.PP
This function returns an arrayref whose elements are hashes containing the batch_ids of current batches along with the item count
for each batch upon success and 1 upon failure. Item counts are stored under the key '_item_count' Errors are logged to the Apache log.
One parameter is accepted which limits the records returned based on a string containing a valud \s-1SQL\s0 '\s-1WHERE\s0' filter.
.PP
\&\s-1NOTE:\s0 Do not pass in the keyword '\s-1WHERE.\s0'
.SS "\fBC4::Creators::Lib::get_label_summary()\fP"
.IX Subsection "C4::Creators::Lib::get_label_summary()"
.Vb 1
\&  my $labels = get_label_summary();
\&
\&  my $labels = get_label_summary(items => @item_list);
.Ve
.PP
This function returns an arrayref whose elements are hashes containing the label_ids of current labels along with the item count
for each label upon success and 1 upon failure. Item counts are stored under the key '_item_count' Errors are logged to the Apache log.
One parameter is accepted which limits the records returned based on a string containing a valud \s-1SQL\s0 '\s-1WHERE\s0' filter.
.PP
\&\s-1NOTE:\s0 Do not pass in the keyword '\s-1WHERE.\s0'
.SS "\fBC4::Creators::Lib::get_card_summary()\fP"
.IX Subsection "C4::Creators::Lib::get_card_summary()"
.Vb 1
\&  my $cards = get_card_summary();
\&
\&  my $cards = get_card_summary(items => @item_list);
.Ve
.PP
This function returns an arrayref whose elements are hashes containing the label_ids of current cards along with the item count
for each card upon success and 1 upon failure. Item counts are stored under the key '_item_count' Errors are logged to the Apache log.
One parameter is accepted which limits the records returned based on a string containing a valud \s-1SQL\s0 '\s-1WHERE\s0' filter.
.PP
\&\s-1NOTE:\s0 Do not pass in the keyword '\s-1WHERE.\s0'
.SS "\fBC4::Creators::Lib::get_barcode_types()\fP"
.IX Subsection "C4::Creators::Lib::get_barcode_types()"
.Vb 1
\&  my $barcode_types = get_barcode_types();
.Ve
.PP
This function returns a reference to an array of hashes containing all barcode types along with their name and description.
.SS "\fBC4::Creators::Lib::get_label_types()\fP"
.IX Subsection "C4::Creators::Lib::get_label_types()"
.Vb 1
\&  my $label_types = get_label_types();
.Ve
.PP
This function returns a reference to an array of hashes containing all label types along with their name and description.
.SS "\fBC4::Creators::Lib::get_font_types()\fP"
.IX Subsection "C4::Creators::Lib::get_font_types()"
.Vb 1
\&  my $font_types = get_font_types();
.Ve
.PP
This function returns a reference to an array of hashes containing all font types along with their name and description.
.SS "\fBC4::Creators::Lib::get_text_justification_types()\fP"
.IX Subsection "C4::Creators::Lib::get_text_justification_types()"
.Vb 1
\&  my $text_justification_types = get_text_justification_types();
.Ve
.PP
This function returns a reference to an array of hashes containing all text justification types along with their name and description.
.SS "\fBC4::Creators::Lib::get_unit_values()\fP"
.IX Subsection "C4::Creators::Lib::get_unit_values()"
.Vb 1
\&  my $unit_values = get_unit_values();
.Ve
.PP
This function returns a reference to an array of  hashes containing all unit types along with their description and multiplier.
\&\s-1NOTE:\s0 All units are relative to a PostScript Point.
There are 72 \s-1PS\s0 points to the inch.
.SS "\fBC4::Creators::Lib::get_output_formats()\fP"
.IX Subsection "C4::Creators::Lib::get_output_formats()"
.Vb 1
\&  my $label_output_formats = get_output_formats();
.Ve
.PP
This function returns a reference to an array of hashes containing all label output formats along with their description.
.SS "C4::Creators::Lib::get_table_names($search_term)"
.IX Subsection "C4::Creators::Lib::get_table_names($search_term)"
Return an arrayref of an array containing the table names which contain the supplied search term.
.SS "\fBC4::Creators::Lib::html_table()\fP"
.IX Subsection "C4::Creators::Lib::html_table()"
This function returns an arrayref of an array of hashes contianing the supplied data formatted suitably to
be passed off as a template parameter and used to build an html table.
.PP
.Vb 4
\&   my $table = html_table(header_fields, array_of_row_data);
\&   $template\->param(
\&       table_loop => $table,
\&   );
\&
\&    html example:
\&
\&        <table>
\&            [% FOREACH table_loo IN table_loop %]
\&                [% IF ( table_loo.header_fields ) %]
\&                    <tr>
\&                        [% FOREACH header_field IN table_loo.header_fields %]
\&                            <th>[% header_field.field_label %]</th>
\&                        [% END %]
\&                    </tr>
\&                [% ELSE %]
\&                    <tr>
\&                        [% FOREACH text_field IN table_loo.text_fields %]
\&                            [% IF ( text_field.select_field ) %]
\&                                <td><input type="checkbox" name="action" value="[% text_field.field_value %]"></td>
\&                            [% ELSE %]
\&                                <td>[% text_field.field_value %]</td>
\&                            [% END %]
\&                        [% END %]
\&                    </tr>
\&                [% END %]
\&            [% END %]
\&        </table>
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Nighswonger <cnighswonger \s-1AT\s0 foundations \s-1DOT\s0 edu>
