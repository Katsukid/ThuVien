.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Item::Transfer 3pm"
.TH Koha::Item::Transfer 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Item::Transfer \- Koha Item Transfer Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIitem\fR
.IX Subsection "item"
.PP
.Vb 1
\&  my $item = $transfer\->item;
.Ve
.PP
Returns the associated item for this transfer.
.PP
\fIfrom_library\fR
.IX Subsection "from_library"
.PP
.Vb 1
\&  my $from_library = $transfer\->from_library;
.Ve
.PP
Returns the associated from_library for this transfer.
.PP
\fIto_library\fR
.IX Subsection "to_library"
.PP
.Vb 1
\&  my $to_library = $transfer\->to_library;
.Ve
.PP
Returns the associated to_library for this transfer.
.PP
\fItransit\fR
.IX Subsection "transit"
.PP
.Vb 1
\&    $transfer\->transit({ [ skip_record_index => 0|1 ] });
.Ve
.PP
Set the transfer as in transit by updating the \fIdatesent\fR time.
.PP
Also, update date last seen and ensure item holdingbranch is correctly set.
.PP
An optional \fIskip_record_index\fR parameter can be passed to avoid triggering
reindex.
.PP
\fIin_transit\fR
.IX Subsection "in_transit"
.PP
Boolean returning whether the transfer is in transit or waiting
.PP
\fIreceive\fR
.IX Subsection "receive"
.PP
Receive the transfer by setting the datearrived time.
.PP
\fIcancel\fR
.IX Subsection "cancel"
.PP
.Vb 1
\&  $transfer\->cancel({ reason => $reason, [force => 1]});
.Ve
.PP
Cancel the transfer by setting the datecancelled time and recording the reason.
.PP
\fItype\fR
.IX Subsection "type"
