.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Plugins::Base 3pm"
.TH Koha::Plugins::Base 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Plugins::Base \- Base Module for plugins
.SS "store_data"
.IX Subsection "store_data"
store_data allows a plugin to store key value pairs in the database for future use.
.PP
usage: \f(CW$self\fR\->store_data({ param1 => 'param1val', param2 => 'param2value' })
.SS "retrieve_data"
.IX Subsection "retrieve_data"
retrieve_data allows a plugin to read the values that were previously saved with store_data
.PP
usage: my \f(CW$value\fR = \f(CW$self\fR\->retrieve_data( \f(CW$key\fR );
.SS "get_template"
.IX Subsection "get_template"
get_template returns a Template object. Eventually this will probably be calling
C4:Template, but at the moment, it does not.
.PP
The returned template contains 3 variables that can be used in the plugin
templates:
.IP "\fB\s-1CLASS\s0\fR" 8
.IX Item "CLASS"
The name of the plugin class.
.IP "\fB\s-1METHOD\s0\fR" 8
.IX Item "METHOD"
Then name of the plugin method used. For example 'tool' or 'report'.
.IP "\fB\s-1PLUGIN_PATH\s0\fR" 8
.IX Item "PLUGIN_PATH"
The \s-1URL\s0 path to the plugin. It can be used in templates in order to localize
ressources like images in html tags, or other templates.
.IP "\fB\s-1PLUGIN_DIR\s0\fR" 8
.IX Item "PLUGIN_DIR"
The absolute pathname to the plugin directory. Necessary to include other
templates from a template with the [% \s-1INCLUDE\s0 %] directive.
.SS "get_qualified_table_name"
.IX Subsection "get_qualified_table_name"
To avoid naming conflict, each plugins tables should use a fully qualified namespace.
To avoid hardcoding and make plugins more flexible, this method will return the proper
fully qualified table name.
.PP
usage: my \f(CW$table\fR = \f(CW$self\fR\->get_qualified_table_name( 'myTable' );
.SS "get_plugin_http_path"
.IX Subsection "get_plugin_http_path"
To access a plugin's own resources ( images, js files, css files, etc... )
a plugin will need to know what path to use in the template files. This
method returns that path.
.PP
usage: my \f(CW$path\fR = \f(CW$self\fR\->\fBget_plugin_http_path()\fR;
.SS "go_home"
.IX Subsection "go_home"
.Vb 1
\&   go_home is a quick redirect to the Koha plugins home page
.Ve
.SS "output_html"
.IX Subsection "output_html"
.Vb 1
\&    $self\->output_html( $data, $status, $extra_options );
.Ve
.PP
Outputs \f(CW$data\fR setting the right headers for \s-1HTML\s0 content.
.PP
Note: this is a wrapper function for C4::Output::output_with_http_headers
.SS "bundle_path"
.IX Subsection "bundle_path"
.Vb 1
\&    my $bundle_path = $self\->bundle_path
.Ve
.PP
Returns the directory in which bundled files are.
.SS "output"
.IX Subsection "output"
.Vb 1
\&   $self\->output( $data, $content_type[, $status[, $extra_options]]);
.Ve
.PP
Outputs \f(CW$data\fR with the appropriate \s-1HTTP\s0 headers,
the authentication cookie and a Content-Type specified in
\&\f(CW$content_type\fR.
.PP
\&\f(CW$content_type\fR is one of the following: 'html', 'js', 'json', 'xml', 'rss', or 'atom'.
.PP
\&\f(CW$status\fR is an \s-1HTTP\s0 status message, like '403 Authentication Required'. It defaults to '200 \s-1OK\s0'.
.PP
\&\f(CW$extra_options\fR is hashref.  If the key 'force_no_caching' is present and has
a true value, the \s-1HTTP\s0 headers include directives to force there to be no
caching whatsoever.
.PP
Note: this is a wrapper function for C4::Output::output_with_http_headers
.SS "_version_compare"
.IX Subsection "_version_compare"
Utility method to compare two version numbers.
Returns 1 if the first argument is the higher version
Returns \-1 if the first argument is the lower version
Returns 0 if both versions are equal
.PP
if ( _version_compare( '2.6.26', '2.6.0' ) == 1 ) {
    print \*(L"2.6.26 is greater than 2.6.0\en\*(R";
}
.SS "is_enabled"
.IX Subsection "is_enabled"
Method that returns wether the plugin is enabled or not
.PP
\&\f(CW$plugin\fR\->enable
.SS "enable"
.IX Subsection "enable"
Method for enabling plugin
.PP
\&\f(CW$plugin\fR\->enable
.SS "disable"
.IX Subsection "disable"
Method for disabling plugin
.PP
\&\f(CW$plugin\fR\->disable
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle.m.hall@gmail.com>
