.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Overdues 3pm"
.TH C4::Overdues 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Circulation::Fines \- Koha module dealing with fines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Overdues;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains several functions for dealing with fines for
overdue items. It is primarily used by the 'misc/fines2.pl' script.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "Getoverdues"
.IX Subsection "Getoverdues"
.Vb 1
\&  $overdues = Getoverdues( { minimumdays => 1, maximumdays => 30 } );
.Ve
.PP
Returns the list of all overdue books, with their itemtype.
.PP
\&\f(CW$overdues\fR is a reference-to-array. Each element is a
reference-to-hash whose keys are the fields of the issues table in the
Koha database.
.SS "checkoverdues"
.IX Subsection "checkoverdues"
.Vb 1
\&    ($count, $overdueitems) = checkoverdues($borrowernumber);
.Ve
.PP
Returns a count and a list of overdueitems for a given borrowernumber
.SS "CalcFine"
.IX Subsection "CalcFine"
.Vb 3
\&    ($amount, $units_minus_grace, $chargeable_units) = &CalcFine($item,
\&                                  $categorycode, $branch,
\&                                  $start_dt, $end_dt );
.Ve
.PP
Calculates the fine for a book.
.PP
The issuingrules table in the Koha database is a fine matrix, listing
the penalties for each type of patron for each type of item and each branch (e.g., the
standard fine for books might be \f(CW$0\fR.50, but \f(CW$1\fR.50 for DVDs, or staff
members might get a longer grace period between the first and second
reminders that a book is overdue).
.PP
\&\f(CW$item\fR is an item object (hashref).
.PP
\&\f(CW$categorycode\fR is the category code (string) of the patron who currently has
the book.
.PP
\&\f(CW$branchcode\fR is the library (string) whose issuingrules govern this transaction.
.PP
\&\f(CW$start_date\fR & \f(CW$end_date\fR are DateTime objects
defining the date range over which to determine the fine.
.PP
Fines scripts should just supply the date range over which to calculate the fine.
.PP
\&\f(CW&CalcFine\fR returns three values:
.PP
\&\f(CW$amount\fR is the fine owed by the patron (see above).
.PP
\&\f(CW$units_minus_grace\fR is the number of chargeable units minus the grace period
.PP
\&\f(CW$chargeable_units\fR is the number of chargeable units (days between start and end dates, Calendar adjusted where needed,
minus any applicable grace period, or hours)
.PP
\&\s-1FIXME:\s0 previously attempted to return \f(CW$message\fR as a text message, either \*(L"First Notice\*(R", \*(L"Second Notice\*(R",
or \*(L"Final Notice\*(R".  But CalcFine never defined any value.
.SS "get_chargeable_units"
.IX Subsection "get_chargeable_units"
.Vb 1
\&    get_chargeable_units($unit, $start_date_ $end_date, $branchcode);
.Ve
.PP
return integer value of units between \f(CW$start_date\fR and \f(CW$end_date\fR, factoring in holidays for \f(CW$branchcode\fR.
.PP
\&\f(CW$unit\fR is 'days' or 'hours' (default is 'days').
.PP
\&\f(CW$start_date\fR and \f(CW$end_date\fR are the two DateTimes to get the number of units between.
.PP
\&\f(CW$branchcode\fR is the branch whose calendar to use for finding holidays.
.SS "GetSpecialHolidays"
.IX Subsection "GetSpecialHolidays"
.Vb 1
\&    &GetSpecialHolidays($date_dues,$itemnumber);
.Ve
.PP
return number of special days  between date of the day and date due
.PP
\&\f(CW$date_dues\fR is the envisaged date of book return.
.PP
\&\f(CW$itemnumber\fR is the book's item number.
.SS "GetRepeatableHolidays"
.IX Subsection "GetRepeatableHolidays"
.Vb 1
\&    &GetRepeatableHolidays($date_dues, $itemnumber, $difference,);
.Ve
.PP
return number of day closed between date of the day and date due
.PP
\&\f(CW$date_dues\fR is the envisaged date of book return.
.PP
\&\f(CW$itemnumber\fR is item number.
.PP
\&\f(CW$difference\fR numbers of between day date of the day and date due
.SS "GetWayFromItemnumber"
.IX Subsection "GetWayFromItemnumber"
.Vb 1
\&    &Getwdayfromitemnumber($itemnumber);
.Ve
.PP
return the different week day from repeatable_holidays table
.PP
\&\f(CW$itemnumber\fR is  item number.
.SS "GetIssuesIteminfo"
.IX Subsection "GetIssuesIteminfo"
.Vb 1
\&    &GetIssuesIteminfo($itemnumber);
.Ve
.PP
return all data from issues about item
.PP
\&\f(CW$itemnumber\fR is  item number.
.SS "UpdateFine"
.IX Subsection "UpdateFine"
.Vb 9
\&    &UpdateFine(
\&        {
\&            issue_id       => $issue_id,
\&            itemnumber     => $itemnumber,
\&            borrowernumber => $borrowernumber,
\&            amount         => $amount,
\&            due            => $date_due
\&        }
\&    );
.Ve
.PP
(Note: the following is mostly conjecture and guesswork.)
.PP
Updates the fine owed on an overdue book.
.PP
\&\f(CW$itemnumber\fR is the book's item number.
.PP
\&\f(CW$borrowernumber\fR is the borrower number of the patron who currently
has the book on loan.
.PP
\&\f(CW$amount\fR is the current amount owed by the patron.
.PP
\&\f(CW$due\fR is the date
.PP
\&\f(CW&UpdateFine\fR looks up the amount currently owed on the given item
and sets it to \f(CW$amount\fR, creating, if necessary, a new entry in the
accountlines table of the Koha database.
.SS "GetFine"
.IX Subsection "GetFine"
.Vb 1
\&    $data\->{\*(Aqsum(amountoutstanding)\*(Aq} = &GetFine($itemnum,$borrowernumber);
.Ve
.PP
return the total of fine
.PP
\&\f(CW$itemnum\fR is item number
.PP
\&\f(CW$borrowernumber\fR is the borrowernumber
.SS "GetBranchcodesWithOverdueRules"
.IX Subsection "GetBranchcodesWithOverdueRules"
.Vb 1
\&    my @branchcodes = C4::Overdues::GetBranchcodesWithOverdueRules()
.Ve
.PP
returns a list of branch codes for branches with overdue rules defined.
.SS "GetOverduesForBranch"
.IX Subsection "GetOverduesForBranch"
Sql request for display all information for branchoverdues.pl
2 possibilities : with or without location .
display is filtered by branch
.PP
\&\s-1FIXME:\s0 This function should be renamed.
.SS "GetOverdueMessageTransportTypes"
.IX Subsection "GetOverdueMessageTransportTypes"
.Vb 1
\&    my $message_transport_types = GetOverdueMessageTransportTypes( $branchcode, $categorycode, $letternumber);
\&
\&    return a arrayref with all message_transport_type for given branchcode, categorycode and letternumber(1,2 or 3)
.Ve
.SS "parse_overdues_letter"
.IX Subsection "parse_overdues_letter"
parses the letter template, replacing the placeholders with data
specific to this patron, biblio, or item for overdues
.PP
named parameters:
  letter \- required hashref
  borrowernumber \- required integer
  substitute \- optional hashref of other key/value pairs that should
    be substituted in the letter content
.PP
returns the \f(CW\*(C`letter\*(C'\fR hashref, with the content updated to reflect the
substituted keys and values.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
