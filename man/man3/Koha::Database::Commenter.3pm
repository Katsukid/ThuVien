.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Database::Commenter 3pm"
.TH Koha::Database::Commenter 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Database::Commenter \- Manage column comments in database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Koha::Database::Commenter;
\&    $mgr = Koha::Database::Commenter\->new({ dbh => $dbh });
\&
\&    $mgr\->reset_to_schema;
\&    # OR:
\&    $mgr\->clear;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&    This object helps you to keep column comments in your database in sync
\&    with the Koha schema. It also allows you to clear all comments.
\&
\&    The advantage of keeping in sync is that you can easily track differences
\&    between schema and database with the maintenance script
\&    update_dbix_class_files.pl.
\&
\&    Tip: make a backup of your database before running this script.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\&    $mgr = Koha::Database::Commenter\->new({
\&        dbh => $dbh, database => $d, schema_file => $s
\&    });
\&
\&    Object constructor.
\&    Param dbh is mandatory. Params database and schema_file are
\&    optional.
\&    Param database can be used to move away from current database of
\&    db handle.
\&    Param schema_file is needed for resetting to schema. Falls back to
\&    the constant for Koha structure file.
.Ve
.SS "clear"
.IX Subsection "clear"
.Vb 1
\&    $object\->clear({ dry_run => 0, table => $table }, $messages );
\&
\&    Clears all current column comments in storage.
\&    If table is passed, only that table is changed.
\&    Dry run only returns sql statements in $messages (arrayref).
.Ve
.SS "reset_to_schema"
.IX Subsection "reset_to_schema"
.Vb 1
\&    $object\->reset_to_schema({ dry_run => 0, table => $table }, $messages );
\&
\&    Resets column comments in storage to schema definition.
\&    Other column comments are cleared.
\&    When you pass table, only that table is changed.
\&    Dry run only returns sql statements in $messages (arrayref).
.Ve
.SS "renumber"
.IX Subsection "renumber"
.Vb 1
\&    $object\->renumber({ dry_run => 0, table => $table }, $messages );
\&
\&    This is primarily meant for testing purposes (verifying results across
\&    whole database).
\&    It adds comments like Comment_1, Comment_2 etc.
\&    When you pass table, only that table is changed. Otherwise all tables
\&    are affected; note that the column counter does not reset by table.
\&    Dry run only returns sql statements in $messages (arrayref).
.Ve
.SH "INTERNAL ROUTINES"
.IX Header "INTERNAL ROUTINES"
.SS "_find_schema"
.IX Subsection "_find_schema"
.SS "_fetch_schema_comments"
.IX Subsection "_fetch_schema_comments"
.SS "_fetch_stored_comments"
.IX Subsection "_fetch_stored_comments"
.SS "_change_column"
.IX Subsection "_change_column"
.SH "ADDITIONAL COMMENTS"
.IX Header "ADDITIONAL COMMENTS"
.Vb 2
\&    The module contains the core code for the options of the maintenance
\&    script sync_db_comments.pl.
\&
\&    It can be tested additionally with Commenter.t, but note that since
\&    SQL DDL statements \- as generated by this module \- implicitly commit,
\&    we are not modifying actual Koha tables in that test.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Marcel de Rooy, Rijksmuseum Amsterdam, The Netherlands
.Ve
