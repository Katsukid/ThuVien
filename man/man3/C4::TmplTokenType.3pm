.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::TmplTokenType 3pm"
.TH C4::TmplTokenType 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::TmplTokenType.pm \- Types of TmplToken objects
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Java-style \*(L"safe enum\*(R" singleton class for types of TmplToken objects.
The predefined constants are
.IP "\s-1TEXT\s0" 4
.IX Item "TEXT"
normal text (#text in the \s-1DTD\s0)
.IP "\s-1TEXT_PARAMETRIZED\s0" 4
.IX Item "TEXT_PARAMETRIZED"
parametrized normal text
(result of simple recognition of text interspersed with <\s-1TMPL_VAR\s0> directives;
this has to be explicitly enabled in the scanner)
.IP "\s-1CDATA\s0" 4
.IX Item "CDATA"
normal text (\s-1CDATA\s0 in the \s-1DTD\s0)
.IP "\s-1TAG\s0" 4
.IX Item "TAG"
something that has the form of an \s-1HTML\s0 tag
.IP "\s-1DECL\s0" 4
.IX Item "DECL"
something that has the form of an \s-1SGML\s0 declaration
.IP "\s-1PI\s0" 4
.IX Item "PI"
something that has the form of an \s-1SGML\s0 processing instruction
.IP "\s-1DIRECTIVE\s0" 4
.IX Item "DIRECTIVE"
a Template Toolkit directive
.IP "\s-1COMMENT\s0" 4
.IX Item "COMMENT"
something that has the form of an \s-1HTML\s0 comment
(and is not recognized as an HTML::Template directive)
.IP "\s-1UNKNOWN\s0" 4
.IX Item "UNKNOWN"
something that is not recognized at all by the scanner
.PP
Note that end of file is currently represented by undef,
instead of a constant predefined by this module.
