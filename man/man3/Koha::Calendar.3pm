.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Calendar 3pm"
.TH Koha::Calendar 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Calendar \- Object containing a branches calendar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Koha::Calendar
\&
\&  my $c = Koha::Calendar\->new( branchcode => \*(AqMAIN\*(Aq );
\&  my $dt = dt_from_string();
\&
\&  # are we open
\&  $open = $c\->is_holiday($dt);
\&  # when will item be due if loan period = $dur (a DateTime::Duration object)
\&  $duedate = $c\->addDuration($dt,$dur,\*(Aqdays\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  Implements those features of C4::Calendar needed for Staffs Rolling Loans
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new : Create a calendar object"
.IX Subsection "new : Create a calendar object"
my \f(CW$calendar\fR = Koha::Calendar\->new( branchcode => '\s-1MAIN\s0' );
.PP
The option branchcode is required
.SS "addDuration"
.IX Subsection "addDuration"
.Vb 1
\&    my $dt = $calendar\->addDuration($date, $dur, $unit)
.Ve
.PP
\&\f(CW$date\fR is a DateTime object representing the starting date of the interval.
.PP
\&\f(CW$offset\fR is a DateTime::Duration to add to it
.PP
\&\f(CW$unit\fR is a string value 'days' or 'hours' toflag granularity of duration
.PP
Currently unit is only used to invoke Staffs return Monday at 10 am rule this
parameter will be removed when issuingrules properly cope with that
.SS "addHours"
.IX Subsection "addHours"
.Vb 1
\&    my $dt = $calendar\->addHours($date, $dur, $return_by_hour )
.Ve
.PP
\&\f(CW$date\fR is a DateTime object representing the starting date of the interval.
.PP
\&\f(CW$offset\fR is a DateTime::Duration to add to it
.PP
\&\f(CW$return_by_hour\fR is an integer value representing the opening hour for the branch
.SS "get_push_amt"
.IX Subsection "get_push_amt"
.Vb 1
\&    my $amt = $calendar\->get_push_amt($date)
.Ve
.PP
\&\f(CW$date\fR is a DateTime object representing a closed return date
.PP
Using the days_mode syspref value and the nature of the closed return
date, return how many days we should jump forward to find another return date
.SS "addDays"
.IX Subsection "addDays"
.Vb 1
\&    my $dt = $calendar\->addDays($date, $dur)
.Ve
.PP
\&\f(CW$date\fR is a DateTime object representing the starting date of the interval.
.PP
\&\f(CW$offset\fR is a DateTime::Duration to add to it
.PP
\&\f(CW$unit\fR is a string value 'days' or 'hours' toflag granularity of duration
.PP
Currently unit is only used to invoke Staffs return Monday at 10 am rule this
parameter will be removed when issuingrules properly cope with that
.SS "is_holiday"
.IX Subsection "is_holiday"
\&\f(CW$yesno\fR = \f(CW$calendar\fR\->is_holiday($dt);
.PP
passed a DateTime object returns 1 if it is a closed day
0 if not according to the calendar
.SS "days_between"
.IX Subsection "days_between"
\&\f(CW$duration\fR = \f(CW$calendar\fR\->days_between($start_dt, \f(CW$end_dt\fR);
.PP
Passed two dates returns a DateTime::Duration object measuring the length between them
ignoring closed days. Always returns a positive number irrespective of the
relative order of the parameters.
.PP
Note: This routine assumes neither the passed start_dt nor end_dt can be a closed day
.SS "hours_between"
.IX Subsection "hours_between"
\&\f(CW$duration\fR = \f(CW$calendar\fR\->hours_between($start_dt, \f(CW$end_dt\fR);
.PP
Passed two dates returns a DateTime::Duration object measuring the length between them
ignoring closed days. Always returns a positive number irrespective of the
relative order of the parameters.
.PP
Note: This routine assumes neither the passed start_dt nor end_dt can be a closed day
.SS "next_open_days"
.IX Subsection "next_open_days"
\&\f(CW$datetime\fR = \f(CW$calendar\fR\->next_open_days($duedate_dt, \f(CW$to_add\fR)
.PP
Passed a Datetime and number of days,  returns another Datetime representing
the next open day after adding the passed number of days. It is intended for
use to calculate the due date when useDaysMode syspref is set to either
\&'Datedue', 'Calendar' or 'Dayweek'.
.SS "prev_open_days"
.IX Subsection "prev_open_days"
\&\f(CW$datetime\fR = \f(CW$calendar\fR\->prev_open_days($duedate_dt, \f(CW$to_sub\fR)
.PP
Passed a Datetime and a number of days, returns another Datetime
representing the previous open day after subtracting the number of passed
days. It is intended for use to calculate the due date when useDaysMode
syspref is set to either 'Datedue', 'Calendar' or 'Dayweek'.
.SS "days_forward"
.IX Subsection "days_forward"
\&\f(CW$datetime\fR = \f(CW$calendar\fR\->days_forward($start_dt, \f(CW$to_add\fR)
.PP
Passed a Datetime and number of days, returns another Datetime representing
the next open day after adding the passed number of days. It is intended for
use to calculate the due date when useDaysMode syspref is set to either
\&'Datedue', 'Calendar' or 'Dayweek'.
.SS "set_daysmode"
.IX Subsection "set_daysmode"
For testing only allows the calling script to change days mode
.SS "clear_weekly_closed_days"
.IX Subsection "clear_weekly_closed_days"
In test mode changes the testing set of closed days to a new set with
no closed days. \s-1TODO\s0 passing an array of closed days to this would
allow testing of more configurations
.SS "add_holiday"
.IX Subsection "add_holiday"
Passed a datetime object this will add it to the calendar's list of
closed days. This is for testing so that we can alter the Calenfar object's
list of specified dates
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Will croak if not passed a branchcode in new
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
This only contains a limited subset of the functionality in C4::Calendar
Only enough to support Staffs Rolling loans
.SH "AUTHOR"
.IX Header "AUTHOR"
Colin Campbell colin.campbell@ptfs\-europe.com
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2011 PTFS-Europe Ltd All rights reserved
.PP
Koha is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.
.PP
Koha is distributed in the hope that it will be useful, but
\&\s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with Koha; if not, see <http://www.gnu.org/licenses>.
