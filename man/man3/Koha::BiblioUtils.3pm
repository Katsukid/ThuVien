.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::BiblioUtils 3pm"
.TH Koha::BiblioUtils 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::BiblioUtils \- contains fundamental biblio\-related functions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This contains functions for normal operations on biblio records.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    my $biblio = Koha::BiblioUtils\->new($marc_record, [$biblionumber]);
.Ve
.PP
Creates an instance of \f(CW\*(C`Koha::BiblioUtils\*(C'\fR based on the marc record. If known,
the biblionumber can be provided too.
.SS "get_from_biblionumber"
.IX Subsection "get_from_biblionumber"
.Vb 1
\&    my $biblio = Koha::BiblioUtils\->get_from_biblionumber($biblionumber, %options);
.Ve
.PP
This will give you an instance of Koha::BiblioUtils that is the biblio that
you requested.
.PP
Options are:
.ie n .IP "$item_data" 4
.el .IP "\f(CW$item_data\fR" 4
.IX Item "$item_data"
If true, then the item data will be merged into the record when it's loaded.
.PP
It will return \f(CW\*(C`undef\*(C'\fR if the biblio doesn't exist.
.SS "get_all_biblios_iterator"
.IX Subsection "get_all_biblios_iterator"
.Vb 1
\&    my $it = Koha::BiblioUtils\->get_all_biblios_iterator(%options);
.Ve
.PP
This will provide an iterator object that will, one by one, provide the
Koha::BiblioUtils of each biblio. This will include the item data.
.PP
The iterator is a Koha::MetadataIterator object.
.PP
Possible options are:
.ie n .IP """slice""" 4
.el .IP "\f(CWslice\fR" 4
.IX Item "slice"
slice may be defined as a hash of two values: index and count. index
is the slice number to process and count is total number of slices.
With this information the iterator returns just the given slice of
records instead of all.
.SS "get_marc_biblio"
.IX Subsection "get_marc_biblio"
.Vb 1
\&    my $marc = Koha::BiblioUtils\->get_marc_biblio($bibnum, %options);
.Ve
.PP
This non-class function fetches the MARC::Record for the given biblio number.
Nothing is returned if the biblionumber couldn't be found (or it somehow has no
\&\s-1MARC\s0 data.)
.PP
Options are:
.IP "item_data" 4
.IX Item "item_data"
If set to true, item data is embedded in the record. Default is to not do this.
