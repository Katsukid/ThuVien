.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Patroncards::Lib 3pm"
.TH C4::Patroncards::Lib 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Patroncards::Lib \- A shared library of linear functions used in the Patroncard Creator module in Koha
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This library provides functions used by various sections of the Patroncard Creator module.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "\fBC4::Patroncards::Lib::unpack_UTF8()\fP"
.IX Subsection "C4::Patroncards::Lib::unpack_UTF8()"
.Vb 2
\&    This function returns a reference to an array of hex values equivalent to the utf8 values of the string passed in. This assumes, of course, that the string is
\&    indeed utf8.
\&
\&    example:
\&
\&        my $hex = unpack_UTF8($str);
.Ve
.SS "\fBC4::Patroncards::Lib::text_alignment()\fP"
.IX Subsection "C4::Patroncards::Lib::text_alignment()"
.Vb 1
\&    This function returns $Tx and $Tw values for the supplied text alignment. It accepts six parameters:
\&
\&    C<origin_llx>       = the x value for the origin of the text box to align text in
\&    C<text_box_width>   = the width in postscript points of the text box
\&    C<text_llx>         = the x value for the lower left point of the text to align
\&    C<string_width>     = the width in postscript points of the string of text to align
\&    C<line>             = the line of text to align (this may be set to \*(Aqundef\*(Aq for all alignment types except \*(AqJustify\*(Aq)
\&    C<alignment>        = the type of text alignment desired:
\&
\&    =item .
\&    B<L>        Left align
\&    =item .
\&    B<C>        Center align
\&    =item .
\&    B<R>        Right align
\&    =item .
\&    B<J>        Justify
\&
\&    example:
\&
\&        my ($Tx, $Tw)  = text_alignment($origin_llx, $text_box_width, $text_llx, $string_width, $line, $alignment);
.Ve
.SS "\fBC4::Patroncards::Lib::leading()\fP"
.IX Subsection "C4::Patroncards::Lib::leading()"
.Vb 1
\&    This function accepts a single parameter, font postscript point size, and returns the amount of leading to be added.
\&
\&    example:
\&
\&        my $leading = leading($font_size);
.Ve
.SS "\fBC4::Patroncards::Lib::box()\fP"
.IX Subsection "C4::Patroncards::Lib::box()"
.Vb 1
\&    This function will create and insert a "guide box" into the supplied pdf object. It accepts five arguments:
\&
\&    C<llx>      = the x value of the lower left coordinate of the guide box
\&    C<lly>      = the y value of the lower left coordinate of the guide box
\&    C<width>    = the width of the guide box
\&    C<height>   = the height of the guide box
\&    C<pdf>      = the pdf object into which to insert the guide box
\&
\&
\&    example:
\&
\&        box($llx, $lly, $width, $height, $pdf);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Nighswonger <cnighswonger \s-1AT\s0 foundations \s-1DOT\s0 edu>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2009 Foundations Bible College.
.SH "LICENSE"
.IX Header "LICENSE"
This file is part of Koha.
.PP
Koha is free software; you can redistribute it and/or modify it under the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later version.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with Koha; if not, write to the Free Software Foundation, Inc., 59 Temple Place,
Suite 330, Boston, \s-1MA\s0  02111\-1307 \s-1USA\s0
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
Koha is distributed in the hope that it will be useful, but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR
A PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details.
