.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Cache::Memory::Lite 3pm"
.TH Koha::Cache::Memory::Lite 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Cache::Memory::Lite \- Handling caching of objects in memory *only* for Koha
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use Koha::Cache::Memory::Lite;
\&  my $cache = Koha::Cache::Memory::Lite\->get_instance();
\&  $cache\->set($key, $value);
\&  my $retrieved_from_cache_value = $cache\->get($key);
\&  $cache\->clear_from_cache($key);
\&  $cache\->flush();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Koha in memory only caching routines.
.SS "get_instance"
.IX Subsection "get_instance"
This gets a shared instance of the lite cache, set up in a very default
way. The lite cache is an in memory only cache that's automatically flushed
for every request.
.SS "get_from_cache"
.IX Subsection "get_from_cache"
.Vb 1
\&    my $value = $cache\->get_from_cache($key);
.Ve
.PP
Retrieve the value stored under the specified key in the cache.
.PP
The retrieved value is a direct reference so should not be modified.
.SS "set_in_cache"
.IX Subsection "set_in_cache"
.Vb 1
\&    $cache\->set_in_cache($key, $value);
.Ve
.PP
Save a value to the specified key in the cache.
.SS "clear_from_cache"
.IX Subsection "clear_from_cache"
.Vb 1
\&    $cache\->clear_from_cache($key);
.Ve
.PP
Remove the value identified by the specified key from the lite cache.
.SS "all_keys"
.IX Subsection "all_keys"
.Vb 1
\&    my @keys = $cache\->all_keys();
.Ve
.PP
Returns an array of all keys currently in the lite cache.
.SS "flush"
.IX Subsection "flush"
.Vb 1
\&    $cache\->flush();
.Ve
.PP
Clear the entire lite cache.
