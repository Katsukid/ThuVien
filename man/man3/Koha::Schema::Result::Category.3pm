.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Schema::Result::Category 3pm"
.TH Koha::Schema::Result::Category 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Schema::Result::Category
.ie n .SH "TABLE: ""categories"""
.el .SH "TABLE: \f(CWcategories\fP"
.IX Header "TABLE: categories"
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.SS "categorycode"
.IX Subsection "categorycode"
.Vb 4
\&  data_type: \*(Aqvarchar\*(Aq
\&  default_value: (empty string)
\&  is_nullable: 0
\&  size: 10
.Ve
.PP
unique primary key used to idenfity the patron category
.SS "description"
.IX Subsection "description"
.Vb 2
\&  data_type: \*(Aqlongtext\*(Aq
\&  is_nullable: 1
.Ve
.PP
description of the patron category
.SS "enrolmentperiod"
.IX Subsection "enrolmentperiod"
.Vb 2
\&  data_type: \*(Aqsmallint\*(Aq
\&  is_nullable: 1
.Ve
.PP
number of months the patron is enrolled for (will be \s-1NULL\s0 if enrolmentperioddate is set)
.SS "enrolmentperioddate"
.IX Subsection "enrolmentperioddate"
.Vb 3
\&  data_type: \*(Aqdate\*(Aq
\&  datetime_undef_if_invalid: 1
\&  is_nullable: 1
.Ve
.PP
date the patron is enrolled until (will be \s-1NULL\s0 if enrolmentperiod is set)
.SS "password_expiry_days"
.IX Subsection "password_expiry_days"
.Vb 2
\&  data_type: \*(Aqsmallint\*(Aq
\&  is_nullable: 1
.Ve
.PP
number of days after which the patron must reset their password
.SS "upperagelimit"
.IX Subsection "upperagelimit"
.Vb 2
\&  data_type: \*(Aqsmallint\*(Aq
\&  is_nullable: 1
.Ve
.PP
age limit for the patron
.SS "dateofbirthrequired"
.IX Subsection "dateofbirthrequired"
.Vb 2
\&  data_type: \*(Aqtinyint\*(Aq
\&  is_nullable: 1
.Ve
.PP
the minimum age required for the patron category
.SS "finetype"
.IX Subsection "finetype"
.Vb 3
\&  data_type: \*(Aqvarchar\*(Aq
\&  is_nullable: 1
\&  size: 30
.Ve
.PP
unused in Koha
.SS "bulk"
.IX Subsection "bulk"
.Vb 2
\&  data_type: \*(Aqtinyint\*(Aq
\&  is_nullable: 1
.Ve
.SS "enrolmentfee"
.IX Subsection "enrolmentfee"
.Vb 3
\&  data_type: \*(Aqdecimal\*(Aq
\&  is_nullable: 1
\&  size: [28,6]
.Ve
.PP
enrollment fee for the patron
.SS "overduenoticerequired"
.IX Subsection "overduenoticerequired"
.Vb 2
\&  data_type: \*(Aqtinyint\*(Aq
\&  is_nullable: 1
.Ve
.PP
are overdue notices sent to this patron category (1 for yes, 0 for no)
.SS "issuelimit"
.IX Subsection "issuelimit"
.Vb 2
\&  data_type: \*(Aqsmallint\*(Aq
\&  is_nullable: 1
.Ve
.PP
unused in Koha
.SS "reservefee"
.IX Subsection "reservefee"
.Vb 3
\&  data_type: \*(Aqdecimal\*(Aq
\&  is_nullable: 1
\&  size: [28,6]
.Ve
.PP
cost to place holds
.SS "hidelostitems"
.IX Subsection "hidelostitems"
.Vb 3
\&  data_type: \*(Aqtinyint\*(Aq
\&  default_value: 0
\&  is_nullable: 0
.Ve
.PP
are lost items shown to this category (1 for yes, 0 for no)
.SS "category_type"
.IX Subsection "category_type"
.Vb 4
\&  data_type: \*(Aqvarchar\*(Aq
\&  default_value: \*(AqA\*(Aq
\&  is_nullable: 0
\&  size: 1
.Ve
.PP
type of Koha patron (Adult, Child, Professional, Organizational, Statistical, Staff)
.SS "BlockExpiredPatronOpacActions"
.IX Subsection "BlockExpiredPatronOpacActions"
.Vb 4
\&  accessor: \*(Aqblock_expired_patron_opac_actions\*(Aq
\&  data_type: \*(Aqtinyint\*(Aq
\&  default_value: \-1
\&  is_nullable: 0
.Ve
.PP
wheither or not a patron of this category can renew books or place holds once their card has expired. 0 means they can, 1 means they cannot, \-1 means use syspref BlockExpiredPatronOpacActions
.SS "default_privacy"
.IX Subsection "default_privacy"
.Vb 4
\&  data_type: \*(Aqenum\*(Aq
\&  default_value: \*(Aqdefault\*(Aq
\&  extra: {list => ["default","never","forever"]}
\&  is_nullable: 0
.Ve
.PP
Default privacy setting for this patron category
.SS "checkprevcheckout"
.IX Subsection "checkprevcheckout"
.Vb 4
\&  data_type: \*(Aqvarchar\*(Aq
\&  default_value: \*(Aqinherit\*(Aq
\&  is_nullable: 0
\&  size: 7
.Ve
.PP
produce a warning for this patron category if this item has previously been checked out to this patron if 'yes', not if 'no', defer to syspref setting if 'inherit'.
.SS "can_be_guarantee"
.IX Subsection "can_be_guarantee"
.Vb 3
\&  data_type: \*(Aqtinyint\*(Aq
\&  default_value: 0
\&  is_nullable: 0
.Ve
.PP
if patrons of this category can be guarantees
.SS "reset_password"
.IX Subsection "reset_password"
.Vb 2
\&  data_type: \*(Aqtinyint\*(Aq
\&  is_nullable: 1
.Ve
.PP
if patrons of this category can do the password reset flow,
.SS "change_password"
.IX Subsection "change_password"
.Vb 2
\&  data_type: \*(Aqtinyint\*(Aq
\&  is_nullable: 1
.Ve
.PP
if patrons of this category can change their passwords in the \s-1OAPC\s0
.SS "min_password_length"
.IX Subsection "min_password_length"
.Vb 2
\&  data_type: \*(Aqsmallint\*(Aq
\&  is_nullable: 1
.Ve
.PP
set minimum password length for patrons in this category
.SS "require_strong_password"
.IX Subsection "require_strong_password"
.Vb 2
\&  data_type: \*(Aqtinyint\*(Aq
\&  is_nullable: 1
.Ve
.PP
set required password strength for patrons in this category
.SS "exclude_from_local_holds_priority"
.IX Subsection "exclude_from_local_holds_priority"
.Vb 2
\&  data_type: \*(Aqtinyint\*(Aq
\&  is_nullable: 1
.Ve
.PP
Exclude patrons of this category from local holds priority
.SH "PRIMARY KEY"
.IX Header "PRIMARY KEY"
.IP "\(bu" 4
\&\*(L"categorycode\*(R"
.SH "RELATIONS"
.IX Header "RELATIONS"
.SS "borrower_attribute_types"
.IX Subsection "borrower_attribute_types"
Type: has_many
.PP
Related object: Koha::Schema::Result::BorrowerAttributeType
.SS "borrower_message_preferences"
.IX Subsection "borrower_message_preferences"
Type: has_many
.PP
Related object: Koha::Schema::Result::BorrowerMessagePreference
.SS "borrowers"
.IX Subsection "borrowers"
Type: has_many
.PP
Related object: Koha::Schema::Result::Borrower
.SS "categories_branches"
.IX Subsection "categories_branches"
Type: has_many
.PP
Related object: Koha::Schema::Result::CategoriesBranch
.SS "circulation_rules"
.IX Subsection "circulation_rules"
Type: has_many
.PP
Related object: Koha::Schema::Result::CirculationRule
.SS "identity_provider_domains"
.IX Subsection "identity_provider_domains"
Type: has_many
.PP
Related object: Koha::Schema::Result::IdentityProviderDomain
