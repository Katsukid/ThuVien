.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Authority 3pm"
.TH Koha::Authority 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Authority \- Koha Authority Object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIget_usage_count\fR
.IX Subsection "get_usage_count"
.PP
.Vb 1
\&    $count = $self\->get_usage_count;
\&
\&    Returns the number of linked biblio records.
.Ve
.PP
\fIlinked_biblionumbers\fR
.IX Subsection "linked_biblionumbers"
.PP
.Vb 3
\&    my @biblios = $self\->linked_biblionumbers({
\&        [ max_results => $max ], [ offset => $offset ],
\&    });
\&
\&    Returns an array of biblionumbers.
.Ve
.PP
\fIcontrolled_indicators\fR
.IX Subsection "controlled_indicators"
.PP
.Vb 7
\&    Some authority types control the indicators of some corresponding
\&    biblio fields (especially in MARC21).
\&    For example, if you have a PERSO_NAME authority (report tag 100), the
\&    first indicator of biblio field 600 directly comes from the authority,
\&    and the second indicator depends on thesaurus settings in the authority
\&    record. Use this method to obtain such controlled values. In this example
\&    you should pass 600 in the biblio_tag parameter.
\&
\&    my $result = $self\->controlled_indicators({
\&        record => $auth_marc, biblio_tag => $bib_tag
\&    });
\&    my $ind1 = $result\->{ind1};
\&    my $ind2 = $result\->{ind2};
\&    my $subfield_2 = $result\->{sub2}; # Optional subfield 2 when ind==7
\&
\&    If an indicator is not controlled, the result hash does not contain a key
\&    for its value. (Same for the sub2 key for an optional subfield $2.)
\&
\&    Note: The record parameter is a temporary bypass in order to prevent
\&    needless conversion of $self\->marcxml.
.Ve
.PP
\fIget_identifiers\fR
.IX Subsection "get_identifiers"
.PP
.Vb 1
\&    my $identifiers = $author\->get_identifiers;
.Ve
.PP
Return a list of identifiers of the authors which are in 024$2$a
.PP
\fIrecord\fR
.IX Subsection "record"
.PP
.Vb 1
\&    my $record = $authority\->record()
.Ve
.PP
Return the MARC::Record for this authority
.PP
\fIrecord_schema\fR
.IX Subsection "record_schema"
.PP
my \f(CW$schema\fR = \f(CW$biblio\fR\->\fBrecord_schema()\fR;
.PP
Returns the record schema (\s-1MARC21\s0 or \s-1UNIMARCAUTH\s0).
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Authority object
on the \s-1API.\s0
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
