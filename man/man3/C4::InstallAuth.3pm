.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::InstallAuth 3pm"
.TH C4::InstallAuth 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
InstallAuth \- Authenticates Koha users for Install process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use CGI qw ( \-utf8 );
\&  use InstallAuth;
\&  use C4::Output;
\&
\&  my $query = new CGI;
\&
\&    my ( $template, $borrowernumber, $cookie ) = get_template_and_user(
\&        {   template_name   => "opac\-main.tt",
\&            query           => $query,
\&            type            => "opac",
\&            authnotrequired => 1,
\&            flagsrequired   => { acquisition => \*(Aq*\*(Aq },
\&        }
\&    );
\&
\&  output_html_with_http_headers $query, $cookie, $template\->output;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The main function of this module is to provide
authentification. However the get_template_and_user function has
been provided so that a users login information is passed along
automatically. This gets loaded into the template.
This package is different from C4::Auth in so far as
C4::Auth uses many preferences which are supposed \s-1NOT\s0 to be obtainable when installing the database.
.PP
As in C4::Auth, Authentication is based on cookies.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "get_template_and_user"
.IX Subsection "get_template_and_user"
.Vb 8
\&    my ( $template, $borrowernumber, $cookie ) = get_template_and_user(
\&        {   template_name   => "opac\-main.tt",
\&            query           => $query,
\&            type            => "opac",
\&            authnotrequired => 1,
\&            flagsrequired   => { acquisition => \*(Aq*\*(Aq },
\&        }
\&    );
.Ve
.PP
This call passes the \f(CW\*(C`query\*(C'\fR, \f(CW\*(C`flagsrequired\*(C'\fR and \f(CW\*(C`authnotrequired\*(C'\fR
to \f(CW&checkauth\fR (in this module) to perform authentification.
See \f(CW&checkauth\fR for an explanation of these parameters.
.PP
The \f(CW\*(C`template_name\*(C'\fR is then used to find the correct template for
the page. The authenticated users details are loaded onto the
template in the logged_in_user variable (which is a Koha::Patron object). Also the
\&\f(CW\*(C`sessionID\*(C'\fR is passed to the template. This can be used in templates
if cookies are disabled. It needs to be put as and input to every
authenticated page.
.PP
More information on the \f(CW\*(C`gettemplate\*(C'\fR sub can be found in the
Templates.pm module.
.SS "checkauth"
.IX Subsection "checkauth"
.Vb 1
\&  ($userid, $cookie, $sessionID) = &checkauth($query, $noauth, $flagsrequired, $type);
.Ve
.PP
Verifies that the user is authorized to run this script.  If
the user is authorized, a (userid, cookie, session-id, flags)
quadruple is returned.  If the user is not authorized but does
not have the required privilege (see \f(CW$flagsrequired\fR below), it
displays an error page and exits.  Otherwise, it displays the
login page and exits.
.PP
Note that \f(CW&checkauth\fR will return if and only if the user
is authorized, so it should be called early on, before any
unfinished operations (e.g., if you've opened a file, then
\&\f(CW&checkauth\fR won't close it for you).
.PP
\&\f(CW$query\fR is the \s-1CGI\s0 object for the script calling \f(CW&checkauth\fR.
.PP
The \f(CW$noauth\fR argument is optional. If it is set, then no
authorization is required for the script.
.PP
\&\f(CW&checkauth\fR fetches user and session information from \f(CW$query\fR and
ensures that the user is authorized to run scripts that require
authorization.
.PP
The \f(CW$flagsrequired\fR argument specifies the required privileges
the user must have if the username and password are correct.
It should be specified as a reference-to-hash; keys in the hash
should be the \*(L"flags\*(R" for the user, as specified in the Members
intranet module. Any key specified must correspond to a \*(L"flag\*(R"
in the userflags table. E.g., { circulate => 1 } would specify
that the user must have the \*(L"circulate\*(R" privilege in order to
proceed. To make sure that access control is correct, the
\&\f(CW$flagsrequired\fR parameter must be specified correctly.
.PP
The \f(CW$type\fR argument specifies whether the template should be
retrieved from the opac or intranet directory tree.  \*(L"opac\*(R" is
assumed if it is not specified; however, if \f(CW$type\fR is specified,
\&\*(L"intranet\*(R" is assumed if it is not \*(L"opac\*(R".
.PP
If \f(CW$query\fR does not have a valid session \s-1ID\s0 associated with it
(i.e., the user has not logged in) or if the session has expired,
\&\f(CW&checkauth\fR presents the user with a login page (from the point of
view of the original script, \f(CW&checkauth\fR does not return). Once the
user has authenticated, \f(CW&checkauth\fR restarts the original script
(this time, \f(CW&checkauth\fR returns).
.PP
The login page is provided using a HTML::Template, which is set in the
systempreferences table or at the top of this file. The variable \f(CW$type\fR
selects which template to use, either the opac or the intranet 
authentification template.
.PP
\&\f(CW&checkauth\fR returns a user \s-1ID,\s0 a cookie, and a session \s-1ID.\s0 The
cookie should be sent back to the browser; it verifies that the user
has authenticated.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1\fBCGI\s0\fR\|(3)
.PP
\&\fBC4::Output\fR\|(3)
.PP
\&\fBDigest::MD5\fR\|(3)
