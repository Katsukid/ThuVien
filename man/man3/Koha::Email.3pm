.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Email 3pm"
.TH Koha::Email 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Email \- A wrapper around Email::Stuffer
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fInew_from_string\fR
.IX Subsection "new_from_string"
.PP
.Vb 1
\&    my $email = Koha::Email\->new_from_string( $email_string );
.Ve
.PP
Constructor for the Koha::Email class. The \fI\f(CI$email_string\fI\fR (mandatory)
parameter will be parsed with \fIEmail::MIME\fR.
.PP
Note: \fI\f(CI$email_string\fI\fR can be the produced by the \fIas_string\fR method from
\&\fBKoha::Email\fR or \fBEmail::MIME\fR.
.PP
\fIcreate\fR
.IX Subsection "create"
.PP
.Vb 10
\&    my $email = Koha::Email\->create(
\&        {
\&          [ text_body   => $text_message,
\&            html_body   => $html_message,
\&            body_params => $body_params ]
\&            from        => $from,
\&            to          => $to,
\&            cc          => $cc,
\&            bcc         => $bcc,
\&            reply_to    => $reply_to,
\&            sender      => $sender,
\&            subject     => $subject,
\&        }
\&    );
.Ve
.PP
This method creates a new Email::Stuffer object taking Koha specific configurations
into account.
.PP
The encoding defaults to utf\-8. It can be set as part of the body_params hashref. See
\&\fIEmail::Stuffer\fR and \fIEmail::MIME\fR for more details on the available options.
.PP
Parameters:
 \- \fIfrom\fR defaults to the value of the \fIKohaAdminEmailAddress\fR system preference
 \- The \fISendAllEmailsTo\fR system preference overloads the \fIto\fR, \fIcc\fR and \fIbcc\fR parameters
 \- \fIreply_to\fR defaults to the value of the \fIReplytoDefault\fR system preference
 \- \fIsender\fR defaults to the value of the \fIReturnpathDefault\fR system preference
.PP
Both \fItext_body\fR and \fIhtml_body\fR can be set later. \fIbody_params\fR will be passed if present
to the constructor.
.PP
\fIsend_or_die\fR
.IX Subsection "send_or_die"
.PP
.Vb 1
\&    $email\->send_or_die({ transport => $transport [, $args] });
.Ve
.PP
Overloaded Email::Stuffer \fIsend_or_die\fR method, that takes care of Bcc and Return-path
handling.
.PP
Bcc is removed from the message headers, and included in the recipients list to be
passed to \fIsend_or_die\fR.
.PP
Return-path, '\s-1MAIL FROM\s0', is set to the 'Sender' email header unless an explicit 'from'
parameter is passed to send_or_die.  'Return\-path' headers are actually set by the \s-1MTA,\s0
usually using the '\s-1MAIL FROM\s0' information set at mail server connection time.
.PP
\fIis_valid\fR
.IX Subsection "is_valid"
.PP
.Vb 1
\&    my $is_valid = Koha::Email\->is_valid($email_address);
.Ve
.PP
Return true is the email address passed in parameter is valid following \s-1RFC 2822.\s0
