.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Patrons 3pm"
.TH Koha::Patrons 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Patron \- Koha Patron Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIsearch_limited\fR
.IX Subsection "search_limited"
.PP
my \f(CW$patrons\fR = Koha::Patrons\->search_limit( \f(CW$params\fR, \f(CW$attributes\fR );
.PP
Returns all the patrons the logged in user is allowed to see
.PP
\fIsearch_housebound_choosers\fR
.IX Subsection "search_housebound_choosers"
.PP
Returns all Patrons which are Housebound choosers.
.PP
\fIsearch_housebound_deliverers\fR
.IX Subsection "search_housebound_deliverers"
.PP
Returns all Patrons which are Housebound deliverers.
.PP
\fIsearch_upcoming_membership_expires\fR
.IX Subsection "search_upcoming_membership_expires"
.PP
my \f(CW$patrons\fR = Koha::Patrons\->\fBsearch_upcoming_membership_expires()\fR;
.PP
The 'before' and 'after' represent the number of days before/after the date
that is set by the preference MembershipExpiryDaysNotice.
If the pref is 14, before 2 and after 3 then you will get all expires
from 12 to 17 days.
.PP
\fIsearch_patrons_to_anonymise\fR
.IX Subsection "search_patrons_to_anonymise"
.PP
.Vb 1
\&    my $patrons = Koha::Patrons\->search_patrons_to_anonymise( { before => $older_than_date, [ library => $library ] } );
.Ve
.PP
This method returns all patrons who has an issue history older than a given date.
.PP
\fIdelete\fR
.IX Subsection "delete"
.PP
.Vb 1
\&    Koha::Patrons\->search({ some filters here })\->delete({ move => 1 });
\&
\&    Delete passed set of patron objects.
\&    Wrapper for Koha::Patron\->delete. (We do not want to bypass Koha::Patron
\&    and let DBIx do the job without further housekeeping.)
\&    Includes a move to deletedborrowers if move flag set.
\&
\&    Just like DBIx, the delete will only succeed when all entries could be
\&    deleted. Returns true or throws an exception.
.Ve
.PP
\fIfilter_by_expiration_date\fR
.IX Subsection "filter_by_expiration_date"
.PP
.Vb 1
\&    Koha::Patrons\->filter_by_expiration_date{{ days => $x });
\&
\&    Returns set of Koha patron objects expired $x days.
.Ve
.PP
\fIsearch_unsubscribed\fR
.IX Subsection "search_unsubscribed"
.PP
.Vb 1
\&    Koha::Patrons\->search_unsubscribed;
\&
\&    Returns a set of Koha patron objects for patrons that recently
\&    unsubscribed and are not locked (candidates for locking).
\&    Depends on UnsubscribeReflectionDelay.
.Ve
.PP
\fIsearch_anonymize_candidates\fR
.IX Subsection "search_anonymize_candidates"
.PP
.Vb 1
\&    Koha::Patrons\->search_anonymize_candidates({ locked => 1 });
\&
\&    Returns a set of Koha patron objects for patrons whose account is expired
\&    and locked (if parameter set). These are candidates for anonymizing.
\&    Depends on PatronAnonymizeDelay.
.Ve
.PP
\fIsearch_anonymized\fR
.IX Subsection "search_anonymized"
.PP
.Vb 1
\&    Koha::Patrons\->search_anonymized;
\&
\&    Returns a set of Koha patron objects for patron accounts that have been
\&    anonymized before and could be removed.
\&    Depends on PatronRemovalDelay.
.Ve
.PP
\fIlock\fR
.IX Subsection "lock"
.PP
.Vb 1
\&    Koha::Patrons\->search({ some filters })\->lock({ expire => 1, remove => 1 })
\&
\&    Lock the passed set of patron objects. Optionally expire and remove holds.
\&    Wrapper around Koha::Patron\->lock.
.Ve
.PP
\fIanonymize\fR
.IX Subsection "anonymize"
.PP
.Vb 1
\&    Koha::Patrons\->search({ some filters })\->anonymize();
\&
\&    Anonymize passed set of patron objects.
\&    Wrapper around Koha::Patron\->anonymize.
.Ve
.PP
\fIsearch_patrons_to_update_category\fR
.IX Subsection "search_patrons_to_update_category"
.PP
.Vb 7
\&    my $patrons = Koha::Patrons\->search_patrons_to_update_category( {
\&                      from          => $from_category,
\&                      fine_max      => $fine_max,
\&                      fine_min      => $fin_min,
\&                      too_young     => $too_young,
\&                      too_old      => $too_old,
\&                  });
.Ve
.PP
This method returns all patron who should be updated from one category to another meeting criteria:
.PP
from          \- borrower categorycode
fine_min      \- with fines totaling at least this amount
fine_max      \- with fines above this amount
too_young     \- if passed, select patrons who are under the age limit for the current category
too_old       \- if passed, select patrons who are over the age limit for the current category
.PP
\fIupdate_category_to\fR
.IX Subsection "update_category_to"
.PP
.Vb 3
\&    Koha::Patrons\->search\->update_category_to( {
\&            category   => $to_category,
\&        });
.Ve
.PP
Update supplied patrons from current category to another and take care of guarantor info.
To make sure all the conditions are met, the caller has the responsibility to
call search_patrons_to_update to filter the Koha::Patrons set
.PP
\fIfilter_by_attribute_type\fR
.IX Subsection "filter_by_attribute_type"
.PP
my \f(CW$patrons\fR = Koha::Patrons\->filter_by_attribute_type($attribute_type_code);
.PP
Return a Koha::Patrons set with patrons having the attribute defined.
.PP
\fIfilter_by_attribute_value\fR
.IX Subsection "filter_by_attribute_value"
.PP
my \f(CW$patrons\fR = Koha::Patrons\->filter_by_attribute_value($attribute_value);
.PP
Return a Koha::Patrons set with patrong having the attribute value passed in parameter.
.PP
\fIfilter_by_amount_owed\fR
.IX Subsection "filter_by_amount_owed"
.PP
.Vb 8
\&    Koha::Patrons\->filter_by_amount_owed(
\&        {
\&            less_than  => \*(Aq2.00\*(Aq,
\&            more_than  => \*(Aq0.50\*(Aq,
\&            debit_type => $debit_type_code,
\&            library    => $branchcode
\&        }
\&    );
.Ve
.PP
Returns patrons filtered by how much money they owe, between passed limits.
.PP
Optionally limit to debts of a particular debit_type or/and owed to a particular library.
.PP
arguments hashref
.IX Subsection "arguments hashref"
.IP "less_than (optional)  \- filter out patrons who owe less than Amount" 4
.IX Item "less_than (optional) - filter out patrons who owe less than Amount"
.PD 0
.IP "more_than (optional)  \- filter out patrons who owe more than Amount" 4
.IX Item "more_than (optional) - filter out patrons who owe more than Amount"
.IP "debit_type (optional) \- filter the amount owed by debit type" 4
.IX Item "debit_type (optional) - filter the amount owed by debit type"
.IP "library (optional)    \- filter the amount owed to a particular branch" 4
.IX Item "library (optional) - filter the amount owed to a particular branch"
.PD
.PP
\fIfilter_by_have_permission\fR
.IX Subsection "filter_by_have_permission"
.PP
.Vb 1
\&    my $patrons = Koha::Patrons\->search\->filter_by_have_permission(\*(Aqsuggestions.suggestions_manage\*(Aq);
\&
\&    my $patrons = Koha::Patrons\->search\->filter_by_have_permission(\*(Aqsuggestions\*(Aq);
.Ve
.PP
Filter patrons who have a given subpermission or the whole permission.
.PP
\fI_type\fR
.IX Subsection "_type"
.PP
\fIobject_class\fR
.IX Subsection "object_class"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
