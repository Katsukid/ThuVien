.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Token 3pm"
.TH Koha::Token 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Token \- Tokenizer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Koha::Token;
\&    my $tokenizer = Koha::Token\->new;
\&    my $token = $tokenizer\->generate({ length => 20 });
\&
\&    # safely generate a CSRF token (nonblocking)
\&    my $csrf_token = $tokenizer\->generate({
\&        type => \*(AqCSRF\*(Aq, id => $id, secret => $secret,
\&    });
\&
\&    # generate/check CSRF token with defaults and session id
\&    my $csrf_token = $tokenizer\->generate_csrf({ session_id => $x });
\&    my $result = $tokenizer\->check_csrf({
\&        session_id => $x, token => $token,
\&    });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    Designed for providing general tokens.
\&    Created due to the need for a nonblocking call to Bytes::Random::Secure
\&    when generating a CSRF token.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    Create object (via Class::Accessor).
.Ve
.SS "generate"
.IX Subsection "generate"
.Vb 7
\&    my $token = $tokenizer\->generate({ length => 20 });
\&    my $csrf_token = $tokenizer\->generate({
\&        type => \*(AqCSRF\*(Aq, id => $id, secret => $secret,
\&    });
\&    my $jwt = $tokenizer\->generate({
\&        type => \*(AqJWT, id => $id, secret => $secret,
\&    });
\&
\&    Generate several types of tokens. Now includes CSRF.
\&    For non\-CSRF tokens an optional pattern parameter overrides length.
\&    Room for future extension.
\&
\&    Pattern parameter could be write down using this subset of regular expressions:
\&    \ew    Alphanumeric + "_".
\&    \ed    Digits.
\&    \eW    Printable characters other than those in \ew.
\&    \eD    Printable characters other than those in \ed.
\&    .     Printable characters.
\&    []    Character classes.
\&    {}    Repetition.
\&    *     Same as {0,}.
\&    ?     Same as {0,1}.
\&    +     Same as {1,}.
.Ve
.SS "generate_csrf"
.IX Subsection "generate_csrf"
.Vb 3
\&    Like: generate({ type => \*(AqCSRF\*(Aq, ... })
\&    Note: id defaults to userid from context, secret to database password.
\&    session_id is mandatory; it is combined with id.
.Ve
.SS "generate_jwt"
.IX Subsection "generate_jwt"
.Vb 3
\&    Like: generate({ type => \*(AqJWT\*(Aq, ... })
\&    Note that JWT is designed to encode a structure but here we are actually only allowing a value
\&    that will be store in the key \*(Aqid\*(Aq.
.Ve
.SS "check"
.IX Subsection "check"
.Vb 3
\&    my $result = $tokenizer\->check({
\&        type => \*(AqCSRF\*(Aq, id => $id, token => $token,
\&    });
\&
\&    Check several types of tokens. Now includes CSRF.
\&    Room for future extension.
.Ve
.SS "check_csrf"
.IX Subsection "check_csrf"
.Vb 3
\&    Like: check({ type => \*(AqCSRF\*(Aq, ... })
\&    Note: id defaults to userid from context, secret to database password.
\&    session_id is mandatory; it is combined with id.
.Ve
.SS "check_jwt"
.IX Subsection "check_jwt"
.Vb 1
\&    Like: check({ type => \*(AqJWT\*(Aq, id => $id, token => $token })
\&
\&    Will return true if the token contains the passed id
.Ve
.SS "decode_jwt"
.IX Subsection "decode_jwt"
.Vb 1
\&    $tokenizer\->decode_jwt({ type => \*(AqJWT\*(Aq, token => $token })
\&
\&    Will return the value of the id stored in the token.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Marcel de Rooy, Rijksmuseum Amsterdam, The Netherlands
.Ve
