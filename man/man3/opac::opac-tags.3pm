.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "opac::opac-tags 3pm"
.TH opac::opac-tags 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
opac\-tags.pl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1TODO ::\s0 Description here
.PP
C4::Scrubber is used to remove all markup content from the sumitted text.
.SH "EXAMPLE AJAX POST PARAMETERS"
.IX Header "EXAMPLE AJAX POST PARAMETERS"
\&\s-1CGISESSID\s0	7c6288263107beb320f70f78fd767f56
newtag396	fire,+<a+href=\*(L"foobar.html\*(R">foobar</a>,+<img+src=\*(L"foo.jpg\*(R"+/>
.PP
So this request is trying to add 3 tags to biblio #396.  The \s-1CGISESSID\s0 is the same as that the browser would
typically communicate using cookies.  If it is valid, the server will split the value of \*(L"newtag396\*(R" and 
process the components for addition.  In this case the intended tags are:
	fire
	<a+href=\*(L"foobar.html\*(R">foobar</a>
	<img src=\*(L"foo.jpg\*(R" />
.PP
The first tag is acceptable.  The second will be scrubbed of markup, resulting in the tag \*(L"foobar\*(R".  
The third tag is all markup, and will be rejected.
.SH "EXAMPLE AJAX JSON response"
.IX Header "EXAMPLE AJAX JSON response"
response = {
	added: 2,
	deleted: 0,
	errors: 2,
	alerts: [
		 \s-1KOHA\s0.Tags.tag_message.scrubbed(\*(L"foobar\*(R"),
 		 \s-1KOHA\s0.Tags.tag_message.scrubbed_all_bad(\*(L"1\*(R"),
 	],
};
