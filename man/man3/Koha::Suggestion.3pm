.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Suggestion 3pm"
.TH Koha::Suggestion 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Suggestion \- Koha Suggestion object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIstore\fR
.IX Subsection "store"
.PP
Override the default store behavior so that new suggestions have
a suggesteddate of today
.PP
\fIlibrary\fR
.IX Subsection "library"
.PP
my \f(CW$library\fR = \f(CW$suggestion\fR\->library;
.PP
Returns the library of the suggestion (Koha::Library for branchcode field)
.PP
\fIsuggester\fR
.IX Subsection "suggester"
.PP
.Vb 1
\&    my $patron = $suggestion\->suggester
.Ve
.PP
Returns the \fIKoha::Patron\fR for the suggestion generator. \fIundef\fR is
returned if no suggester is linked.
.PP
\fImanager\fR
.IX Subsection "manager"
.PP
my \f(CW$manager\fR = \f(CW$suggestion\fR\->manager;
.PP
Returns the manager of the suggestion (Koha::Patron for managedby field)
.PP
\fIrejecter\fR
.IX Subsection "rejecter"
.PP
my \f(CW$rejecter\fR = \f(CW$suggestion\fR\->rejecter;
.PP
Returns the rejecter of the suggestion (Koha::Patron for rejectebby field)
.PP
\fIlast_modifier\fR
.IX Subsection "last_modifier"
.PP
my \f(CW$last_modifier\fR = \f(CW$suggestion\fR\->last_modifier;
.PP
Returns the librarian who last modified the suggestion (Koha::Patron for lastmodificationby field)
.PP
\fIfund\fR
.IX Subsection "fund"
.PP
my \f(CW$fund\fR = \f(CW$suggestion\fR\->fund;
.PP
Return the fund associated to the suggestion
.PP
\fItype\fR
.IX Subsection "type"
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Patron object
on the \s-1API.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
