.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "misc::cronjobs::stockrotation 3pm"
.TH misc::cronjobs::stockrotation 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
stockrotation.pl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    \-\-[a]dmin\-email    An address to which email reports should also be sent
\&    \-\-[b]ranchcode     Select branch to report on for \*(Aqemail\*(Aq reports (default: all)
\&    \-\-e[x]ecute        Actually perform stockrotation housekeeping
\&    \-\-[r]eport         Select either \*(Aqfull\*(Aq or \*(Aqemail\*(Aq
\&    \-\-[S]end\-all       Send email reports even if the report body is empty
\&    \-\-[s]end\-email     Send reports by email
\&    \-\-[h]elp           Display this help message
.Ve
.PP
Cron script implementing scheduled stockrotation functionality.
.PP
By default this script merely reports on the current status of the
stockrotation subsystem.  In order to actually place items in transit, the
script must be run with the `execute` argument.
.PP
`report` allows you to select the type of report that will be emitted. It's
set to 'full' by default.  If the `email` report is selected, you can use the
`branchcode` parameter to specify which branch's report you would like to see.
The default is 'all'.
.PP
`admin\-email` is an additional email address to which we will send all email
reports in addition to sending them to branch email addresses.
.PP
`send\-email` will cause the script to send reports by email, and `send\-all`
will cause even reports with an empty body to be sent.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to move items from one stockrotationstage to the next,
if they are elible for processing.
.PP
it should be run from cron like:
.PP
.Vb 1
\&   stockrotation.pl \-\-report email \-\-send\-email \-\-execute
.Ve
.PP
Prior to that you can run the script from the command line without the
\&\-\-execute and \-\-send\-email parameters to see what reports the script would
generate in 'production' mode.  This is immensely useful for testing, or for
getting to understand how the stockrotation module works: you can set up
different scenarios, and then \*(L"query\*(R" the system on what it would do.
.PP
Normally you would want to run this script once per day, probably around
midnight-ish to move any stockrotationitems along their rotas and to generate
the email reports for branch libraries.
.PP
Each library will receive a report with \*(L"items of interest\*(R" for them for
today's rota checks.  Each item there will be an item that should, according
to Koha, be located on the shelves of that branch, and which should be picked
up and checked in.  The item will either:
\&\- have been placed in transit to their new stage library;
\&\- have been placed in transit to be returned to their current stage library;
\&\- have just been added to a rota and will already be at the correct library;
.PP
In the last case the item will be checked in and no message will pop up.  In
the other cases a message will pop up requesting the item be posted to their
new branch.
.SS "What does the \-\-execute flag do?"
.IX Subsection "What does the --execute flag do?"
To understand this, you will need to know a little bit about the design of
this script and the stockrotation modules.
.PP
This script operates in 3 phases: first it walks the graph of rotas, stages
and items.  For each active rota, it investigates the items in each stage and
determines whether action is required.  It does not perform any actions, it
just \*(L"sieves\*(R" all items on active rotas into \*(L"actionable\*(R" and \*(L"non-actionable\*(R"
baskets.  We can use these baskets to perform actions against the items, or to
generate reports.
.PP
During the second phase this script then loops through the actionable baskets,
and performs the relevant action (initiate, repatriate, advance) on each item.
.PP
Finally, during the third phase we revisit the original baskets and we compile
reports (for instance per branch email reports).
.PP
When the script is run without the \*(L"\-\-execute\*(R" flag, we perform phase 1, skip
phase 2 and move straight onto phase 3.
.PP
With the \*(L"\-\-execute\*(R" flag we also perform the database operations.
.PP
So with or without the flag, the report will look the same (except for the \*(L"No
database updates have been performed.\*(R").
.SS "Helpers"
.IX Subsection "Helpers"
\fIexecute\fR
.IX Subsection "execute"
.PP
.Vb 1
\&  undef = execute($report);
.Ve
.PP
Perform the database updates, within a transaction, that are reported as
needing to be performed by \f(CW$REPORT\fR.
.PP
\&\f(CW$REPORT\fR should be the return value of an invocation of `investigate`.
.PP
This procedure \s-1WILL\s0 mess with your database.
.PP
\fIreport_full\fR
.IX Subsection "report_full"
.PP
.Vb 1
\&  my $full_report = report_full($report);
.Ve
.PP
Return an arrayref containing a string containing a detailed report about the
current state of the stockrotation subsystem.
.PP
\&\f(CW$REPORT\fR should be the return value of `investigate`.
.PP
No data in the database is manipulated by this procedure.
.PP
\fIreport_by_branch\fR
.IX Subsection "report_by_branch"
.PP
.Vb 1
\&  my $email_report = report_by_branch($report, [$branch]);
.Ve
.PP
Returns an arrayref containing a header string, with basic report information,
and any number of 'per_branch' strings, containing a detailed report about the
current state of the stockrotation subsystem, from the perspective of those
individual branches.
.ie n .IP "$report should be the return value of `investigate`" 2
.el .IP "\f(CW$report\fR should be the return value of `investigate`" 2
.IX Item "$report should be the return value of `investigate`"
.PD 0
.ie n .IP "$branch is optional and should be either 0 (to indicate 'all'), or a specific Koha::Library object." 2
.el .IP "\f(CW$branch\fR is optional and should be either 0 (to indicate 'all'), or a specific Koha::Library object." 2
.IX Item "$branch is optional and should be either 0 (to indicate 'all'), or a specific Koha::Library object."
.PD
.PP
No data in the database is manipulated by this procedure.
.PP
\fI_report_per_branch\fR
.IX Subsection "_report_per_branch"
.PP
.Vb 1
\&  my $branch_string = _report_per_branch($branch_details);
.Ve
.PP
return a string containing details about the stockrotation items and their
status for the branch identified by \f(CW$BRANCHCODE\fR.
.PP
This helper procedure is only used from within `report_by_branch`.
.PP
No data in the database is manipulated by this procedure.
.PP
\fI_print_item\fR
.IX Subsection "_print_item"
.PP
.Vb 1
\&  my $string = _print_item($item_section);
.Ve
.PP
Return a string containing an overview about \f(CW$ITEM_SECTION\fR.
.PP
This helper procedure is only used from within `report_full`.
.PP
No data in the database is manipulated by this procedure.
.PP
\fIemit\fR
.IX Subsection "emit"
.PP
.Vb 1
\&  undef = emit($params);
.Ve
.PP
\&\f(CW$PARAMS\fR should be a hashref of the following format:
  admin_email: the address to which a copy of all reports should be sent.
  execute: the flag indicating whether we performed db updates
  send_all: the flag indicating whether we should send even empty reports
  send_email: the flag indicating whether we want to emit to stdout or email
  report: the data structure returned from one of the report procedures
.PP
No data in the database is manipulated by this procedure.
.PP
The return value is unspecified: we simply emit a message as a side-effect or
die.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Sassmannshausen <alex.sassmannshausen@ptfs\-europe.com>
