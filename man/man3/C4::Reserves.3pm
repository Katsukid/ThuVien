.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Reserves 3pm"
.TH C4::Reserves 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Reserves \- Koha functions for dealing with reservation.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Reserves;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modules provides somes functions to deal with reservations.
.PP
.Vb 10
\&  Reserves are stored in reserves table.
\&  The following columns contains important values :
\&  \- priority >0      : then the reserve is at 1st stage, and not yet affected to any item.
\&             =0      : then the reserve is being dealed
\&  \- found : NULL         : means the patron requested the 1st available, and we haven\*(Aqt chosen the item
\&            T(ransit)    : the reserve is linked to an item but is in transit to the pickup branch
\&            W(aiting)    : the reserve is linked to an item, is at the pickup branch, and is waiting on the hold shelf
\&            F(inished)   : the reserve has been completed, and is done
\&            P(rocessing) : reserved item has been returned using self\-check machine and reserve needs to be confirmed
\&                           by librarian before notice is send and status changed to waiting.
\&                           Applicable only if HoldsNeedProcessingSIP system preference is set.
\&  \- itemnumber : empty : the reserve is still unaffected to an item
\&                 filled: the reserve is attached to an item
\&  The complete workflow is :
\&  ==== 1st use case ====
\&  patron request a document, 1st available :                      P >0, F=NULL, I=NULL
\&  a library having it run "transfertodo", and clic on the list
\&         if there is no transfer to do, the reserve waiting
\&         patron can pick it up                                    P =0, F=W,    I=filled
\&         if there is a transfer to do, write in branchtransfer    P =0, F=T,    I=filled
\&           The pickup library receive the book, it check in       P =0, F=W,    I=filled
\&  The patron borrow the book                                      P =0, F=F,    I=filled
\&
\&  ==== 2nd use case ====
\&  patron requests a document, a given item,
\&    If pickup is holding branch                                   P =0, F=W,   I=filled
\&    If transfer needed, write in branchtransfer                   P =0, F=T,    I=filled
\&        The pickup library receive the book, it checks it in      P =0, F=W,    I=filled
\&  The patron borrow the book                                      P =0, F=F,    I=filled
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "AddReserve"
.IX Subsection "AddReserve"
.Vb 10
\&    AddReserve(
\&        {
\&            branchcode       => $branchcode,
\&            borrowernumber   => $borrowernumber,
\&            biblionumber     => $biblionumber,
\&            priority         => $priority,
\&            reservation_date => $reservation_date,
\&            expiration_date  => $expiration_date,
\&            notes            => $notes,
\&            title            => $title,
\&            itemnumber       => $itemnumber,
\&            found            => $found,
\&            itemtype         => $itemtype,
\&            item_group_id    => $item_group_id
\&        }
\&    );
.Ve
.PP
Adds reserve and generates \s-1HOLDPLACED\s0 message.
.PP
The following tables are available witin the \s-1HOLDPLACED\s0 message:
.PP
.Vb 6
\&    branches
\&    borrowers
\&    biblio
\&    biblioitems
\&    items
\&    reserves
.Ve
.SS "CanBookBeReserved"
.IX Subsection "CanBookBeReserved"
.Vb 2
\&  $canReserve = &CanBookBeReserved($borrowernumber, $biblionumber, $branchcode, $params)
\&  if ($canReserve eq \*(AqOK\*(Aq) { #We can reserve this Item! }
\&
\&  $params are passed directly through to CanItemBeReserved
.Ve
.PP
See \fBCanItemBeReserved()\fR for possible return values.
.SS "CanItemBeReserved"
.IX Subsection "CanItemBeReserved"
.Vb 2
\&  $canReserve = &CanItemBeReserved($patron, $item, $branchcode, $params)
\&  if ($canReserve\->{status} eq \*(AqOK\*(Aq) { #We can reserve this Item! }
\&
\&  current params are:
\&  \*(Aqignore_hold_counts\*(Aq \- we use this routine to check if an item can fill a hold \- on this case we
\&  should not check if there are too many holds as we only care about reservability
.Ve
.PP
\&\f(CW@RETURNS\fR { status => \s-1OK\s0 },              if the Item can be reserved.
         { status => ageRestricted },   if the Item is age restricted for this borrower.
         { status => damaged },         if the Item is damaged.
         { status => cannotReserveFromOtherBranches }, if syspref 'canreservefromotherbranches' is \s-1OK.\s0
         { status => branchNotInHoldGroup }, if borrower home library is not in hold group, and holds are only allowed from hold groups.
         { status => tooManyReserves, limit => \f(CW$limit\fR }, if the borrower has exceeded their maximum reserve amount.
         { status => notReservable },   if holds on this item are not allowed
         { status => libraryNotFound },   if given branchcode is not an existing library
         { status => libraryNotPickupLocation },   if given branchcode is not configured to be a pickup location
         { status => cannotBeTransferred }, if branch transfer limit applies on given item and branchcode
         { status => pickupNotInHoldGroup }, pickup location is not in hold group, and pickup locations are only allowed from hold groups.
         { status => recall }, if the borrower has already placed a recall on this item
.SS "CanReserveBeCanceledFromOpac"
.IX Subsection "CanReserveBeCanceledFromOpac"
.Vb 1
\&    $number = CanReserveBeCanceledFromOpac($reserve_id, $borrowernumber);
\&
\&    returns 1 if reserve can be cancelled by user from OPAC.
\&    First check if reserve belongs to user, next checks if reserve is not in
\&    transfer or waiting status
.Ve
.SS "GetOtherReserves"
.IX Subsection "GetOtherReserves"
.Vb 1
\&  ($messages,$nextreservinfo)=$GetOtherReserves(itemnumber);
.Ve
.PP
Check queued list of this document and check if this document must be transferred
.SS "ChargeReserveFee"
.IX Subsection "ChargeReserveFee"
.Vb 1
\&    $fee = ChargeReserveFee( $borrowernumber, $fee, $title );
\&
\&    Charge the fee for a reserve (if $fee > 0)
.Ve
.SS "GetReserveFee"
.IX Subsection "GetReserveFee"
.Vb 1
\&    $fee = GetReserveFee( $borrowernumber, $biblionumber );
\&
\&    Calculate the fee for a reserve (if applicable).
.Ve
.SS "GetReserveStatus"
.IX Subsection "GetReserveStatus"
.Vb 1
\&  $reservestatus = GetReserveStatus($itemnumber);
.Ve
.PP
Takes an itemnumber and returns the status of the reserve placed on it.
If several reserves exist, the reserve with the lower priority is given.
.SS "CheckReserves"
.IX Subsection "CheckReserves"
.Vb 2
\&  ($status, $matched_reserve, $possible_reserves) = &CheckReserves($item);
\&  ($status, $matched_reserve, $possible_reserves) = &CheckReserves($item, $lookahead);
.Ve
.PP
Find a book in the reserves.
.PP
\&\f(CW$item\fR is the book's item.
\&\f(CW$lookahead\fR is the number of days to look in advance for future reserves.
.PP
As I understand it, \f(CW&CheckReserves\fR looks for the given item in the
reserves. If it is found, that's a match, and \f(CW$status\fR is set to
\&\f(CW\*(C`Waiting\*(C'\fR.
.PP
Otherwise, it finds the most important item in the reserves with the
same biblio number as this book (I'm not clear on this) and returns it
with \f(CW$status\fR set to \f(CW\*(C`Reserved\*(C'\fR.
.PP
\&\f(CW&CheckReserves\fR returns a two-element list:
.PP
\&\f(CW$status\fR is either \f(CW\*(C`Waiting\*(C'\fR, \f(CW\*(C`Reserved\*(C'\fR (see above), or 0.
.PP
\&\f(CW$reserve\fR is the reserve item that matched. It is a
reference-to-hash whose keys are mostly the fields of the reserves
table in the Koha database.
.SS "CancelExpiredReserves"
.IX Subsection "CancelExpiredReserves"
.Vb 1
\&  CancelExpiredReserves();
.Ve
.PP
Cancels all reserves with an expiration date from before today.
.SS "AutoUnsuspendReserves"
.IX Subsection "AutoUnsuspendReserves"
.Vb 1
\&  AutoUnsuspendReserves();
.Ve
.PP
Unsuspends all suspended reserves with a suspend_until date from before today.
.SS "ModReserve"
.IX Subsection "ModReserve"
.Vb 6
\&  ModReserve({ rank => $rank,
\&               reserve_id => $reserve_id,
\&               branchcode => $branchcode
\&               [, itemnumber => $itemnumber ]
\&               [, biblionumber => $biblionumber, $borrowernumber => $borrowernumber ]
\&              });
.Ve
.PP
Change a hold request's priority or cancel it.
.PP
\&\f(CW$rank\fR specifies the effect of the change.  If \f(CW$rank\fR
is 'n', nothing happens.  This corresponds to leaving a
request alone when changing its priority in the holds queue
for a bib.
.PP
If \f(CW$rank\fR is 'del', the hold request is cancelled.
.PP
If \f(CW$rank\fR is an integer greater than zero, the priority of
the request is set to that value.  Since priority != 0 means
that the item is not waiting on the hold shelf, setting the
priority to a non-zero value also sets the request's found
status and waiting date to \s-1NULL.\s0
.PP
If the hold is 'found' (waiting, in-transit, processing) the
only field that can be updated is the expiration date.
.PP
The optional \f(CW$itemnumber\fR parameter is used only when
\&\f(CW$rank\fR is a non-zero integer; if supplied, the itemnumber
of the hold request is set accordingly; if omitted, the itemnumber
is cleared.
.PP
\&\fB\s-1FIXME:\s0\fR Note that the forgoing can have the effect of causing
item-level hold requests to turn into title-level requests.  This
will be fixed once reserves has separate columns for requested
itemnumber and supplying itemnumber.
.SS "ModReserveStatus"
.IX Subsection "ModReserveStatus"
.Vb 1
\&  &ModReserveStatus($itemnumber, $newstatus);
.Ve
.PP
Update the reserve status for the active (priority=0) reserve.
.PP
\&\f(CW$itemnumber\fR is the itemnumber the reserve is on
.PP
\&\f(CW$newstatus\fR is the new status.
.SS "ModReserveAffect"
.IX Subsection "ModReserveAffect"
.Vb 1
\&  &ModReserveAffect($itemnumber,$borrowernumber,$diffBranchSend,$reserve_id, $desk_id, $notify_library);
.Ve
.PP
This function affect an item and a status for a given reserve, either fetched directly
by record_id, or by borrowernumber and itemnumber or biblionumber. If only biblionumber
is given, only first reserve returned is affected, which is ok for anything but
multi-item holds.
.PP
if \f(CW$transferToDo\fR is not set, then the status is set to \*(L"Waiting\*(R" as well.
otherwise, a transfer is on the way, and the end of the transfer will
take care of the waiting status
.PP
This function also removes any entry of the hold in holds queue table.
.SS "ModReserveCancelAll"
.IX Subsection "ModReserveCancelAll"
.Vb 1
\&  ($messages,$nextreservinfo) = &ModReserveCancelAll($itemnumber,$borrowernumber,$reason);
.Ve
.PP
function to cancel reserv,check other reserves, and transfer document if it's necessary
.SS "ModReserveMinusPriority"
.IX Subsection "ModReserveMinusPriority"
.Vb 1
\&  &ModReserveMinusPriority($itemnumber,$borrowernumber,$biblionumber)
.Ve
.PP
Reduce the values of queued list
.SS "IsAvailableForItemLevelRequest"
.IX Subsection "IsAvailableForItemLevelRequest"
.Vb 1
\&  my $is_available = IsAvailableForItemLevelRequest( $item_record, $borrower_record, $pickup_branchcode );
.Ve
.PP
Checks whether a given item record is available for an
item-level hold request.  An item is available if
.PP
* it is not lost \s-1AND\s0
* it is not damaged \s-1AND\s0
* it is not withdrawn \s-1AND\s0
* a waiting or in transit reserve is placed on
* does not have a not for loan value > 0
.PP
Need to check the issuingrules onshelfholds column,
if this is set items on the shelf can be placed on hold
.PP
Note that \fBIsAvailableForItemLevelRequest()\fR does not
check if the staff operator is authorized to place
a request on the item \- in particular,
this routine does not check IndependentBranches
and canreservefromotherbranches.
.PP
Note also that this subroutine does not checks smart
rules limits for item by reservesallowed/holds_per_record
values, this complemented in calling code with calls and
checks with CanItemBeReserved or CanBookBeReserved.
.SS "ItemsAnyAvailableAndNotRestricted"
.IX Subsection "ItemsAnyAvailableAndNotRestricted"
.Vb 1
\&  ItemsAnyAvailableAndNotRestricted( { biblionumber => $biblionumber, patron => $patron });
.Ve
.PP
This function checks all items for specified biblionumber (numeric) against patron (object)
and returns true (1) if at least one item available for loan/check out/present/not held
and also checks other parameters logic which not restricts item for hold at all (for ex.
AllowHoldsOnDamagedItems or 'holdallowed' own/sibling library)
.SS "AlterPriority"
.IX Subsection "AlterPriority"
.Vb 1
\&  AlterPriority( $where, $reserve_id, $prev_priority, $next_priority, $first_priority, $last_priority );
.Ve
.PP
This function changes a reserve's priority up, down, to the top, or to the bottom.
Input: \f(CW$where\fR is 'up', 'down', 'top' or 'bottom'. Biblionumber, Date reserve was placed
.SS "ToggleLowestPriority"
.IX Subsection "ToggleLowestPriority"
.Vb 1
\&  ToggleLowestPriority( $borrowernumber, $biblionumber );
.Ve
.PP
This function sets the lowestPriority field to true if is false, and false if it is true.
.SS "ToggleSuspend"
.IX Subsection "ToggleSuspend"
.Vb 1
\&  ToggleSuspend( $reserve_id );
.Ve
.PP
This function sets the suspend field to true if is false, and false if it is true.
If the reserve is currently suspended with a suspend_until date, that date will
be cleared when it is unsuspended.
.SS "SuspendAll"
.IX Subsection "SuspendAll"
.Vb 6
\&  SuspendAll(
\&      borrowernumber   => $borrowernumber,
\&      [ biblionumber   => $biblionumber, ]
\&      [ suspend_until  => $suspend_until, ]
\&      [ suspend        => $suspend ]
\&  );
\&
\&  This function accepts a set of hash keys as its parameters.
\&  It requires either borrowernumber or biblionumber, or both.
\&
\&  suspend_until is wholly optional.
.Ve
.SS "_FixPriority"
.IX Subsection "_FixPriority"
.Vb 5
\&  _FixPriority({
\&    reserve_id => $reserve_id,
\&    [rank => $rank,]
\&    [ignoreSetLowestRank => $ignoreSetLowestRank]
\&  });
\&
\&  or
\&
\&  _FixPriority({ biblionumber => $biblionumber});
.Ve
.PP
This routine adjusts the priority of a hold request and holds
on the same bib.
.PP
In the first form, where a reserve_id is passed, the priority of the
hold is set to supplied rank, and other holds for that bib are adjusted
accordingly.  If the rank is \*(L"del\*(R", the hold is cancelled.  If no rank
is supplied, all of the holds on that bib have their priority adjusted
as if the second form had been used.
.PP
In the second form, where a biblionumber is passed, the holds on that
bib (that are not captured) are sorted in order of increasing priority,
then have reserves.priority set so that the first non-captured hold
has its priority set to 1, the second non-captured hold has its priority
set to 2, and so forth.
.PP
In both cases, holds that have the lowestPriority flag on are have their
priority adjusted to ensure that they remain at the end of the line.
.PP
Note that the ignoreSetLowestRank parameter is meant to be used only
when _FixPriority calls itself.
.SS "_Findgroupreserve"
.IX Subsection "_Findgroupreserve"
.Vb 1
\&  @results = &_Findgroupreserve($biblionumber, $itemnumber, $lookahead, $ignore_borrowers);
.Ve
.PP
Looks for a holds-queue based item-specific match first, then for a holds-queue title-level match, returning the
first match found.  If neither, then we look for non-holds-queue based holds.
Lookahead is the number of days to look in advance.
.PP
\&\f(CW&_Findgroupreserve\fR returns :
\&\f(CW@results\fR is an array of references-to-hash whose keys are mostly
fields from the reserves table of the Koha database, plus
\&\f(CW\*(C`biblioitemnumber\*(C'\fR.
.PP
This routine with either return:
1 \- Item specific holds from the holds queue
2 \- Title level holds from the holds queue
3 \- All holds for this biblionumber
.PP
All return values will respect any borrowernumbers passed as arrayref in \f(CW$ignore_borrowers\fR
.SS "_koha_notify_reserve"
.IX Subsection "_koha_notify_reserve"
.Vb 1
\&  _koha_notify_reserve( $hold\->reserve_id );
.Ve
.PP
Sends a notification to the patron that their hold has been filled (through
ModReserveAffect)
.PP
The letter code for this notice may be found using the following query:
.PP
.Vb 4
\&    select distinct letter_code
\&    from message_transports
\&    inner join message_attributes using (message_attribute_id)
\&    where message_name = \*(AqHold_Filled\*(Aq
.Ve
.PP
This will probably sipmly be '\s-1HOLD\s0', but because it is defined in the database,
it is subject to addition or change.
.PP
The following tables are availalbe witin the notice:
.PP
.Vb 6
\&    branches
\&    borrowers
\&    biblio
\&    biblioitems
\&    reserves
\&    items
.Ve
.SS "_koha_notify_hold_changed"
.IX Subsection "_koha_notify_hold_changed"
.Vb 1
\&  _koha_notify_hold_changed( $hold_object );
.Ve
.SS "_ShiftPriority"
.IX Subsection "_ShiftPriority"
.Vb 1
\&  $new_priority = _ShiftPriority( $biblionumber, $priority );
.Ve
.PP
This increments the priority of all reserves after the one
with either the lowest date after \f(CW$reservedate\fR
or the lowest priority after \f(CW$priority\fR.
.PP
It effectively makes room for a new reserve to be inserted with a certain
priority, which is returned.
.PP
This is most useful when the reservedate can be set by the user.  It allows
the new reserve to be placed before other reserves that have a later
reservedate.  Since priority also is set by the form in reserves/request.pl
the sub accounts for that too.
.SS "MoveReserve"
.IX Subsection "MoveReserve"
.Vb 1
\&  MoveReserve( $itemnumber, $borrowernumber, $cancelreserve )
.Ve
.PP
Use when checking out an item to handle reserves
If \f(CW$cancelreserve\fR boolean is set to true, it will remove existing reserve
.SS "MergeHolds"
.IX Subsection "MergeHolds"
.Vb 1
\&  MergeHolds($dbh,$to_biblio, $from_biblio);
.Ve
.PP
This shifts the holds from \f(CW$from_biblio\fR to \f(CW$to_biblio\fR and reorders them by the date they were placed
.SS "RevertWaitingStatus"
.IX Subsection "RevertWaitingStatus"
.Vb 1
\&  RevertWaitingStatus({ itemnumber => $itemnumber });
\&
\&  Reverts a \*(Aqwaiting\*(Aq hold back to a regular hold with a priority of 1.
\&
\&  Caveat: Any waiting hold fixed with RevertWaitingStatus will be an
\&          item level hold, even if it was only a bibliolevel hold to
\&          begin with. This is because we can no longer know if a hold
\&          was item\-level or bib\-level after a hold has been set to
\&          waiting status.
.Ve
.SS "ReserveSlip"
.IX Subsection "ReserveSlip"
ReserveSlip(
    {
        branchcode     => \f(CW$branchcode\fR,
        borrowernumber => \f(CW$borrowernumber\fR,
        biblionumber   => \f(CW$biblionumber\fR,
        [ itemnumber   => \f(CW$itemnumber\fR, ]
        [ barcode      => \f(CW$barcode\fR, ]
    }
  )
.PP
Returns letter hash ( see C4::Letters::GetPreparedLetter ) or undef
.PP
The letter code will be \s-1HOLD_SLIP,\s0 and the following tables are
available within the slip:
.PP
.Vb 6
\&    reserves
\&    branches
\&    borrowers
\&    biblio
\&    biblioitems
\&    items
.Ve
.SS "GetReservesControlBranch"
.IX Subsection "GetReservesControlBranch"
.Vb 1
\&  my $reserves_control_branch = GetReservesControlBranch($item, $borrower);
\&
\&  Return the branchcode to be used to determine which reserves
\&  policy applies to a transaction.
\&
\&  C<$item> is a hashref for an item. Only \*(Aqhomebranch\*(Aq is used.
\&
\&  C<$borrower> is a hashref to borrower. Only \*(Aqbranchcode\*(Aq is used.
.Ve
.SS "CalculatePriority"
.IX Subsection "CalculatePriority"
.Vb 1
\&    my $p = CalculatePriority($biblionumber, $resdate);
.Ve
.PP
Calculate priority for a new reserve on biblionumber, placing it at
the end of the line of all holds whose start date falls before
the current system time and that are neither on the hold shelf
or in transit.
.PP
The reserve date parameter is optional; if it is supplied, the
priority is based on the set of holds whose start date falls before
the parameter value.
.PP
After calculation of this priority, it is recommended to call
_ShiftPriority. Note that this is currently done in
AddReserves.
.SS "IsItemOnHoldAndFound"
.IX Subsection "IsItemOnHoldAndFound"
.Vb 1
\&    my $bool = IsItemFoundHold( $itemnumber );
\&
\&    Returns true if the item is currently on hold
\&    and that hold has a non\-null found status ( W, T, etc. )
.Ve
.SS "GetMaxPatronHoldsForRecord"
.IX Subsection "GetMaxPatronHoldsForRecord"
my \f(CW$holds_per_record\fR = ReservesControlBranch( \f(CW$borrowernumber\fR, \f(CW$biblionumber\fR );
.PP
For multiple holds on a given record for a given patron, the max
number of record level holds that a patron can be placed is the highest
value of the holds_per_record rule for each item if the record for that
patron. This subroutine finds and returns the highest holds_per_record
rule value for a given patron id and record id.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
