.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::ImportBatch 3pm"
.TH C4::ImportBatch 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::ImportBatch \- manage batches of imported MARC records
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::ImportBatch;
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetZ3950BatchId"
.IX Subsection "GetZ3950BatchId"
.Vb 1
\&  my $batchid = GetZ3950BatchId($z3950server);
.Ve
.PP
Retrieves the \s-1ID\s0 of the import batch for the Z39.50
reservoir for the given target.  If necessary,
creates the import batch.
.SS "GetWebserviceBatchId"
.IX Subsection "GetWebserviceBatchId"
.Vb 1
\&  my $batchid = GetWebserviceBatchId();
.Ve
.PP
Retrieves the \s-1ID\s0 of the import batch for webservice.
If necessary, creates the import batch.
.SS "GetImportRecordMarc"
.IX Subsection "GetImportRecordMarc"
.Vb 1
\&  my ($marcblob, $encoding) = GetImportRecordMarc($import_record_id);
.Ve
.SS "AddImportBatch"
.IX Subsection "AddImportBatch"
.Vb 1
\&  my $batch_id = AddImportBatch($params_hash);
.Ve
.SS "GetImportBatch"
.IX Subsection "GetImportBatch"
.Vb 1
\&  my $row = GetImportBatch($batch_id);
.Ve
.PP
Retrieve a hashref of an import_batches row.
.SS "AddBiblioToBatch"
.IX Subsection "AddBiblioToBatch"
.Vb 2
\&  my $import_record_id = AddBiblioToBatch($batch_id, $record_sequence, 
\&                $marc_record, $encoding, $update_counts);
.Ve
.SS "AddAuthToBatch"
.IX Subsection "AddAuthToBatch"
.Vb 2
\&  my $import_record_id = AddAuthToBatch($batch_id, $record_sequence,
\&                $marc_record, $encoding, $update_counts, [$marc_type]);
.Ve
.SS "BatchStageMarcRecords"
.IX Subsection "BatchStageMarcRecords"
( \f(CW$batch_id\fR, \f(CW$num_records\fR, \f(CW$num_items\fR, \f(CW@invalid_records\fR ) =
  BatchStageMarcRecords(
    \f(CW$record_type\fR,                \f(CW$encoding\fR,
    \f(CW$marc_records\fR,               \f(CW$file_name\fR,
    \f(CW$marc_modification_template\fR, \f(CW$comments\fR,
    \f(CW$branch_code\fR,                \f(CW$parse_items\fR,
    \f(CW$leave_as_staging\fR,           \f(CW$progress_interval\fR,
    \f(CW$progress_callback\fR
  );
.SS "AddItemsToImportBiblio"
.IX Subsection "AddItemsToImportBiblio"
.Vb 2
\&  my @import_items_ids = AddItemsToImportBiblio($batch_id, 
\&                $import_record_id, $marc_record, $update_counts);
.Ve
.SS "BatchFindDuplicates"
.IX Subsection "BatchFindDuplicates"
.Vb 2
\&  my $num_with_matches = BatchFindDuplicates($batch_id, $matcher,
\&             $max_matches, $progress_interval, $progress_callback);
.Ve
.PP
Goes through the records loaded in the batch and attempts to 
find duplicates for each one.  Sets the matching status 
of each record to \*(L"no_match\*(R" or \*(L"auto_match\*(R" as appropriate.
.PP
The \f(CW$max_matches\fR parameter is optional; if it is not supplied,
it defaults to 10.
.PP
The \f(CW$progress_interval\fR and \f(CW$progress_callback\fR parameters are 
optional; if both are supplied, the sub referred to by
\&\f(CW$progress_callback\fR will be invoked every \f(CW$progress_interval\fR
records using the number of records processed as the 
singular argument.
.SS "BatchCommitRecords"
.IX Subsection "BatchCommitRecords"
.Vb 2
\&  Takes a hashref containing params for committing the batch \- optional parameters \*(Aqprogress_interval\*(Aq and
\&  \*(Aqprogress_callback\*(Aq will define code called every X records.
\&
\&  my ($num_added, $num_updated, $num_items_added, $num_items_replaced, $num_items_errored, $num_ignored) =
\&        BatchCommitRecords({
\&            batch_id  => $batch_id,
\&            framework => $framework,
\&            overlay_framework => $overlay_framework,
\&            progress_interval => $progress_interval,
\&            progress_callback => $progress_callback,
\&            skip_intermediate_commit => $skip_intermediate_commit
\&        });
\&
\&    Parameter skip_intermediate_commit does what is says.
.Ve
.SS "_batchCommitItems"
.IX Subsection "_batchCommitItems"
.Vb 2
\&  ($num_items_added, $num_items_errored) = 
\&         _batchCommitItems($import_record_id, $biblionumber, [$action, $biblioitemnumber]);
.Ve
.PP
Private function for batch committing item changes. We do not trigger a re-index here, that is left to the caller.
.SS "BatchRevertRecords"
.IX Subsection "BatchRevertRecords"
.Vb 2
\&  my ($num_deleted, $num_errors, $num_reverted, $num_items_deleted, 
\&      $num_ignored) = BatchRevertRecords($batch_id);
.Ve
.SS "BatchRevertItems"
.IX Subsection "BatchRevertItems"
.Vb 1
\&  my $num_items_deleted = BatchRevertItems($import_record_id, $biblionumber);
.Ve
.SS "CleanBatch"
.IX Subsection "CleanBatch"
.Vb 1
\&  CleanBatch($batch_id)
.Ve
.PP
Deletes all staged records from the import batch
and sets the status of the batch to 'cleaned'.  Note
that deleting a stage record does *not* affect
any record that has been committed to the database.
.SS "DeleteBatch"
.IX Subsection "DeleteBatch"
.Vb 1
\&  DeleteBatch($batch_id)
.Ve
.PP
Deletes the record from the database. This can only be done
once the batch has been cleaned.
.SS "GetAllImportBatches"
.IX Subsection "GetAllImportBatches"
.Vb 1
\&  my $results = GetAllImportBatches();
.Ve
.PP
Returns a references to an array of hash references corresponding
to all import_batches rows (of batch_type 'batch'), sorted in 
ascending order by import_batch_id.
.SS "GetStagedWebserviceBatches"
.IX Subsection "GetStagedWebserviceBatches"
.Vb 1
\&  my $batch_ids = GetStagedWebserviceBatches();
.Ve
.PP
Returns a references to an array of batch id's
of batch_type 'webservice' that are not imported
.SS "GetImportBatchRangeDesc"
.IX Subsection "GetImportBatchRangeDesc"
.Vb 1
\&  my $results = GetImportBatchRangeDesc($offset, $results_per_group);
.Ve
.PP
Returns a reference to an array of hash references corresponding to
import_batches rows (sorted in descending order by import_batch_id)
start at the given offset.
.SS "GetItemNumbersFromImportBatch"
.IX Subsection "GetItemNumbersFromImportBatch"
.Vb 1
\&  my @itemsnos = GetItemNumbersFromImportBatch($batch_id);
.Ve
.SS "GetNumberOfImportBatches"
.IX Subsection "GetNumberOfImportBatches"
.Vb 1
\&  my $count = GetNumberOfImportBatches();
.Ve
.SS "GetImportBiblios"
.IX Subsection "GetImportBiblios"
.Vb 1
\&  my $results = GetImportBiblios($importid);
.Ve
.SS "GetImportRecordsRange"
.IX Subsection "GetImportRecordsRange"
.Vb 1
\&  my $results = GetImportRecordsRange($batch_id, $offset, $results_per_group);
.Ve
.PP
Returns a reference to an array of hash references corresponding to
import_biblios/import_auths/import_records rows for a given batch
starting at the given offset.
.SS "GetBestRecordMatch"
.IX Subsection "GetBestRecordMatch"
.Vb 1
\&  my $record_id = GetBestRecordMatch($import_record_id);
.Ve
.SS "GetImportBatchStatus"
.IX Subsection "GetImportBatchStatus"
.Vb 1
\&  my $status = GetImportBatchStatus($batch_id);
.Ve
.SS "SetImportBatchStatus"
.IX Subsection "SetImportBatchStatus"
.Vb 1
\&  SetImportBatchStatus($batch_id, $new_status);
.Ve
.SS "SetMatchedBiblionumber"
.IX Subsection "SetMatchedBiblionumber"
.Vb 1
\&  SetMatchedBiblionumber($import_record_id, $biblionumber);
.Ve
.SS "GetImportBatchOverlayAction"
.IX Subsection "GetImportBatchOverlayAction"
.Vb 1
\&  my $overlay_action = GetImportBatchOverlayAction($batch_id);
.Ve
.SS "SetImportBatchOverlayAction"
.IX Subsection "SetImportBatchOverlayAction"
.Vb 1
\&  SetImportBatchOverlayAction($batch_id, $new_overlay_action);
.Ve
.SS "GetImportBatchNoMatchAction"
.IX Subsection "GetImportBatchNoMatchAction"
.Vb 1
\&  my $nomatch_action = GetImportBatchNoMatchAction($batch_id);
.Ve
.SS "SetImportBatchNoMatchAction"
.IX Subsection "SetImportBatchNoMatchAction"
.Vb 1
\&  SetImportBatchNoMatchAction($batch_id, $new_nomatch_action);
.Ve
.SS "GetImportBatchItemAction"
.IX Subsection "GetImportBatchItemAction"
.Vb 1
\&  my $item_action = GetImportBatchItemAction($batch_id);
.Ve
.SS "SetImportBatchItemAction"
.IX Subsection "SetImportBatchItemAction"
.Vb 1
\&  SetImportBatchItemAction($batch_id, $new_item_action);
.Ve
.SS "GetImportBatchMatcher"
.IX Subsection "GetImportBatchMatcher"
.Vb 1
\&  my $matcher_id = GetImportBatchMatcher($batch_id);
.Ve
.SS "SetImportBatchMatcher"
.IX Subsection "SetImportBatchMatcher"
.Vb 1
\&  SetImportBatchMatcher($batch_id, $new_matcher_id);
.Ve
.SS "GetImportRecordOverlayStatus"
.IX Subsection "GetImportRecordOverlayStatus"
.Vb 1
\&  my $overlay_status = GetImportRecordOverlayStatus($import_record_id);
.Ve
.SS "SetImportRecordOverlayStatus"
.IX Subsection "SetImportRecordOverlayStatus"
.Vb 1
\&  SetImportRecordOverlayStatus($import_record_id, $new_overlay_status);
.Ve
.SS "GetImportRecordStatus"
.IX Subsection "GetImportRecordStatus"
.Vb 1
\&  my $status = GetImportRecordStatus($import_record_id);
.Ve
.SS "SetImportRecordStatus"
.IX Subsection "SetImportRecordStatus"
.Vb 1
\&  SetImportRecordStatus($import_record_id, $new_status);
.Ve
.SS "GetImportRecordMatches"
.IX Subsection "GetImportRecordMatches"
.Vb 1
\&  my $results = GetImportRecordMatches($import_record_id, $best_only);
.Ve
.SS "SetImportRecordMatches"
.IX Subsection "SetImportRecordMatches"
.Vb 1
\&  SetImportRecordMatches($import_record_id, @matches);
.Ve
.SS "RecordsFromISO2709File"
.IX Subsection "RecordsFromISO2709File"
.Vb 1
\&    my ($errors, $records) = C4::ImportBatch::RecordsFromISO2709File($input_file, $record_type, $encoding);
.Ve
.PP
Reads \s-1ISO2709\s0 binary porridge from the given file and creates MARC::Record\-objects out of it.
.PP
\&\f(CW@PARAM1\fR, String, absolute path to the \s-1ISO2709\s0 file.
\&\f(CW@PARAM2\fR, String, see stage_file.pl
\&\f(CW@PARAM3\fR, String, should be utf8
.PP
Returns two array refs.
.SS "RecordsFromMARCXMLFile"
.IX Subsection "RecordsFromMARCXMLFile"
.Vb 1
\&    my ($errors, $records) = C4::ImportBatch::RecordsFromMARCXMLFile($input_file, $encoding);
.Ve
.PP
Creates MARC::Record\-objects out of the given MARCXML-file.
.PP
\&\f(CW@PARAM1\fR, String, absolute path to the \s-1MARCXML\s0 file.
\&\f(CW@PARAM2\fR, String, should be utf8
.PP
Returns two array refs.
.SS "RecordsFromMarcPlugin"
.IX Subsection "RecordsFromMarcPlugin"
.Vb 1
\&    Converts text of input_file into array of MARC records with to_marc plugin
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
