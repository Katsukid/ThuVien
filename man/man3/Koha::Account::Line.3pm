.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Account::Line 3pm"
.TH Koha::Account::Line 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Account::Line \- Koha accountline Object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIpatron\fR
.IX Subsection "patron"
.PP
Return the patron linked to this account line
.PP
\fImanager\fR
.IX Subsection "manager"
.PP
Return the manager linked to this account line
.PP
\fIitem\fR
.IX Subsection "item"
.PP
Return the item linked to this account line if exists
.PP
\fIcheckout\fR
.IX Subsection "checkout"
.PP
Return the checkout linked to this account line if exists
.PP
\fIlibrary\fR
.IX Subsection "library"
.PP
Returns a Koha::Library object representing where the accountline was recorded
.PP
\fIcredit_type\fR
.IX Subsection "credit_type"
.PP
Return the credit_type linked to this account line
.PP
\fIdebit_type\fR
.IX Subsection "debit_type"
.PP
Return the debit_type linked to this account line
.PP
\fIcredit_offsets\fR
.IX Subsection "credit_offsets"
.PP
Return the credit_offsets linked to this account line if some exist
.PP
\fIdebit_offsets\fR
.IX Subsection "debit_offsets"
.PP
Return the debit_offsets linked to this account line if some exist
.PP
\fIcredits\fR
.IX Subsection "credits"
.PP
.Vb 2
\&  my $credits = $accountline\->credits;
\&  my $credits = $accountline\->credits( $cond, $attr );
.Ve
.PP
Return the credits linked to this account line if some exist.
Search conditions and attributes may be passed if you wish to filter
the resultant resultant resultset.
.PP
\fIdebits\fR
.IX Subsection "debits"
.PP
.Vb 2
\&  my $debits = $accountline\->debits;
\&  my $debits = $accountline\->debits( $cond, $attr );
.Ve
.PP
Return the debits linked to this account line if some exist.
Search conditions and attributes may be passed if you wish to filter
the resultant resultant resultset.
.PP
\fIvoid\fR
.IX Subsection "void"
.PP
.Vb 4
\&  $payment_accountline\->void({
\&      interface => $interface,
\&      [ staff_id => $staff_id, branch => $branchcode ]
\&  });
.Ve
.PP
Used to 'void' (or reverse) a payment/credit. It will roll back any offsets
created by the application of this credit upon any debits and mark the credit
as 'void' by updating it's status to \*(L"\s-1VOID\*(R".\s0
.PP
\fIcancel\fR
.IX Subsection "cancel"
.PP
.Vb 1
\&  $debit_accountline\->cancel();
.Ve
.PP
Cancel a charge. It will mark the debit as 'cancelled' by updating its
status to '\s-1CANCELLED\s0'.
.PP
Charges that have been fully or partially paid cannot be cancelled.
.PP
Returns the cancellation accountline.
.PP
\fIreduce\fR
.IX Subsection "reduce"
.PP
.Vb 3
\&  $charge_accountline\->reduce({
\&      reduction_type => $reduction_type
\&  });
.Ve
.PP
Used to 'reduce' a charge/debit by adding a credit to offset against the amount
outstanding.
.PP
May be used to apply a discount whilst retaining the original debit amounts or
to apply a full or partial refund for example when a lost item is found and
returned.
.PP
It will immediately be applied to the given debit unless the debit has already
been paid, in which case a 'zero' offset will be added to maintain a link to
the debit but the outstanding credit will be left so it may be applied to other
debts.
.PP
Reduction type may be one of:
.PP
* \s-1REFUND\s0
* \s-1DISCOUNT\s0
.PP
Returns the reduction accountline (which will be a credit)
.PP
\fIapply\fR
.IX Subsection "apply"
.PP
.Vb 2
\&    my $debits = $account\->outstanding_debits;
\&    my $credit = $credit\->apply( { debits => $debits } );
.Ve
.PP
Applies the credit to a given debits array reference.
.PP
arguments hashref
.IX Subsection "arguments hashref"
.IP "debits \- Koha::Account::Lines object set of debits" 4
.IX Item "debits - Koha::Account::Lines object set of debits"
.PP
\fIpayout\fR
.IX Subsection "payout"
.PP
.Vb 9
\&  $credit_accountline\->payout(
\&    {
\&        payout_type => $payout_type,
\&        register_id => $register_id,
\&        staff_id    => $staff_id,
\&        interface   => \*(Aqintranet\*(Aq,
\&        amount      => $amount
\&    }
\&  );
.Ve
.PP
Used to 'pay out' a credit to a user.
.PP
Payout type may be one of any existing payment types
.PP
Returns the payout debit line that is created via this transaction.
.PP
\fIadjust\fR
.IX Subsection "adjust"
.PP
This method allows updating a debit or credit on a patron's account
.PP
.Vb 7
\&    $account_line\->adjust(
\&        {
\&            amount    => $amount,
\&            type      => $update_type,
\&            interface => $interface
\&        }
\&    );
.Ve
.PP
\&\f(CW$update_type\fR can be any of:
  \- overdue_update
.PP
Authors Note: The intention here is that this method is only used
to adjust accountlines where the final amount is not yet known/fixed.
Incrementing fines are the only existing case at the time of writing,
all other forms of 'adjustment' should be recorded as distinct credits
or debits and applied, via an offset, to the corresponding debit or credit.
.PP
\fIis_credit\fR
.IX Subsection "is_credit"
.PP
.Vb 1
\&    my $bool = $line\->is_credit;
.Ve
.PP
\fIis_debit\fR
.IX Subsection "is_debit"
.PP
.Vb 1
\&    my $bool = $line\->is_debit;
.Ve
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Account::Line object
on the \s-1API.\s0
.PP
\fIis_renewable\fR
.IX Subsection "is_renewable"
.PP
.Vb 1
\&    my $bool = $line\->is_renewable;
.Ve
.PP
\fIrenew_item\fR
.IX Subsection "renew_item"
.PP
.Vb 1
\&    my $renew_result = $line\->renew_item;
.Ve
.PP
Conditionally attempt to renew an item and return the outcome. This is
as a consequence of the fine on an item being fully paid off.
Caller must call is_renewable before.
.PP
\fIstore\fR
.IX Subsection "store"
.PP
Specific store method to generate credit number before saving
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
.SS "Name mappings"
.IX Subsection "Name mappings"
\fI\f(CI$allowed_update\fI\fR
.IX Subsection "$allowed_update"
.SH "AUTHORS"
.IX Header "AUTHORS"
Kyle M Hall <kyle@bywatersolutions.com >
Tom√°s Cohen Arazi <tomascohen@theke.io>
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
