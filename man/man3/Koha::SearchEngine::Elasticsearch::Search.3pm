.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::SearchEngine::Elasticsearch::Search 3pm"
.TH Koha::SearchEngine::Elasticsearch::Search 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::SearchEngine::Elasticsearch::Search \- search functions for Elasticsearch
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    my $searcher =
\&      Koha::SearchEngine::Elasticsearch::Search\->new( { index => $index } );
\&    my $builder = Koha::SearchEngine::Elasticsearch::QueryBuilder\->new(
\&        { index => $index } );
\&    my $query = $builder\->build_query(\*(Aqperl\*(Aq);
\&    my $results = $searcher\->search($query);
\&    print "There were " . $results\->total . " results.\en";
\&    $results\->each(sub {
\&        push @hits, @_[0];
\&    });
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "search"
.IX Subsection "search"
.Vb 1
\&    my $results = $searcher\->search($query, $page, $count, %options);
.Ve
.PP
Run a search using the query. It'll return \f(CW$count\fR results, starting at page
\&\f(CW$page\fR (\f(CW$page\fR counts from 1, anything less that, or \f(CW\*(C`undef\*(C'\fR becomes 1.)
\&\f(CW$count\fR is also the number of entries on a page.
.PP
\&\f(CW%options\fR is a hash containing extra options:
.IP "offset" 4
.IX Item "offset"
If provided, this overrides the \f(CW$page\fR value, and specifies the record as
an offset (i.e. the number of the record to start with), rather than a page.
.PP
Returns
.SS "count"
.IX Subsection "count"
.Vb 1
\&    my $count = $searcher\->count($query);
.Ve
.PP
This mimics a search request, but just gets the result count instead. That's
faster than pulling all the data in, usually.
.SS "search_compat"
.IX Subsection "search_compat"
.Vb 5
\&    my ( $error, $results, $facets ) = $search\->search_compat(
\&        $query,            $simple_query, \e@sort_by,       \e@servers,
\&        $results_per_page, $offset,       undef,           $item_types,
\&        $query_type,       $scan
\&      )
.Ve
.PP
A search interface somewhat compatible with C4::Search\-getRecords>. Anything
that is returned in the query created by build_query_compat will probably
get ignored here, along with some other things (like \f(CW@servers\fR.)
.SS "search_auth_compat"
.IX Subsection "search_auth_compat"
.Vb 2
\&    my ( $results, $total ) =
\&      $searcher\->search_auth_compat( $query, $offset, $count, $skipmetadata, %options );
.Ve
.PP
This has a similar calling convention to search, however it returns its
results in a form the same as C4::AuthoritiesMarc::SearchAuthorities.
.SS "count_auth_use"
.IX Subsection "count_auth_use"
.Vb 1
\&    my $count = $auth_searcher\->count_auth_use($bib_searcher, $authid);
.Ve
.PP
This runs a search to determine the number of records that reference the
specified authid. \f(CW$bib_searcher\fR must be something compatible with
elasticsearch, as the query is built in this function.
.SS "simple_search_compat"
.IX Subsection "simple_search_compat"
.Vb 2
\&    my ( $error, $marcresults, $total_hits ) =
\&      $searcher\->simple_search( $query, $offset, $max_results, %options );
.Ve
.PP
This is a simpler interface to the searching, intended to be similar enough to
C4::Search::SimpleSearch.
.PP
Arguments:
.ie n .IP "$query" 4
.el .IP "\f(CW$query\fR" 4
.IX Item "$query"
A thing to search for. It could be a simple string, or something constructed
with the appropriate QueryBuilder module.
.ie n .IP "$offset" 4
.el .IP "\f(CW$offset\fR" 4
.IX Item "$offset"
How many results to skip from the start of the results.
.ie n .IP "$max_results" 4
.el .IP "\f(CW$max_results\fR" 4
.IX Item "$max_results"
The max number of results to return.
The default is the result of method \fBmax_result_window()\fR.
.ie n .IP "%options" 4
.el .IP "\f(CW%options\fR" 4
.IX Item "%options"
These options are unused by Elasticsearch
.PP
Returns:
.ie n .IP "$error" 4
.el .IP "\f(CW$error\fR" 4
.IX Item "$error"
if something went wrong, this'll contain some kind of error
message.
.ie n .IP "$marcresults" 4
.el .IP "\f(CW$marcresults\fR" 4
.IX Item "$marcresults"
an arrayref of MARC::Records (note that this is different from the
C4::Search version which will return plain \s-1XML,\s0 but too bad.)
.ie n .IP "$total_hits" 4
.el .IP "\f(CW$total_hits\fR" 4
.IX Item "$total_hits"
the total number of results that this search could have returned.
.SS "extract_biblionumber"
.IX Subsection "extract_biblionumber"
.Vb 1
\&    my $biblionumber = $searcher\->extract_biblionumber( $searchresult );
.Ve
.PP
\&\f(CW$searchresult\fR comes from simple_search_compat.
.PP
Returns the biblionumber from the search result record.
.ie n .SS "decode_record_from_result my $marc_record = $self\->decode_record_from_result(@result);"
.el .SS "decode_record_from_result my \f(CW$marc_record\fP = \f(CW$self\fP\->decode_record_from_result(@result);"
.IX Subsection "decode_record_from_result my $marc_record = $self->decode_record_from_result(@result);"
Extracts marc data from Elasticsearch result and decodes to MARC::Record object
.SS "max_result_window"
.IX Subsection "max_result_window"
Returns the maximum number of results that can be fetched
.PP
This directly requests Elasticsearch for the setting index.max_result_window (or
the default value for this setting in case it is not set)
.SS "_convert_facets"
.IX Subsection "_convert_facets"
.Vb 1
\&    my $koha_facets = _convert_facets($es_facets);
.Ve
.PP
Converts elasticsearch facets types to the form that Koha expects.
It expects the \s-1ES\s0 facet name to match the Koha type, for example \f(CW\*(C`itype\*(C'\fR,
\&\f(CW\*(C`au\*(C'\fR, \f(CW\*(C`su\-to\*(C'\fR, etc.
.SS "_aggregation_scan"
.IX Subsection "_aggregation_scan"
.Vb 1
\&    my $result = $self\->_aggregration_scan($query, 10, 0);
.Ve
.PP
Perform an aggregation request for scan purposes.
