.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Template::Plugin::I18N 3pm"
.TH Koha::Template::Plugin::I18N 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Template::Plugin::I18N \- Translate strings in templates
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    [% PROCESS \*(Aqi18n.inc\*(Aq %]
\&
\&    . . .
\&
\&    [% I18N.t("Hello!") %]
\&    [% I18N.tx("Hello {name}", { name = name }) %]
\&    [% I18N.tn("Hello friend", "Hello friends", count) %]
\&    [% I18N.tnx("Hello my {count} friend", "Hello my {count} friends", count, { count = count }) %]
\&    [% I18N.tp(\*(Aqverb\*(Aq, \*(AqItem\*(Aq) # to order %]
\&    [% I18N.tnp(\*(Aqbibliographic material\*(Aq, "item", "items", count) %]
\&    [% I18N.tnpx(\*(Aqbibliographic material\*(Aq, "{count} item", "{count} items", count, { count = count }) %]
.Ve
.PP
Do not use this plugin directly. Add the following directive
.PP
.Vb 1
\&    [% PROCESS \*(Aqi18n.inc\*(Aq %]
.Ve
.PP
and use the macros defined.
.PP
See: https://wiki.koha\-community.org/wiki/Internationalization,_plural_forms,_context,_and_more_(\s-1RFC\s0)
for further context.
.SH "METHODS"
.IX Header "METHODS"
.SS "t"
.IX Subsection "t"
.Vb 1
\&    [% I18N.t("hello") %]
.Ve
.PP
Translate \- The simplest type of translatable string where
there are no variables and not pluralisations to consider.
.SS "tx"
.IX Subsection "tx"
.Vb 1
\&    [% I18N.tx("hello {name}", { name = name }) %]
.Ve
.PP
Translate with variable \- A translatable string that
includes a variable
.SS "tn"
.IX Subsection "tn"
.Vb 1
\&    [% I18N.tn("item", "items", count) %]
.Ve
.PP
Translate with plural \- A translatable string that needs
singular and plural forms
.SS "tnx"
.IX Subsection "tnx"
.Vb 1
\&    [% I18N.tnx("{count} item", "{count} items", count, { count = count }) %]
.Ve
.PP
Translate with plural and variable \- A translatable string
that needs singular and plural forms and includes a variable
.SS "txn"
.IX Subsection "txn"
Alias of tnx
.SS "tp"
.IX Subsection "tp"
.Vb 1
\&    [% I18N.tp("context", "hello") %]
.Ve
.PP
Translate with context \- A translatable string where a
context hint would be helpful to translators.
.PP
An example would be where in english a single word may be
be used as both a verb and a noun. You may want to add a
note to distinguish this particular use case so translators
can understand the context correctly.
.SS "tpx"
.IX Subsection "tpx"
.Vb 1
\&    [% I18N.tpx("context", "hello {name}", { name = name }) %]
.Ve
.PP
Translate with context and variable \- A translatable string
that needs both a contextual hint and includes a variable.
.SS "tnp"
.IX Subsection "tnp"
.Vb 1
\&    [% I18N.tnp("context", "item", "items", count) %]
.Ve
.PP
Translate with context and plural \- A translatable string
that needs both a contextual hints and singular and plural
forms.
.SS "tnpx"
.IX Subsection "tnpx"
.Vb 1
\&    [% I18N.tnpx("context", "{count} item", "{count} items", count, { count = count }) %]
.Ve
.PP
Translate with context, plural and variables \- A translatable
string that needs contextual hints, singular and plural forms
and also includes variables.
