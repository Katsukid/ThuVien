.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::ItemType 3pm"
.TH Koha::ItemType 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::ItemType \- Koha Item type Object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIstore\fR
.IX Subsection "store"
.PP
ItemType specific store to ensure relevant caches are flushed on change
.SS "delete"
.IX Subsection "delete"
ItemType specific \f(CW\*(C`delete\*(C'\fR to clear relevant caches on delete.
.PP
\fIimage_location\fR
.IX Subsection "image_location"
.PP
\fItranslated_description\fR
.IX Subsection "translated_description"
.PP
\fItranslated_descriptions\fR
.IX Subsection "translated_descriptions"
.PP
\fIcan_be_deleted\fR
.IX Subsection "can_be_deleted"
.PP
my \f(CW$can_be_deleted\fR = Koha::ItemType\->\fBcan_be_deleted()\fR;
.PP
Counts up the number of biblioitems and items with itemtype (code) and hands back the combined number of biblioitems and items with the itemtype
.PP
\fImay_article_request\fR
.IX Subsection "may_article_request"
.PP
.Vb 3
\&    Returns true if it is likely possible to make an article request for
\&    this item type.
\&    Optional parameter: categorycode (for patron).
.Ve
.PP
\fI_library_limits\fR
.IX Subsection "_library_limits"
.PP
.Vb 1
\& configure library limits
.Ve
.PP
\fIparent\fR
.IX Subsection "parent"
.PP
.Vb 1
\&    Returns the ItemType object of the parent_type or undef.
.Ve
.PP
\fIchildren_with_localization\fR
.IX Subsection "children_with_localization"
.PP
.Vb 1
\&    Returns the ItemType objects of the children of this type or undef.
.Ve
.PP
\fItype\fR
.IX Subsection "type"
