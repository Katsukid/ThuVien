.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Suggestions 3pm"
.TH C4::Suggestions 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Suggestions \- Some useful functions for dealings with aqorders.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Suggestions;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The functions in this module deal with the aqorders in \s-1OPAC\s0 and in staff interface
.PP
A suggestion is done in the \s-1OPAC.\s0 It has the status \*(L"\s-1ASKED\*(R"\s0
.PP
When a librarian manages the suggestion, they can set the status to \*(L"\s-1REJECTED\*(R"\s0 or \*(L"\s-1ACCEPTED\*(R".\s0
.PP
When the book is ordered, the suggestion status becomes \*(L"\s-1ORDERED\*(R"\s0
.PP
When a book is ordered and arrived in the library, the status becomes \*(L"\s-1AVAILABLE\*(R"\s0
.PP
All aqorders of a borrower can be seen by the borrower itself.
Suggestions done by other borrowers can be seen when not \*(L"\s-1AVAILABLE\*(R"\s0
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetSuggestion"
.IX Subsection "GetSuggestion"
\&\e%sth = &GetSuggestion($suggestionid)
.PP
this function get the detail of the suggestion \f(CW$suggestionid\fR (input arg)
.PP
return :
    the result of the \s-1SQL\s0 query as a hash : \f(CW$sth\fR\->fetchrow_hashref.
.SS "GetSuggestionFromBiblionumber"
.IX Subsection "GetSuggestionFromBiblionumber"
\&\f(CW$ordernumber\fR = &GetSuggestionFromBiblionumber($biblionumber)
.PP
Get a suggestion from it's biblionumber.
.PP
return :
the id of the suggestion which is related to the biblionumber given on input args.
.SS "GetSuggestionInfoFromBiblionumber"
.IX Subsection "GetSuggestionInfoFromBiblionumber"
Get a suggestion and borrower's informations from it's biblionumber.
.PP
return :
all informations (suggestion and borrower) of the suggestion which is related to the biblionumber given.
.SS "GetSuggestionInfo"
.IX Subsection "GetSuggestionInfo"
Get a suggestion and borrower's informations from it's suggestionid
.PP
return :
all informations (suggestion and borrower) of the suggestion which is related to the suggestionid given.
.SS "GetSuggestionByStatus"
.IX Subsection "GetSuggestionByStatus"
\&\f(CW$aqorders\fR = &GetSuggestionByStatus($status,[$branchcode])
.PP
Get a suggestion from it's status
.PP
return :
all the suggestion with \f(CW$status\fR
.SS "ModSuggestion"
.IX Subsection "ModSuggestion"
&ModSuggestion($suggestion)
.PP
Modify the suggestion according to the hash passed by ref.
The hash \s-1HAS\s0 to contain suggestionid
Data not defined is not updated unless it is a note or sort1
Send a mail to notify the user that did the suggestion.
.PP
Note that there is no function to modify a suggestion.
.SS "ConnectSuggestionAndBiblio"
.IX Subsection "ConnectSuggestionAndBiblio"
&ConnectSuggestionAndBiblio($ordernumber,$biblionumber)
.PP
connect a suggestion to an existing biblio
.SS "DelSuggestion"
.IX Subsection "DelSuggestion"
&DelSuggestion($borrowernumber,$ordernumber)
.PP
Delete a suggestion. A borrower can delete a suggestion only if they are its owner.
.SS "DelSuggestionsOlderThan &DelSuggestionsOlderThan($days)"
.IX Subsection "DelSuggestionsOlderThan &DelSuggestionsOlderThan($days)"
.Vb 2
\&    Delete all suggestions older than TODAY\-$days , that have be accepted or rejected.
\&    We do now allow a negative number. If you want to delete all suggestions, just use Koha::Suggestions\->delete or so.
.Ve
.SS "MarcRecordFromNewSuggestion"
.IX Subsection "MarcRecordFromNewSuggestion"
.Vb 1
\&    $record = MarcRecordFromNewSuggestion ( $suggestion )
.Ve
.PP
This function build a marc record object from a suggestion
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
