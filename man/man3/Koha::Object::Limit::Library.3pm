.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Object::Limit::Library 3pm"
.TH Koha::Object::Limit::Library 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Object::Limit::Library \- Generic library limit handling class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Koha::Object Koha::Object::Limit::Library);
\&    my $object = Koha::Object\->new({ property1 => $property1, property2 => $property2, etc... } );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is provided as a generic way of handling library limits for Koha::Object\-based classes
in Koha.
.PP
This class must always be subclassed.
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIlibrary_limits\fR
.IX Subsection "library_limits"
.PP
my \f(CW$limits\fR = \f(CW$object\fR\->\fBlibrary_limits()\fR;
.PP
\&\f(CW$object\fR\->library_limits( \e@branchcodes );
.PP
Accessor method for library limits. When updating library limits, it accepts
a list of branchcodes. If requested to return the current library limits
it returns a Koha::Libraries object with the corresponding libraries.
.PP
\fIget_library_limits\fR
.IX Subsection "get_library_limits"
.PP
my \f(CW$limits\fR = \f(CW$object\fR\->\fBget_library_limits()\fR;
.PP
Returns the current library limits in the form of a Koha::Libraries iterator object.
It returns undef if no library limits defined.
.PP
\fIadd_library_limit\fR
.IX Subsection "add_library_limit"
.PP
\&\f(CW$object\fR\->add_library_limit( \f(CW$branchcode\fR );
.PP
\fIdel_library_limit\fR
.IX Subsection "del_library_limit"
.PP
\&\f(CW$object\fR\->del_library_limit( \f(CW$branchcode\fR );
.PP
\fIreplace_library_limits\fR
.IX Subsection "replace_library_limits"
.PP
\&\f(CW$object\fR\->replace_library_limits( \e@branchcodes );
.PP
\fIKoha::Objects\->_library_limit_rs\fR
.IX Subsection "Koha::Objects->_library_limit_rs"
.PP
Returns the internal resultset for the branch limitation table or creates it if undefined
