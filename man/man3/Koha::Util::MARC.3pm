.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Util::MARC 3pm"
.TH Koha::Util::MARC 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Util::MARC \- utility class with routines for working with MARC records
.SH "METHODS"
.IX Header "METHODS"
.SS "createMergeHash"
.IX Subsection "createMergeHash"
Create a hash to use when merging \s-1MARC\s0 records
.SS "_createKey"
.IX Subsection "_createKey"
Create a random value to set it into the input name
.SS "getAuthorityAuthorizedHeading"
.IX Subsection "getAuthorityAuthorizedHeading"
Retrieve the authorized heading from a \s-1MARC\s0 authority record
.SS "set_marc_field"
.IX Subsection "set_marc_field"
.Vb 1
\&    set_marc_field($record, $marcField, $value);
.Ve
.PP
Set the value of \f(CW$marcField\fR to \f(CW$value\fR in \f(CW$record\fR. If the field exists, it will
be updated. If not, it will be created.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.ie n .IP "$record" 4
.el .IP "\f(CW$record\fR" 4
.IX Item "$record"
MARC::Record object
.ie n .IP "$marcField" 4
.el .IP "\f(CW$marcField\fR" 4
.IX Item "$marcField"
the \s-1MARC\s0 field to modify, a string in the form of 'XXX$y'
.ie n .IP "$value" 4
.el .IP "\f(CW$value\fR" 4
.IX Item "$value"
the value
.SS "find_marc_info"
.IX Subsection "find_marc_info"
.Vb 2
\&    my $first = find_marc_info({ record => $marc, field => $field, subfield => $subfield, match => qr/regex/ });
\&    my @found = find_marc_info({ record => $marc, field => $field, subfield => $subfield, match => qr/regex/ });
\&
\&    Returns first or all occurrences of field/subfield in record where regex matches.
\&    Subfield is not used for control fields.
\&    Match is optional.
.Ve
.SS "strip_orgcode"
.IX Subsection "strip_orgcode"
.Vb 1
\&    my $id = strip_orgcode( \*(Aq(code) 123\*(Aq ); # returns \*(Aq123\*(Aq
\&
\&    Strips from starting left paren to first right paren and trailing whitespace.
.Ve
.SS "oclc_number"
.IX Subsection "oclc_number"
.Vb 1
\&    my $id = oclc_number( $record );
\&
\&    Based on applying strip_orgcode on first occurrence of find_marc_info
\&    with orgcode matching regex in 035$a.
.Ve
