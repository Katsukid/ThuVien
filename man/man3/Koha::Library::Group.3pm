.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Library::Group 3pm"
.TH Koha::Library::Group 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Library::Group \- Koha Library::Group object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fImy \f(CI@parent\fI = \f(CI$self\fI\->\f(BIparent()\fI\fR
.IX Subsection "my @parent = $self->parent()"
.PP
\fImy \f(CI@children\fI = \f(CI$self\fI\->\f(BIchildren()\fI\fR
.IX Subsection "my @children = $self->children()"
.PP
\fIhas_child\fR
.IX Subsection "has_child"
.PP
my \f(CW$has_child\fR = \f(CW$group\fR\->has_child( \f(CW$branchcode\fR );
.PP
Return true if the given branchcode library is a child of this group.
.PP
\fIlibrary\fR
.IX Subsection "library"
.PP
my \f(CW$library\fR = \f(CW$group\fR\->\fBlibrary()\fR;
.PP
Returns the library for this group if one exists
.PP
\fIlibraries\fR
.IX Subsection "libraries"
.PP
my \f(CW$libraries\fR = \f(CW$group\fR\->libraries( { [invert => 1] } );
.PP
Returns the libraries set as direct children of this group.
.PP
If invert param is true, the returned list will be libraries
that are *not* direct children of this group.
.PP
\fIall_libraries\fR
.IX Subsection "all_libraries"
.PP
my \f(CW@libraries\fR = \f(CW$group\fR\->all_libraries( { [invert => 1] } );
.PP
Returns the libraries set as children of this group or any subgroup.
.PP
\fIlibraries_not_direct_children\fR
.IX Subsection "libraries_not_direct_children"
.PP
my \f(CW$libraries\fR = \f(CW$group\fR\->\fBlibraries_not_direct_children()\fR;
.PP
Returns the libraries *not* set as direct children of this group
.PP
\fIstore\fR
.IX Subsection "store"
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
