.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Budgets 3pm"
.TH C4::Budgets 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "FUNCTIONS ABOUT BUDGETS"
.IX Header "FUNCTIONS ABOUT BUDGETS"
.SS "GetBudgetName"
.IX Subsection "GetBudgetName"
.Vb 1
\&  my $budget_name = &GetBudgetName($budget_id);
.Ve
.PP
get the budget_name for a given budget_id
.SS "GetBudgetAuthCats"
.IX Subsection "GetBudgetAuthCats"
.Vb 1
\&  my $auth_cats = &GetBudgetAuthCats($budget_period_id);
.Ve
.PP
Return the list of authcat for a given budget_period_id
.SS "GetBudget"
.IX Subsection "GetBudget"
.Vb 1
\&  &GetBudget($budget_id);
.Ve
.PP
get a specific budget
.SS "GetBudgetByOrderNumber"
.IX Subsection "GetBudgetByOrderNumber"
.Vb 1
\&  &GetBudgetByOrderNumber($ordernumber);
.Ve
.PP
get a specific budget by order number
.SS "GetBudgetReport"
.IX Subsection "GetBudgetReport"
.Vb 1
\&  &GetBudgetReport( [$budget_id] );
.Ve
.PP
Get all orders for a specific budget, without cancelled orders.
.PP
Returns an array of hashrefs.
.SS "GetBudgetsByActivity"
.IX Subsection "GetBudgetsByActivity"
.Vb 1
\&  &GetBudgetsByActivity( $budget_period_active );
.Ve
.PP
Get all active or inactive budgets, depending of the value
of the parameter.
.PP
1 = active
0 = inactive
.SS "GetBudgetsReport"
.IX Subsection "GetBudgetsReport"
.Vb 1
\&  &GetBudgetsReport( [$activity] );
.Ve
.PP
Get all but cancelled orders for all funds.
.PP
If the optionnal activity parameter is passed, returns orders for active/inactive budgets only.
.PP
active = 1
inactive = 0
.PP
Returns an array of hashrefs.
.SS "GetBudgetByCode"
.IX Subsection "GetBudgetByCode"
.Vb 1
\&    my $budget = &GetBudgetByCode($budget_code);
.Ve
.PP
Retrieve all aqbudgets fields as a hashref for the budget that has
given budget_code
.SS "GetBudgetHierarchySpent"
.IX Subsection "GetBudgetHierarchySpent"
.Vb 1
\&  my $spent = GetBudgetHierarchySpent( $budget_id );
.Ve
.PP
Gets the total spent of the level and sublevels of \f(CW$budget_id\fR
.SS "GetBudgetHierarchyOrdered"
.IX Subsection "GetBudgetHierarchyOrdered"
.Vb 1
\&  my $ordered = GetBudgetHierarchyOrdered( $budget_id );
.Ve
.PP
Gets the total ordered of the level and sublevels of \f(CW$budget_id\fR
.SS "GetBudgets"
.IX Subsection "GetBudgets"
.Vb 1
\&  &GetBudgets($filter, $order_by);
.Ve
.PP
gets all budgets
.SS "GetBudgetUsers"
.IX Subsection "GetBudgetUsers"
.Vb 1
\&    my @borrowernumbers = &GetBudgetUsers($budget_id);
.Ve
.PP
Return the list of borrowernumbers linked to a budget
.SS "ModBudgetUsers"
.IX Subsection "ModBudgetUsers"
.Vb 1
\&    &ModBudgetUsers($budget_id, @borrowernumbers);
.Ve
.PP
Modify the list of borrowernumbers linked to a budget
.SS "CloneBudgetPeriod"
.IX Subsection "CloneBudgetPeriod"
.Vb 7
\&  my $new_budget_period_id = CloneBudgetPeriod({
\&    budget_period_id => $budget_period_id,
\&    budget_period_startdate => $budget_period_startdate,
\&    budget_period_enddate   => $budget_period_enddate,
\&    mark_original_budget_as_inactive => 1n
\&    reset_all_budgets => 1,
\&  });
.Ve
.PP
Clone a budget period with all budgets.
If the mark_origin_budget_as_inactive is set (0 by default),
the original budget will be marked as inactive.
.PP
If the reset_all_budgets is set (0 by default), all budget (fund)
amounts will be reset.
.SS "CloneBudgetHierarchy"
.IX Subsection "CloneBudgetHierarchy"
.Vb 4
\&  CloneBudgetHierarchy({
\&    budgets => $budgets,
\&    new_budget_period_id => $new_budget_period_id;
\&  });
.Ve
.PP
Clone a budget hierarchy.
.SS "MoveOrders"
.IX Subsection "MoveOrders"
.Vb 4
\&  my $report = MoveOrders({
\&    from_budget_period_id => $from_budget_period_id,
\&    to_budget_period_id   => $to_budget_period_id,
\&  });
.Ve
.PP
Move orders from one budget period to another.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
