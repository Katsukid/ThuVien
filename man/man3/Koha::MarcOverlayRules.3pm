.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::MarcOverlayRules 3pm"
.TH Koha::MarcOverlayRules 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::MarcOverlayRules \- Koha MarcOverlayRules Object set class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIoperations\fR
.IX Subsection "operations"
.PP
Returns a list of all valid operations.
.PP
\fIcontext_rules\fR
.IX Subsection "context_rules"
.PP
.Vb 1
\&    my $rules = Koha::MarcOverlayRules\->context_rules($context);
.Ve
.PP
Gets all \s-1MARC\s0 overlay rules for the supplied \f(CW$context\fR (hashref with { module => filter, ... } values).
.PP
\fImerge_records\fR
.IX Subsection "merge_records"
.PP
.Vb 1
\&    my $merged_record = Koha::MarcOverlayRules\->merge_records($old_record, $incoming_record, $context);
.Ve
.PP
Overlay \f(CW$old_record\fR with \f(CW$incoming_record\fR applying overlay rules for \f(CW$context\fR.
Returns merged record \f(CW$merged_record\fR. \f(CW$old_record\fR, \f(CW$incoming_record\fR and
\&\f(CW$merged_record\fR are all MARC::Record objects.
.SS "find_or_create"
.IX Subsection "find_or_create"
Override \f(CW\*(C`find_or_create\*(C'\fR to clear marc overlay rules cache.
.SS "update"
.IX Subsection "update"
Override \f(CW\*(C`update\*(C'\fR to clear marc overlay rules cache.
.SS "delete"
.IX Subsection "delete"
Override \f(CW\*(C`delete\*(C'\fR to clear marc overlay rules cache.
.SS "validate"
.IX Subsection "validate"
.Vb 1
\&    Koha::MarcOverlayRules\->validate($rule_data);
.Ve
.PP
Validates \f(CW$rule_data\fR. Throws \f(CW\*(C`Koha::Exceptions::MarcOverlayRule::InvalidTagRegExp\*(C'\fR
if \f(CW\*(C`$rule_data\-\*(C'\fR{tag}> contains an invalid regular expression. Throws
\&\f(CW\*(C`Koha::Exceptions::MarcOverlayRule::InvalidControlFieldActions\*(C'\fR if contains invalid
combination of actions for control fields. Otherwise returns true.
.PP
\fIobject_class\fR
.IX Subsection "object_class"
