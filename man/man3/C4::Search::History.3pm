.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Search::History 3pm"
.TH C4::Search::History 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Search::History \- Manage search history
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some routines for the search history management.
It deals with session or database.
.SH "ROUTINES"
.IX Header "ROUTINES"
.SS "add"
.IX Subsection "add"
.Vb 8
\&    C4::Search::History::add({
\&        userid => $userid,
\&        sessionid => $cgi\->cookie("CGIESSID"),
\&        query_desc => $query_desc,
\&        query_cgi => $query_cgi,
\&        total => $total,
\&        type => $type,
\&    });
.Ve
.PP
type is \*(L"biblio\*(R" or \*(L"authority\*(R".
.PP
Add a new search to the user's history.
.SS "add_to_session"
.IX Subsection "add_to_session"
.Vb 7
\&    my $value = C4::Search::History::add_to_session({
\&        cgi => $cgi,
\&        query_desc => $query_desc,
\&        query_cgi => $query_cgi,
\&        total => $total,
\&        type => $type,
\&    });
.Ve
.PP
Add a search to the session. The number of searches to keep is hardcoded to 15.
.SS "delete"
.IX Subsection "delete"
.Vb 6
\&    C4::Search::History::delete({
\&        userid => $loggedinuser,
\&        sessionid => $sessionid,
\&        type => $type,
\&        previous => $previous
\&    });
.Ve
.PP
Delete searches in the database.
If the sessionid is missing all searches for all sessions will be deleted.
It is possible to delete searches for current session or all previous sessions using the previous flag.
If the type (\*(L"biblio\*(R" or \*(L"authority\*(R") is missing, all type will be deleted.
To delete *all* searches for a given userid, just pass a userid.
.SS "get"
.IX Subsection "get"
.Vb 6
\&    my $searches C4::Search::History::get({
\&        userid => $userid,
\&        sessionsid => $sessionid,
\&        type => $type,
\&        previous => $previous
\&    });
.Ve
.PP
Return a list of searches for a given userid.
If a sessionid is given, searches are limited to the matching session.
type and previous follow the same behavior as the delete routine.
.SS "get_from_session"
.IX Subsection "get_from_session"
.Vb 3
\&    my $searches = C4::Search::History::get_from_session({
\&        cgi => $cgi
\&    });
.Ve
.PP
Return all searches present for the given session.
.SS "set_to_session"
.IX Subsection "set_to_session"
.Vb 4
\&    C4::Search::History::set_to_session({
\&        cgi => $cgi,
\&        search_history => $search_history
\&    });
.Ve
.PP
Store searches into the session.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan Druart <jonathan.druart@biblibre.com>
.SH "LICENSE"
.IX Header "LICENSE"
This file is part of Koha.
.PP
Copyright 2013 BibLibre \s-1SARL\s0
.PP
Koha is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.
.PP
Koha is distributed in the hope that it will be useful, but
\&\s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with Koha; if not, see <http://www.gnu.org/licenses>.
