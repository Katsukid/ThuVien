.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Items 3pm"
.TH Koha::Items 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Items \- Koha Item object set class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIfilter_by_for_hold\fR
.IX Subsection "filter_by_for_hold"
.PP
.Vb 1
\&    my $filtered_items = $items\->filter_by_for_hold;
.Ve
.PP
Return the items of the set that are *potentially* holdable.
.PP
Caller has the responsibility to call C4::Reserves::CanItemBeReserved before
placing a hold on one of those items.
.PP
\fIfilter_by_visible_in_opac\fR
.IX Subsection "filter_by_visible_in_opac"
.PP
.Vb 5
\&    my $filered_items = $items\->filter_by_visible_in_opac(
\&        {
\&            [ patron => $patron ]
\&        }
\&    );
.Ve
.PP
Returns a new resultset, containing those items that are not expected to be hidden in \s-1OPAC\s0
for the passed \fIKoha::Patron\fR object that is passed.
.PP
The \fIOpacHiddenItems\fR, \fIhidelostitems\fR and \fIOpacHiddenItemsExceptions\fR system preferences
are honoured.
.PP
\fIfilter_out_lost\fR
.IX Subsection "filter_out_lost"
.PP
.Vb 1
\&    my $filered_items = $items\->filter_out_lost;
.Ve
.PP
Returns a new resultset, containing those items that are not marked as lost.
.PP
\fImove_to_biblio\fR
.IX Subsection "move_to_biblio"
.PP
.Vb 1
\& $items\->move_to_biblio($to_biblio);
.Ve
.PP
Move items to a given biblio.
.PP
\fIbatch_update\fR
.IX Subsection "batch_update"
.PP
.Vb 10
\&    Koha::Items\->search\->batch_update
\&        {
\&            new_values => {
\&                itemnotes => $new_item_notes,
\&                k         => $k,
\&            },
\&            regex_mod => {
\&                itemnotes_nonpublic => {
\&                    search => \*(Aqfoo\*(Aq,
\&                    replace => \*(Aqbar\*(Aq,
\&                    modifiers => \*(Aqgi\*(Aq,
\&                },
\&            },
\&            exclude_from_local_holds_priority => 1|0,
\&            callback => sub {
\&                # increment something here
\&            },
\&        }
\&    );
.Ve
.PP
Batch update the items.
.PP
Returns ( \f(CW$report\fR, \f(CW$self\fR )
Report has 2 keys:
  * modified_itemnumbers \- list of the modified itemnumbers
  * modified_fields \- number of fields modified
.PP
Parameters:
.IP "new_values" 4
.IX Item "new_values"
Allows to set a new value for given fields.
The key can be one of the item's column name, or one subfieldcode of a \s-1MARC\s0 subfields not linked with a Koha field
.IP "regex_mod" 4
.IX Item "regex_mod"
Allows to modify existing subfield's values using a regular expression
.IP "exclude_from_local_holds_priority" 4
.IX Item "exclude_from_local_holds_priority"
Set the passed boolean value to items.exclude_from_local_holds_priority
.IP "mark_items_returned" 4
.IX Item "mark_items_returned"
Move issues on these items to the old issues table, do not mark items found, or
adjust damaged/withdrawn statuses, or fines, or locations.
.IP "callback" 4
.IX Item "callback"
Callback function to call after an item has been modified
.PP
\fIsearch_ordered\fR
.IX Subsection "search_ordered"
.PP
.Vb 1
\& $items\->search_ordered;
.Ve
.PP
Search and sort items in a specific order, depending if serials are present or not
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
.PP
\fIobject_class\fR
.IX Subsection "object_class"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
Tomas Cohen Arazi <tomascohen@theke.io>
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
