.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Acquisition::Order 3pm"
.TH Koha::Acquisition::Order 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Acquisition::Order Object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fInew\fR
.IX Subsection "new"
.PP
Overloaded \fInew\fR method for backwards compatibility.
.PP
\fIstore\fR
.IX Subsection "store"
.PP
Overloaded \fIstore\fR method for backwards compatibility.
.PP
\fIcancel\fR
.IX Subsection "cancel"
.PP
.Vb 8
\&    $order\->cancel(
\&        {
\&            [
\&                reason        => $reason,
\&                delete_biblio => $delete_biblio
\&            ]
\&        }
\&    );
.Ve
.PP
This method marks an order as cancelled, optionally using the \fIreason\fR parameter.
As the order is cancelled, the (eventual) items linked to it are removed.
If \fIdelete_biblio\fR is passed, it will try to remove the linked biblio.
.PP
If either the items or biblio removal fails, an error message is added to the object
so the caller can take appropriate actions.
.PP
\fIadd_item\fR
.IX Subsection "add_item"
.PP
.Vb 1
\&  $order\->add_item( $itemnumber );
.Ve
.PP
Link an item to this order.
.PP
\fIbasket\fR
.IX Subsection "basket"
.PP
.Vb 1
\&    my $basket = $order\->basket;
.Ve
.PP
Returns the \fIKoha::Acquisition::Basket\fR object for the basket associated
to the order.
.PP
\fIfund\fR
.IX Subsection "fund"
.PP
.Vb 1
\&    my $fund = $order\->fund;
.Ve
.PP
Returns the \fIKoha::Acquisition::Fund\fR object for the fund (aqbudgets)
associated to the order.
.PP
\fIinvoice\fR
.IX Subsection "invoice"
.PP
.Vb 1
\&    my $invoice = $order\->invoice;
.Ve
.PP
Returns the \fIKoha::Acquisition::Invoice\fR object for the invoice associated
to the order.
.PP
It returns \fBundef\fR if no linked invoice is found.
.PP
\fIsubscription\fR
.IX Subsection "subscription"
.PP
.Vb 1
\&    my $subscription = $order\->subscription
.Ve
.PP
Returns the \fIKoha::Subscription\fR object for the subscription associated
to the order.
.PP
It returns \fBundef\fR if no linked subscription is found.
.PP
\fIcurrent_item_level_holds\fR
.IX Subsection "current_item_level_holds"
.PP
.Vb 1
\&    my $holds = $order\->current_item_level_holds;
.Ve
.PP
Returns the current item-level holds associated to the order. It returns a \fIKoha::Holds\fR
resultset.
.PP
\fIitems\fR
.IX Subsection "items"
.PP
.Vb 1
\&    my $items = $order\->items
.Ve
.PP
Returns the items associated to the order.
.PP
\fIbiblio\fR
.IX Subsection "biblio"
.PP
.Vb 1
\&    my $biblio = $order\->biblio
.Ve
.PP
Returns the bibliographic record associated to the order
.PP
\fIclaims\fR
.IX Subsection "claims"
.PP
.Vb 1
\&    my $claims = $order\->claims
.Ve
.PP
Return the claims history for this order
.PP
\fIclaim\fR
.IX Subsection "claim"
.PP
.Vb 1
\&    my $claim = $order\->claim
.Ve
.PP
Do claim for this order
.PP
\fIclaims_count\fR
.IX Subsection "claims_count"
.PP
my \f(CW$nb_of_claims\fR = \f(CW$order\fR\->claims_count;
.PP
This is the equivalent of \f(CW$order\fR\->claims\->count. Keeping it for retrocompatibilty.
.PP
\fIclaimed_date\fR
.IX Subsection "claimed_date"
.PP
my \f(CW$last_claim_date\fR = \f(CW$order\fR\->claimed_date;
.PP
This is the equivalent of \f(CW$order\fR\->claims\->last\->claimed_on. Keeping it for retrocompatibilty.
.PP
\fIcreator\fR
.IX Subsection "creator"
.PP
my \f(CW$creator\fR = \f(CW$order\fR\->creator;
.PP
Retrieves patron that created this order.
.PP
\fIduplicate_to\fR
.IX Subsection "duplicate_to"
.PP
.Vb 1
\&    my $duplicated_order = $order\->duplicate_to($basket, [$default_values]);
.Ve
.PP
Duplicate an existing order and attach it to a basket. \f(CW$default_values\fR can be specified as a hashref
that contain default values for the different order's attributes.
Items will be duplicated as well but barcodes will be set to null.
.PP
\fIpopulate_with_prices_for_ordering\fR
.IX Subsection "populate_with_prices_for_ordering"
.PP
Sets calculated values for an order \- all values are stored with full precision
regardless of rounding preference except for tax value which is calculated on
rounded values if requested
.PP
.Vb 1
\&    $order\->populate_with_prices_for_ordering()
.Ve
.PP
The values set are:
    rrp_tax_included
    rrp_tax_excluded
    ecost_tax_included
    ecost_tax_excluded
    tax_value_on_ordering
.PP
\fIpopulate_with_prices_for_receiving\fR
.IX Subsection "populate_with_prices_for_receiving"
.PP
Sets calculated values for an order \- all values are stored with full precision
regardless of rounding preference except for tax value which is calculated on
rounded values if requested
.PP
.Vb 1
\&    $order\->populate_with_prices_for_receiving()
.Ve
.PP
The values set are:
    unitprice_tax_included
    unitprice_tax_excluded
    tax_value_on_receiving
.PP
Note: When receiving, if the rounded value of the unitprice matches the rounded
value of the ecost then then ecost (full precision) is used.
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Acquisition::Order object
on the \s-1API.\s0
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
