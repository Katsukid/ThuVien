.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::REST::Plugin::Query 3pm"
.TH Koha::REST::Plugin::Query 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::REST::Plugin::Query
.SH "API"
.IX Header "API"
.SS "Mojolicious::Plugin methods"
.IX Subsection "Mojolicious::Plugin methods"
\fIregister\fR
.IX Subsection "register"
.SS "Helper methods"
.IX Subsection "Helper methods"
\fIextract_reserved_params\fR
.IX Subsection "extract_reserved_params"
.PP
.Vb 1
\&    my ( $filtered_params, $reserved_params ) = $c\->extract_reserved_params($params);
.Ve
.PP
Generates the \s-1DBIC\s0 query from the query parameters.
.PP
\fIdbic_merge_sorting\fR
.IX Subsection "dbic_merge_sorting"
.PP
.Vb 1
\&    $attributes = $c\->dbic_merge_sorting({ attributes => $attributes, params => $params });
.Ve
.PP
Generates the \s-1DBIC\s0 order_by attributes based on \fI\f(CI$params\fI\fR, and merges into \fI\f(CI$attributes\fI\fR.
.PP
\fIdbic_merge_prefetch\fR
.IX Subsection "dbic_merge_prefetch"
.PP
.Vb 1
\&    $attributes = $c\->dbic_merge_prefetch({ attributes => $attributes, result_set => $result_set });
.Ve
.PP
Generates the \s-1DBIC\s0 prefetch attribute based on embedded relations, and merges into \fI\f(CI$attributes\fI\fR.
.PP
\fI_build_query_params_from_api\fR
.IX Subsection "_build_query_params_from_api"
.PP
.Vb 1
\&    my $params = _build_query_params_from_api( $filtered_params, $reserved_params );
.Ve
.PP
Builds the params for searching on \s-1DBIC\s0 based on the selected matching algorithm.
Valid options are \fIcontains\fR, \fIstarts_with\fR, \fIends_with\fR and \fIexact\fR. Default is
\&\fIcontains\fR. If other value is passed, a Koha::Exceptions::WrongParameter exception
is raised.
.PP
\fImerge_q_params\fR
.IX Subsection "merge_q_params"
.PP
.Vb 1
\&    $c\->merge_q_params( $filtered_params, $q_params, $result_set );
.Ve
.PP
Merges parameters from \f(CW$q_params\fR into \f(CW$filtered_params\fR.
.PP
\fIstash_embed\fR
.IX Subsection "stash_embed"
.PP
.Vb 1
\&    $c\->stash_embed( { spec => $op_spec } );
.Ve
.PP
Unwraps and stashes the x\-koha-embed headers for use later query construction
.PP
\fIstash_overrides\fR
.IX Subsection "stash_overrides"
.PP
.Vb 5
\&    # Stash the overrides
\&    $c\->stash_overrides();
\&    #Use it
\&    my $overrides = $c\->stash(\*(Aqkoha.overrides\*(Aq);
\&    if ( $overrides\->{pickup_location} ) { ... }
.Ve
.PP
This helper method parses 'x\-koha\-override' headers and stashes the passed overriders
in the for of a \fIhashref\fR for easy use in controller methods.
.PP
\&\s-1FIXME:\s0 With the currently used JSON::Validator version we use, it is not possible to
use the validated and coerced data (it doesn't validate array-type headers) so this
implementation relies on manual parsing. Look at the JSON::Validator changelog for
reference: https://metacpan.org/changes/distribution/JSON\-Validator#L14
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_reserved_words\fR
.IX Subsection "_reserved_words"
.PP
.Vb 1
\&    my $reserved_words = _reserved_words();
.Ve
.PP
\fI_build_order_atom\fR
.IX Subsection "_build_order_atom"
.PP
.Vb 1
\&    my $order_atom = _build_order_atom( $string );
.Ve
.PP
Parses \fI\f(CI$string\fI\fR and outputs data valid for using in SQL::Abstract order_by attribute
according to the following rules:
.PP
.Vb 3
\&     string \-> I<string>
\&    +string \-> I<{ \-asc => string }>
\&    \-string \-> I<{ \-desc => string }>
.Ve
.PP
\fI_parse_embed\fR
.IX Subsection "_parse_embed"
.PP
.Vb 1
\&    my $embed = _parse_embed( $string );
.Ve
.PP
Parses \fI\f(CI$string\fI\fR and outputs data valid for passing to the Kohaa::Object(s)\->to_api
method.
.PP
\fI_merge_embed\fR
.IX Subsection "_merge_embed"
.PP
.Vb 1
\&    _merge_embed( $parsed_embed, $global_embed );
.Ve
.PP
Merges the hash referenced by \fI\f(CI$parsed_embed\fI\fR into \fI\f(CI$global_embed\fI\fR.
