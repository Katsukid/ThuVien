.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::AuthoritiesMarc 3pm"
.TH C4::AuthoritiesMarc 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::AuthoritiesMarc
.SS "GetAuthMARCFromKohaField"
.IX Subsection "GetAuthMARCFromKohaField"
.Vb 1
\&  ( $tag, $subfield ) = &GetAuthMARCFromKohaField ($kohafield,$authtypecode);
.Ve
.PP
returns tag and subfield linked to kohafield
.PP
Comment :
Suppose Kohafield is only linked to \s-1ONE\s0 subfield
.SS "SearchAuthorities"
.IX Subsection "SearchAuthorities"
.Vb 3
\&  (\e@finalresult, $nbresults)= &SearchAuthorities($tags, $and_or, 
\&     $excluding, $operator, $value, $offset,$length,$authtypecode,
\&     $sortby[, $skipmetadata])
.Ve
.PP
returns ref to array result and count of results returned
.SS "GuessAuthTypeCode"
.IX Subsection "GuessAuthTypeCode"
.Vb 1
\&  my $authtypecode = GuessAuthTypeCode($record);
.Ve
.PP
Get the record and tries to guess the adequate authtypecode from its content.
.SS "GuessAuthId"
.IX Subsection "GuessAuthId"
.Vb 1
\&  my $authtid = GuessAuthId($record);
.Ve
.PP
Get the record and tries to guess the adequate authtypecode from its content.
.SS "GetTagsLabels"
.IX Subsection "GetTagsLabels"
.Vb 1
\&  $tagslabel= &GetTagsLabels($forlibrarian,$authtypecode)
.Ve
.PP
returns a ref to hashref of authorities tag and subfield structure.
.PP
tagslabel usage :
.PP
.Vb 1
\&  $tagslabel\->{$tag}\->{$subfield}\->{\*(Aqattribute\*(Aq}
.Ve
.PP
where attribute takes values in :
.PP
.Vb 12
\&  lib
\&  tab
\&  mandatory
\&  repeatable
\&  authorised_value
\&  authtypecode
\&  value_builder
\&  kohafield
\&  seealso
\&  hidden
\&  isurl
\&  link
.Ve
.SS "AddAuthority"
.IX Subsection "AddAuthority"
.Vb 1
\&  $authid= &AddAuthority($record, $authid,$authtypecode)
.Ve
.PP
Either Create Or Modify existing authority.
returns authid of the newly created authority
.SS "DelAuthority"
.IX Subsection "DelAuthority"
.Vb 1
\&    DelAuthority({ authid => $authid, [ skip_merge => 1 ] });
.Ve
.PP
Deletes \f(CW$authid\fR and calls merge to cleanup linked biblio records.
Parameter skip_merge is used in authorities/merge.pl. You should normally not
use it.
.PP
skip_record_index will skip the indexation step.
.SS "ModAuthority"
.IX Subsection "ModAuthority"
.Vb 1
\&  $authid= &ModAuthority($authid,$record,$authtypecode, [ { skip_merge => 1 ] )
.Ve
.PP
Modifies authority record, optionally updates attached biblios.
The parameter skip_merge is optional and should be used with care.
.PP
skip_record_index will skip the indexation step.
.SS "GetAuthorityXML"
.IX Subsection "GetAuthorityXML"
.Vb 1
\&  $marcxml= &GetAuthorityXML( $authid)
.Ve
.PP
returns xml form of record \f(CW$authid\fR
.SS "GetAuthority"
.IX Subsection "GetAuthority"
.Vb 1
\&  $record= &GetAuthority( $authid)
.Ve
.PP
Returns MARC::Record of the authority passed in parameter.
.SS "FindDuplicateAuthority"
.IX Subsection "FindDuplicateAuthority"
.Vb 1
\&  $record= &FindDuplicateAuthority( $record, $authtypecode)
.Ve
.PP
return \f(CW$authid\fR,Summary if duplicate is found.
.PP
Comments : an improvement would be to return All the records that match.
.SS "BuildSummary"
.IX Subsection "BuildSummary"
.Vb 1
\&  $summary= &BuildSummary( $record, $authid, $authtypecode)
.Ve
.PP
Returns a hashref with a summary of the specified record.
.PP
Comment : authtypecode can be inferred from both record and authid.
Moreover, authid can also be inferred from \f(CW$record\fR.
Would it be interesting to delete those things.
.SS "GetAuthorizedHeading"
.IX Subsection "GetAuthorizedHeading"
.Vb 1
\&  $heading = &GetAuthorizedHeading({ record => $record, authid => $authid })
.Ve
.PP
Takes a MARC::Record object describing an authority record or an authid, and
returns a string representation of the first authorized heading. This routine
should be considered a temporary shim to ease the future migration of authority
data from C4::AuthoritiesMarc to the object-oriented Koha::*::Authority.
.SS "CompareFieldWithAuthority"
.IX Subsection "CompareFieldWithAuthority"
.Vb 1
\&  $match = &CompareFieldWithAuthority({ field => $field, authid => $authid })
.Ve
.PP
Takes a MARC::Field from a bibliographic record and an authid, and returns true if they match.
.SS "BuildAuthHierarchies"
.IX Subsection "BuildAuthHierarchies"
.Vb 1
\&  $text= &BuildAuthHierarchies( $authid, $force)
.Ve
.PP
return text containing trees for hierarchies
for them to be stored in auth_header
.PP
Example of text:
122,1314,2452;1324,2342,3,2452
.SS "BuildAuthHierarchy"
.IX Subsection "BuildAuthHierarchy"
.Vb 1
\&  $ref= &BuildAuthHierarchy( $record, $class,$authid)
.Ve
.PP
return a hashref in order to display hierarchy for record and final Authid \f(CW$authid\fR
.PP
\&\*(L"loopparents\*(R"
\&\*(L"loopchildren\*(R"
\&\*(L"class\*(R"
\&\*(L"loopauthid\*(R"
\&\*(L"current_value\*(R"
\&\*(L"value\*(R"
.SS "BuildAuthHierarchyBranch"
.IX Subsection "BuildAuthHierarchyBranch"
.Vb 1
\&  $branch = &BuildAuthHierarchyBranch( $tree, $authid[, $cnt])
.Ve
.PP
Return a data structure representing an authority hierarchy
given a list of authorities representing a single branch in
an authority hierarchy tree. \f(CW$authid\fR is the current node in
the tree (which may or may not be somewhere in the middle).
\&\f(CW$cnt\fR represents the level of the upper-most item, and is only
used when BuildAuthHierarchyBranch is called recursively (i.e.,
don't ever pass in anything but zero to it).
.SS "GenerateHierarchy"
.IX Subsection "GenerateHierarchy"
.Vb 1
\&  $hierarchy = &GenerateHierarchy($authid);
.Ve
.PP
Return an arrayref holding one or more \*(L"trees\*(R" representing
authority hierarchies.
.SS "GetHeaderAuthority"
.IX Subsection "GetHeaderAuthority"
.Vb 1
\&  $ref= &GetHeaderAuthority( $authid)
.Ve
.PP
return a hashref in order auth_header table data
.SS "AddAuthorityTrees"
.IX Subsection "AddAuthorityTrees"
.Vb 1
\&  $ref= &AddAuthorityTrees( $authid, $trees)
.Ve
.PP
return success or failure
.SS "merge"
.IX Subsection "merge"
.Vb 8
\&    $count = merge({
\&        mergefrom => $mergefrom,
\&        [ MARCfrom => $MARCfrom, ]
\&        [ mergeto => $mergeto, ]
\&        [ MARCto => $MARCto, ]
\&        [ biblionumbers => [ $a, $b, $c ], ]
\&        [ override_limit => 1, ]
\&    });
.Ve
.PP
Merge biblios linked to authority \f(CW$mergefrom\fR (mandatory parameter).
If \f(CW$mergeto\fR equals mergefrom, the linked biblio field is updated.
If \f(CW$mergeto\fR is different, the biblio field will be linked to \f(CW$mergeto\fR.
If \f(CW$mergeto\fR is missing, the biblio field is deleted.
.PP
MARCfrom is used to determine if a cleared subfield in the authority record
should be removed from a biblio. MARCto is used to populate the biblio
record with the updated values; if you do not pass it, the biblio field
will be deleted (same as missing mergeto).
.PP
Normally all biblio records linked to \f(CW$mergefrom\fR, will be considered. But
you can pass specific numbers via the biblionumbers parameter.
.PP
The parameter override_limit is used by the cron job to force larger
postponed merges.
.PP
Note: Although \f(CW$mergefrom\fR and \f(CW$mergeto\fR will normally be of the same
authority type, merge also supports moving to another authority type.
.SS "get_auth_type_location"
.IX Subsection "get_auth_type_location"
.Vb 1
\&  my ($tag, $subfield) = get_auth_type_location($auth_type_code);
.Ve
.PP
Get the tag and subfield used to store the heading type
for indexing purposes.  The \f(CW$auth_type\fR parameter is
optional; if it is not supplied, assume ''.
.PP
This routine searches the \s-1MARC\s0 authority framework
for the tag and subfield whose kohafield is 
\&\f(CW\*(C`auth_header.authtypecode\*(C'\fR; if no such field is
defined in the framework, default to the hardcoded value
specific to the \s-1MARC\s0 format.
.SS "compare_fields"
.IX Subsection "compare_fields"
.Vb 1
\&  my match = compare_fields($field1, $field2, \*(Aqabcde\*(Aq);
.Ve
.PP
Compares the listed subfields of both fields and return true if they all match
.SS "_after_authority_action_hooks"
.IX Subsection "_after_authority_action_hooks"
Helper method that takes care of calling all plugin hooks
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Paul \s-1POULAIN\s0 paul.poulain@free.fr
Ere Maijala ere.maijala@helsinki.fi
