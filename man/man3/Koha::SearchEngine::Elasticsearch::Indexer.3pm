.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::SearchEngine::Elasticsearch::Indexer 3pm"
.TH Koha::SearchEngine::Elasticsearch::Indexer 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::SearchEngine::Elasticsearch::Indexer \- handles adding new records to the index
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $indexer = Koha::SearchEngine::Elasticsearch::Indexer\->new(
\&        { index => Koha::SearchEngine::BIBLIOS_INDEX } );
\&    $indexer\->drop_index();
\&    $indexer\->update_index(\e@biblionumbers, \e@records);
.Ve
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.ie n .IP """Koha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_OK""" 4
.el .IP "\f(CWKoha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_OK\fR" 4
.IX Item "Koha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_OK"
Represents an index state where index is created and in a working state.
.ie n .IP """Koha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_REINDEX_REQUIRED""" 4
.el .IP "\f(CWKoha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_REINDEX_REQUIRED\fR" 4
.IX Item "Koha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_REINDEX_REQUIRED"
Not currently used, but could be useful later, for example if can detect when new field or mapping added.
.ie n .IP """Koha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_RECREATE_REQUIRED""" 4
.el .IP "\f(CWKoha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_RECREATE_REQUIRED\fR" 4
.IX Item "Koha::SearchEngine::Elasticsearch::Indexer::INDEX_STATUS_RECREATE_REQUIRED"
Representings an index state where index needs to be recreated and is not in a working state.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "update_index($biblionums, $records)"
.el .SS "update_index($biblionums, \f(CW$records\fP)"
.IX Subsection "update_index($biblionums, $records)"
.Vb 5
\&    try {
\&        $self\->update_index($biblionums, $records);
\&    } catch {
\&        die("Something went wrong trying to update index:" .  $_[0]);
\&    }
.Ve
.PP
Converts \f(CW\*(C`MARC::Records\*(C'\fR \f(CW$records\fR to Elasticsearch documents and performs
an update request for these records on the Elasticsearch index.
.ie n .IP "$biblionums" 4
.el .IP "\f(CW$biblionums\fR" 4
.IX Item "$biblionums"
Arrayref of biblio numbers for the \f(CW$records\fR, the order must be the same as
and match up with \f(CW$records\fR.
.ie n .IP "$records" 4
.el .IP "\f(CW$records\fR" 4
.IX Item "$records"
Arrayref of \f(CW\*(C`MARC::Record\*(C'\fRs.
.SS "set_index_status_ok"
.IX Subsection "set_index_status_ok"
Convenience method for setting index status to \f(CW\*(C`INDEX_STATUS_OK\*(C'\fR.
.SS "is_index_status_ok"
.IX Subsection "is_index_status_ok"
Convenience method for checking if index status is \f(CW\*(C`INDEX_STATUS_OK\*(C'\fR.
.SS "set_index_status_reindex_required"
.IX Subsection "set_index_status_reindex_required"
Convenience method for setting index status to \f(CW\*(C`INDEX_REINDEX_REQUIRED\*(C'\fR.
.SS "is_index_status_reindex_required"
.IX Subsection "is_index_status_reindex_required"
Convenience method for checking if index status is \f(CW\*(C`INDEX_STATUS_REINDEX_REQUIRED\*(C'\fR.
.SS "set_index_status_recreate_required"
.IX Subsection "set_index_status_recreate_required"
Convenience method for setting index status to \f(CW\*(C`INDEX_STATUS_RECREATE_REQUIRED\*(C'\fR.
.SS "is_index_status_recreate_required"
.IX Subsection "is_index_status_recreate_required"
Convenience method for checking if index status is \f(CW\*(C`INDEX_STATUS_RECREATE_REQUIRED\*(C'\fR.
.SS "index_status($status)"
.IX Subsection "index_status($status)"
Will either set the current index status to \f(CW$status\fR and return \f(CW$status\fR,
or return the current index status if called with no arguments.
.ie n .IP "$status" 4
.el .IP "\f(CW$status\fR" 4
.IX Item "$status"
Optional argument. If passed will set current index status to \f(CW$status\fR if \f(CW$status\fR is
a valid status. See \*(L"\s-1CONSTANTS\*(R"\s0.
.SS "update_mappings"
.IX Subsection "update_mappings"
Generate Elasticsearch mappings from mappings stored in database and
perform a request to update Elasticsearch index mappings. Will throw an
error and set index status to \f(CW\*(C`INDEX_STATUS_RECREATE_REQUIRED\*(C'\fR if update
failes.
.ie n .SS "update_index_background($record_numbers, $server)"
.el .SS "update_index_background($record_numbers, \f(CW$server\fP)"
.IX Subsection "update_index_background($record_numbers, $server)"
This has exactly the same \s-1API\s0 as \f(CW\*(C`update_index\*(C'\fR however it'll
return immediately. It'll start a background process that does the adding.
.PP
If it fails to add to Elasticsearch then it'll add to a queue that will cause
it to be updated by a regular index cron job in the future.
.SS "index_records"
.IX Subsection "index_records"
This function takes an array of record numbers and fetches the records to send to update_index
for actual indexing.
.PP
If \f(CW$records\fR parameter is provided the records will be used as-is, this is only utilized for authorities
at the moment.
.PP
The other variables are used for parity with Zebra indexing calls. Currently the calls are passed through
to Zebra as well.
.SS "delete_index($biblionums)"
.IX Subsection "delete_index($biblionums)"
\&\f(CW$biblionums\fR is an arrayref of biblionumbers to delete from the index.
.SS "delete_index_background($biblionums)"
.IX Subsection "delete_index_background($biblionums)"
Identical to \*(L"delete_index($biblionums)\*(R"
.SS "drop_index"
.IX Subsection "drop_index"
Drops the index from the Elasticsearch server.
.SS "create_index"
.IX Subsection "create_index"
Creates the index (including mappings) on the Elasticsearch server.
.SS "index_exists"
.IX Subsection "index_exists"
Checks if index has been created on the Elasticsearch server. Returns \f(CW1\fR or the
empty string to indicate whether index exists or not.
.SH "AUTHOR"
.IX Header "AUTHOR"
.ie n .IP "Chris Cormack ""<chrisc@catalyst.net.nz>""" 4
.el .IP "Chris Cormack \f(CW<chrisc@catalyst.net.nz>\fR" 4
.IX Item "Chris Cormack <chrisc@catalyst.net.nz>"
.PD 0
.ie n .IP "Robin Sheat ""<robin@catalyst.net.nz>""" 4
.el .IP "Robin Sheat \f(CW<robin@catalyst.net.nz>\fR" 4
.IX Item "Robin Sheat <robin@catalyst.net.nz>"
