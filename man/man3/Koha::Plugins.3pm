.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Plugins 3pm"
.TH Koha::Plugins 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Plugins \- Module for loading and managing plugins.
.SS "new"
.IX Subsection "new"
Constructor
.SS "call"
.IX Subsection "call"
Calls a plugin method for all enabled plugins
.PP
.Vb 1
\&    @responses = Koha::Plugins\->call($method, @args)
.Ve
.PP
Note: Pass your arguments as refs, when you want subsequent plugins to use the value
updated by preceding plugins, provided that these plugins support that.
.SS "get_enabled_plugins"
.IX Subsection "get_enabled_plugins"
Returns a list of enabled plugins.
.PP
.Vb 1
\&    @plugins = Koha::Plugins\->get_enabled_plugins();
.Ve
.SS "GetPlugins"
.IX Subsection "GetPlugins"
This will return a list of all available plugins, optionally limited by
method or metadata value.
.PP
.Vb 4
\&    my @plugins = Koha::Plugins::GetPlugins({
\&        method => \*(Aqsome_method\*(Aq,
\&        metadata => { some_key => \*(Aqsome_value\*(Aq },
\&    });
.Ve
.PP
The method and metadata parameters are optional.
If you pass multiple keys in the metadata hash, all keys must match.
.SS "InstallPlugins"
.IX Subsection "InstallPlugins"
\&\fBKoha::Plugins::InstallPlugins()\fR
.PP
This method iterates through all plugins physically present on a system.
For each plugin module found, it will test that the plugin can be loaded,
and if it can, will store its available methods in the plugin_methods table.
.PP
\&\s-1NOTE:\s0 We reload all plugins here as a protective measure in case someone
has removed a plugin directly from the system without using the \s-1UI\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle.m.hall@gmail.com>
