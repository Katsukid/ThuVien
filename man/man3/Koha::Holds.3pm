.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Holds 3pm"
.TH Koha::Holds 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Holds \- Koha Hold object set class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIfilter_by_found\fR
.IX Subsection "filter_by_found"
.PP
.Vb 1
\&    my $found_holds = $holds\->filter_by_found;
.Ve
.PP
Returns a filtered resultset without holds that are considered \fIfound\fR.
i.e. 'P', 'T' and 'W'.
.PP
\fIwaiting\fR
.IX Subsection "waiting"
.PP
returns a set of holds that are waiting from an existing set
.PP
\fIprocessing\fR
.IX Subsection "processing"
.PP
returns a set of holds that are processing from an existing set
.PP
\fIunfilled\fR
.IX Subsection "unfilled"
.PP
returns a set of holds that are unfilled from an existing set
.PP
\fIforced_hold_level\fR
.IX Subsection "forced_hold_level"
.PP
If a patron has multiple holds for a single record,
those holds must be either all record level holds,
or they must all be item level holds.
.PP
This method should be used with Hold sets where all
Hold objects share the same patron and record.
.PP
This method will return 'item' if the patron has
at least one item level hold. It will return 'record'
if the patron has holds but none are item level,
Finally, if the patron has no holds, it will return
undef which indicates the patron may select either
record or item level holds, barring any other rules
that would prevent one or the other.
.PP
\fIget_items_that_can_fill\fR
.IX Subsection "get_items_that_can_fill"
.PP
.Vb 1
\&    my $items = $holds\->get_items_that_can_fill();
.Ve
.PP
Return the list of items that can fill the hold set.
.PP
Items that are not:
.PP
.Vb 6
\&  in transit
\&  waiting
\&  lost
\&  widthdrawn
\&  not for loan
\&  not on loan
.Ve
.PP
\fIfilter_by_has_cancellation_requests\fR
.IX Subsection "filter_by_has_cancellation_requests"
.PP
.Vb 1
\&    my $with_cancellation_reqs = $holds\->filter_by_has_cancellation_requests;
.Ve
.PP
Returns a filtered resultset only containing holds that have cancellation requests.
.PP
\fIfilter_out_has_cancellation_requests\fR
.IX Subsection "filter_out_has_cancellation_requests"
.PP
.Vb 1
\&    my $holds_without_cancellation_requests = $holds\->filter_out_has_cancellation_requests;
.Ve
.PP
Returns a filtered resultset without holds with cancellation requests.
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
.PP
\fIobject_class\fR
.IX Subsection "object_class"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
