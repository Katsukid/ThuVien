.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::CourseReserves 3pm"
.TH C4::CourseReserves 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::CourseReserves \- Koha course reserves module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::CourseReserves;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module deals with course reserves.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetCourse"
.IX Subsection "GetCourse"
.Vb 1
\&    $course = GetCourse( $course_id );
.Ve
.SS "ModCourse"
.IX Subsection "ModCourse"
.Vb 1
\&    ModCourse( [ course_id => $id ] [, course_name => $course_name ] [etc...] );
.Ve
.SS "GetCourses"
.IX Subsection "GetCourses"
.Vb 1
\&  @courses = GetCourses( [ fieldname => $value ] [, fieldname2 => $value2 ] [etc...] );
.Ve
.SS "DelCourse"
.IX Subsection "DelCourse"
.Vb 1
\&  DelCourse( $course_id );
.Ve
.SS "EnableOrDisableCourseItems"
.IX Subsection "EnableOrDisableCourseItems"
.Vb 1
\&  EnableOrDisableCourseItems( course_id => $course_id, enabled => $enabled );
\&
\&  For each item on reserve for this course,
\&  if the course item has no active course reserves,
\&  swap the fields for the item to make it \*(Aqnormal\*(Aq
\&  again.
\&
\&  enabled => \*(Aqyes\*(Aq to enable course items
\&  enabled => \*(Aqno\*(Aq to disable course items
.Ve
.SS "EnableOrDisableCourseItem"
.IX Subsection "EnableOrDisableCourseItem"
.Vb 1
\&    EnableOrDisableCourseItem( ci_id => $ci_id );
.Ve
.SS "GetCourseInstructors"
.IX Subsection "GetCourseInstructors"
.Vb 1
\&    @$borrowers = GetCourseInstructors( $course_id );
.Ve
.SS "ModCourseInstructors"
.IX Subsection "ModCourseInstructors"
.Vb 1
\&    ModCourseInstructors( mode => $mode, course_id => $course_id, [ cardnumbers => $cardnumbers ] OR [ borrowernumbers => $borrowernumbers  );
\&
\&    $mode can be \*(Aqreplace\*(Aq, \*(Aqadd\*(Aq, or \*(Aqdelete\*(Aq
\&
\&    $cardnumbers and $borrowernumbers are both references to arrays
\&
\&    Use either cardnumbers or borrowernumber, but not both.
.Ve
.SS "GetCourseItem {"
.IX Subsection "GetCourseItem {"
.Vb 1
\&  Given one of biblionumber, itenumber, or ci_id, returns hashref of the course_items values
\&
\&  $course_item = GetCourseItem( itemnumber => $itemnumber [, ci_id => $ci_id ] );
\&  $course_item = GetCourseItem( biblionumber => $biblionumber [, ci_id => $ci_id ]);
\&  $course_item = GetCourseItem( ci_id => $ci_id );
.Ve
.SS "ModCourseItem {"
.IX Subsection "ModCourseItem {"
.Vb 1
\&  ModCourseItem( %params );
\&
\&  Creates or modifies an existing course item. Must be passed either an itemnumber or biblionumber parameter
.Ve
.SS "_AddCourseItem"
.IX Subsection "_AddCourseItem"
.Vb 1
\&    my $ci_id = _AddCourseItem( %params );
.Ve
.SS "_UpdateCourseItem"
.IX Subsection "_UpdateCourseItem"
.Vb 1
\&  _UpdateCourseItem( %params );
.Ve
.SS "_RevertFields"
.IX Subsection "_RevertFields"
.Vb 1
\&    _RevertFields( ci_id => $ci_id, fields => \e@fields_to_revert );
\&
\&    Copies fields from course item storage back to the actual item
.Ve
.SS "_SwapAllFields"
.IX Subsection "_SwapAllFields"
.Vb 1
\&    _SwapAllFields( $ci_id );
.Ve
.SS "GetCourseItems {"
.IX Subsection "GetCourseItems {"
.Vb 4
\&  $course_items = GetCourseItems(
\&      [course_id => $course_id]
\&      [, itemnumber => $itemnumber ]
\&  );
.Ve
.SS "DelCourseItem {"
.IX Subsection "DelCourseItem {"
.Vb 1
\&  DelCourseItem( ci_id => $cr_id );
.Ve
.SS "GetCourseReserve {"
.IX Subsection "GetCourseReserve {"
.Vb 1
\&  $course_item = GetCourseReserve( %params );
.Ve
.SS "ModCourseReserve"
.IX Subsection "ModCourseReserve"
.Vb 1
\&    $id = ModCourseReserve( %params );
.Ve
.SS "GetCourseReserves {"
.IX Subsection "GetCourseReserves {"
.Vb 1
\&  $course_reserves = GetCourseReserves( %params );
\&
\&  Required:
\&      course_id OR ci_id
\&  Optional:
\&      include_items   => 1,
\&      include_count   => 1,
\&      include_courses => 1,
.Ve
.SS "DelCourseReserve {"
.IX Subsection "DelCourseReserve {"
.Vb 1
\&  DelCourseReserve( cr_id => $cr_id );
.Ve
.SS "GetItemCourseReservesInfo"
.IX Subsection "GetItemCourseReservesInfo"
.Vb 2
\&    my $arrayref = GetItemCourseReservesInfo( itemnumber => $itemnumber );
\&    my $arrayref = GetItemCourseReservesInfo( biblionumber => $biblionumber );
\&
\&    For a given itemnumber or biblionumber, returns an arrayref of reserves hashrefs,
\&    with a course hashref under the key \*(Aqcourse\*(Aq
.Ve
.SS "CountCourseReservesForItem"
.IX Subsection "CountCourseReservesForItem"
.Vb 1
\&    $bool = CountCourseReservesForItem( %params );
\&
\&    ci_id \- course_item id
\&    OR
\&    itemnumber \- course_item itemnumber
\&    OR
\&    biblionumber \- course_item biblionumber
\&
\&    enabled = \*(Aqyes\*(Aq or \*(Aqno\*(Aq
\&    Optional, if not supplied, counts reserves
\&    for both enabled and disabled courses
.Ve
.SS "SearchCourses"
.IX Subsection "SearchCourses"
.Vb 1
\&    my $courses = SearchCourses( term => $search_term, enabled => \*(Aqyes\*(Aq );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
