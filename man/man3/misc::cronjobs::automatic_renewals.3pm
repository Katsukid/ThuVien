.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "misc::cronjobs::automatic_renewals 3pm"
.TH misc::cronjobs::automatic_renewals 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
automatic_renewals.pl \- cron script to renew loans
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&./automatic_renewals.pl [\-c|\-\-confirm] [\-s|\-\-send\-notices] [\-d|\-\-digest] [\-b|\-\-digest\-per\-branch] [\-v|\-\-verbose]
.PP
or, in crontab:
# Once every day for digest messages
0 3 * * * automatic_renewals.pl \-c \-d
# Three times a day for non digest messages
0 0,8,16 * * * automatic_renewals.pl \-c
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script searches for issues scheduled for automatic renewal
(issues.auto_renew). If there are still renews left (Renewals allowed)
and the renewal isn't premature (No Renewal before) the issue is renewed.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-s|\-\-send\-notices\fR" 4
.IX Item "-s|--send-notices"
\&\s-1DEPRECATED:\s0 The system preference AutoRenewalNotices should be used to determine
whether notices are sent or not
Send \s-1AUTO_RENEWALS\s0 notices to patrons if the auto renewal has been done.
.IP "\fB\-v|\-\-verbose\fR" 4
.IX Item "-v|--verbose"
Print report to standard out.
.IP "\fB\-c|\-\-confirm\fR" 4
.IX Item "-c|--confirm"
Without this parameter no changes will be made
.IP "\fB\-b|\-\-digest\-per\-branch\fR" 4
.IX Item "-b|--digest-per-branch"
Flag to indicate that generation of message digests should be
performed separately for each branch.
.Sp
A patron could potentially have loans at several different branches
There is no natural branch to set as the sender on the aggregated
message in this situation so the default behavior is to use the
borrowers home branch.  This could surprise to the borrower when
message sender is a library where they have not borrowed anything.
.Sp
Enabling this flag ensures that the issuing library is the sender of
the digested message.  It has no effect unless the borrower has
chosen 'Digests only' on the advance messages.
.SH "METHODS"
.IX Header "METHODS"
.SS "send_digests"
.IX Subsection "send_digests"
.Vb 4
\&    send_digests({
\&        digests => ...,
\&        letter_code => ...,
\&    })
.Ve
.PP
Enqueue digested letters.
.PP
Parameters:
.ie n .IP "$digests" 4
.el .IP "\f(CW$digests\fR" 4
.IX Item "$digests"
Reference to the array of digested messages.
.ie n .IP "$letter_code" 4
.el .IP "\f(CW$letter_code\fR" 4
.IX Item "$letter_code"
String that denote the letter code.
