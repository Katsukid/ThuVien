.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Edifact::Order 3pm"
.TH Koha::Edifact::Order 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Edifact::Order
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Format an Edifact Order message from a Koha basket
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Generates an Edifact format Order message for a Koha basket.
Normally the only methods used directly by the caller would be
new to set up the message, encode to return the formatted message
and filename to obtain a name under which to store the message
.SH "BUGS"
.IX Header "BUGS"
Should integrate into Koha::Edifact namespace
Can caller interface be made cleaner?
Make handling of \s-1GIR\s0 segments more customizable
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 5
\&  my $edi_order = Edifact::Order\->new(
\&  orderlines => \e@orderlines,
\&  vendor     => $vendor_edi_account,
\&  ean        => $library_ean
\&  );
\&
\&  instantiate the Edifact::Order object, all parameters are Schema::Resultset objects
\&  Called in Koha::Edifact create_edi_order
.Ve
.SS "filename"
.IX Subsection "filename"
.Vb 1
\&   my $filename = $edi_order\->filename()
\&
\&   returns a filename for the edi order. The filename embeds a reference to the
\&   basket the message was created to encode
.Ve
.SS "encode"
.IX Subsection "encode"
.Vb 1
\&   my $edifact_message = $edi_order\->encode();
\&
\&   Encodes the basket as a valid edifact message ready for transmission
.Ve
.SS "initial_service_segments"
.IX Subsection "initial_service_segments"
.Vb 1
\&    Creates the service segments which begin the message
.Ve
.SS "interchange_header"
.IX Subsection "interchange_header"
.Vb 2
\&    Return an interchange header encoding sender and recipient
\&    ids message date and standards
.Ve
.SS "user_data_message_segments"
.IX Subsection "user_data_message_segments"
.Vb 1
\&    Include message data within the encoded message
.Ve
.SS "message_trailer"
.IX Subsection "message_trailer"
.Vb 2
\&    Terminate message data including control data on number
\&    of messages and segments included
.Ve
.SS "trailing_service_segments"
.IX Subsection "trailing_service_segments"
.Vb 1
\&   Include the service segments occurring at the end of the message
.Ve
.SS "interchange_control_reference"
.IX Subsection "interchange_control_reference"
.Vb 1
\&   Returns the unique interchange control reference as a 14 digit number
.Ve
.SS "message_reference"
.IX Subsection "message_reference"
.Vb 6
\&    On generates and subsequently returns the unique message
\&    reference number as a 12 digit number preceded by ME, to generate a new number
\&    pass the string \*(Aqnew\*(Aq.
\&    In practice we encode 1 message per transmission so there is only one message
\&    referenced. were we to encode multiple messages a new reference would be
\&    neaded for each
.Ve
.SS "message_header"
.IX Subsection "message_header"
.Vb 1
\&    Commences a new message
.Ve
.SS "interchange_trailer"
.IX Subsection "interchange_trailer"
.Vb 2
\&    returns the UNZ segment which ends the tranmission encoding the
\&    message count and control reference for the interchange
.Ve
.SS "order_msg_header"
.IX Subsection "order_msg_header"
.Vb 1
\&    Formats the message header segments
.Ve
.SS "beginning_of_message"
.IX Subsection "beginning_of_message"
.Vb 1
\&    Returns the BGM segment which includes the Koha basket number
.Ve
.SS "name_and_address"
.IX Subsection "name_and_address"
.Vb 3
\&    Parameters: Function ( BUYER, DELIVERY, INVOICE, SUPPLIER)
\&                Id
\&                Agency
\&
\&    Returns a NAD segment containg the id and agency for for the Function
\&    value. Handles the fact that NAD segments encode the value for \*(AqEAN\*(Aq differently
\&    to elsewhere.
.Ve
.SS "order_line"
.IX Subsection "order_line"
.Vb 1
\&    Creates the message segments wncoding an order line
.Ve
.SS "item_description"
.IX Subsection "item_description"
.Vb 2
\&    Encodes the biblio item fields Author, title, publisher, date of publication
\&    binding
.Ve
.SS "imd_segment"
.IX Subsection "imd_segment"
.Vb 2
\&    Formats an IMD segment, handles the chunking of data into the 35 character
\&    lengths required and the creation of repeat segments
.Ve
.SS "gir_segments"
.IX Subsection "gir_segments"
.Vb 1
\&    Add item level information
.Ve
.SS "add_gir_identity_number"
.IX Subsection "add_gir_identity_number"
.Vb 2
\&    Handle the formatting of a GIR element
\&    return empty string if no data
.Ve
.SS "add_seg"
.IX Subsection "add_seg"
.Vb 2
\&    Adds a parssed array of segments to the objects segment list
\&    ensures all segments are properly terminated by \*(Aq
.Ve
.SS "lin_segment"
.IX Subsection "lin_segment"
.Vb 2
\&    Adds a LIN segment consisting of the line number and the ean number
\&    if the passed isbn is valid
.Ve
.SS "additional_product_id"
.IX Subsection "additional_product_id"
.Vb 1
\&    Add a PIA segment for an additional product id
.Ve
.SS "message_date_segment"
.IX Subsection "message_date_segment"
.Vb 1
\&    Passed a DateTime object returns a correctly formatted DTM segment
.Ve
.SS "_const"
.IX Subsection "_const"
.Vb 3
\&    Stores and returns constant strings for service_string_advice
\&    and message_identifier
\&    TBD replace with class variables
.Ve
.SS "_interchange_sr_identifier"
.IX Subsection "_interchange_sr_identifier"
.Vb 1
\&    Format sender and receipient identifiers for use in the interchange header
.Ve
.SS "encode_text"
.IX Subsection "encode_text"
.Vb 2
\&    Encode textual data into the standard character set ( iso 8859\-1 )
\&    and quote any Edifact metacharacters
.Ve
.SS "msg_date_string"
.IX Subsection "msg_date_string"
.Vb 2
\&    Convenient routine which returns message date as a Y\-m\-d string
\&    useful if the caller wants to log date of creation
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&   Colin Campbell <colin.campbell@ptfs\-europe.com>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&   Copyright 2014,2015,2016 PTFS\-Europe Ltd
\&   This program is free software, You may redistribute it under
\&   under the terms of the GNU General Public License
.Ve
