.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::SearchEngine::Search 3pm"
.TH Koha::SearchEngine::Search 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::SearchEngine::Search \- instantiate the search object that corresponds to
the "SearchEngine" system preference.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This allows you to be agnostic about what the search engine configuration is
and just get whatever search object you need.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Koha::SearchEngine::Search;
\&    my $searcher = Koha::SearchEngine::Search\->new();
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates a new \f(CW\*(C`Search\*(C'\fR of whatever the relevant type is.
.SS "extract_biblionumber"
.IX Subsection "extract_biblionumber"
.Vb 1
\&    my $biblionumber = $searcher\->extract_biblionumber( $marc );
.Ve
.PP
Returns the biblionumber from \f(CW$marc\fR. The routine is called from the
extract_biblionumber method of the specific search engine.
.SS "pagination_bar"
.IX Subsection "pagination_bar"
my ( \f(CW$PAGE_NUMBERS\fR, \f(CW$hits_to_paginate\fR, \f(CW$pages\fR, \f(CW$current_page_number\fR,
    \f(CW$previous_page_offset\fR, \f(CW$next_page_offset\fR, \f(CW$last_page_offset\fR ) = Koha::SearchEngine::Search\->pagination_bar(
    {
        hits              => \f(CW$hits\fR,
        max_result_window => \f(CW$max_result_window\fR,
        results_per_page  => \f(CW$results_per_page\fR,
        offset            => \f(CW$offset\fR,
        sort_by           => \e@sort_by
    }
  );
.PP
Returns the variables needed for the page\-nubers.inc to build search results
