.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::MetadataRecord 3pm"
.TH Koha::MetadataRecord 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::MetadataRecord \- base class for metadata records
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $record = new Koha::MetadataRecord({ \*(Aqrecord\*(Aq => $record });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object-oriented class that encapsulates all metadata (i.e. bibliographic
and authority) records in Koha.
.SS "new"
.IX Subsection "new"
.Vb 6
\&    my $metadata_record = new Koha::MetadataRecord({
\&                                record => $record,
\&                                schema => $schema,
\&                                format => $format,
\&                                id     => $id
\&                          });
.Ve
.PP
Returns a Koha::MetadataRecord object encapsulating record metadata.
.PP
\&\f(CW$record\fR is expected to be a deserialized object (for example
a MARC::Record or XML::LibXML::Document object or \s-1JSON\s0).
.PP
\&\f(CW$schema\fR is used to describe the metadata schema (for example
marc21, unimarc, dc, mods, etc).
.PP
\&\f(CW$format\fR is used to specify the serialization format. It is important
for Koha::RecordProcessor because it will pick the right Koha::Filter
implementation based on this parameter. Valid values are:
.PP
.Vb 3
\&   MARC (for MARC::Record objects)
\&   XML  (for XML::LibXML::Document objects)
\&   JSON (for JSON objects)
.Ve
.PP
(optional) \f(CW$id\fR is used so the record carries its own id and Koha doesn't
need to look for it inside the record.
.SS "createMergeHash"
.IX Subsection "createMergeHash"
Create a hash for use when merging records. At the moment the only
metadata schema supported is \s-1MARC.\s0
.SS "stripWhitespaceChars"
.IX Subsection "stripWhitespaceChars"
.Vb 1
\&    $record = Koha::MetadataRecord::stripWhitespaceChars( $record );
.Ve
.PP
Strip leading and trailing whitespace characters from input fields.
