.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "misc::cronjobs::membership_expiry 3pm"
.TH misc::cronjobs::membership_expiry 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
membership_expiry.pl \- cron script to put membership expiry reminders into the message queue
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&./membership_expiry.pl \-c
.PP
or, in crontab:
.PP
0 1 * * * membership_expiry.pl \-c
.PP
Options:
   \-\-help                   brief help message
   \-\-man                    full documentation
   \-\-where <conditions>     where clause to add to the query
   \-v \-verbose              verbose mode
   \-n \-\-nomail              if supplied, messages will be output to \s-1STDOUT\s0 and no email or sms will be sent
   \-c \-\-confirm             commit changes to db, no action will be taken unless this switch is included
   \-b \-\-branch <branchname> only deal with patrons from this library/branch
   \-\-before=X               include patrons expiring a number of days \s-1BEFORE\s0 the date set by the preference
   \-\-after=X                include patrons expiring a number of days \s-1AFTER\s0  the date set by the preference
   \-l \-\-letter <lettercode> use a specific notice rather than the default
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script sends membership expiry reminder notices to patrons, by email and sms.
It queues them in the message queue, which is processed by
the process_message_queue.pl cronjob.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 8
.IX Item "--help"
Print a brief help message and exits.
.IP "\fB\-\-man\fR" 8
.IX Item "--man"
Prints the manual page and exits.
.IP "\fB\-v\fR" 8
.IX Item "-v"
Verbose. Without this flag set, only fatal errors are reported.
.IP "\fB\-n\fR" 8
.IX Item "-n"
Do not send any email. Membership expire notices that would have been sent to
the patrons are printed to standard out.
.IP "\fB\-c\fR" 8
.IX Item "-c"
Confirm flag: Add this option. The script will only print a usage
statement otherwise.
.IP "\fB\-branch\fR" 8
.IX Item "-branch"
Optional branchcode to restrict the cronjob to that branch.
.IP "\fB\-before\fR" 8
.IX Item "-before"
Optional parameter to extend the selection with a number of days \s-1BEFORE\s0
the date set by the preference.
.IP "\fB\-after\fR" 8
.IX Item "-after"
Optional parameter to extend the selection with a number of days \s-1AFTER\s0
the date set by the preference.
.IP "\fB\-where\fR" 8
.IX Item "-where"
Use this option to specify a condition built with columns from the borrowers table
.Sp
e.g.
\&\-\-where 'lastseen \s-1IS NOT NULL\s0'
will only notify patrons who have been seen.
.IP "\fB\-letter\fR" 8
.IX Item "-letter"
Optional parameter to use another notice than the default: \s-1MEMBERSHIP_EXPIRY\s0
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The content of the messages is configured in Tools \-> Notices and slips. Use the \s-1MEMBERSHIP_EXPIRY\s0 notice or
supply another via the parameters.
.PP
Typically, messages are prepared for each patron when the memberships are going to expire.
.PP
These emails are staged in the outgoing message queue, as are messages
produced by other features of Koha. This message queue must be
processed regularly by the
\&\fImisc/cronjobs/process_message_queue.pl\fR program.
.PP
In the event that the \f(CW\*(C`\-n\*(C'\fR flag is passed to this program, no emails
are sent. Instead, messages are sent on standard output from this
program.
.PP
Notices can contain variables enclosed in double angle brackets like
<<this>>. Those variables will be replaced with values
specific to the soon expiring members.
Available variables are:
.IP "<<borrowers.*>>" 4
.IX Item "<<borrowers.*>>"
any field from the borrowers table
.IP "<<branches.*>>" 4
.IX Item "<<branches.*>>"
any field from the branches table
