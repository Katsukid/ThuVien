.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Script 3pm"
.TH Koha::Script 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Script \- Koha scripts base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Koha::Script
\&    use Koha::Script \-cron;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class should be used in all scripts. It sets the interface and userenv appropriately.
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 6
\&    my $script = Koha::Script\->new(
\&        {
\&            script    => $0, # mandatory
\&          [ lock_name => \*(Aqmy_script\*(Aq ]
\&        }
\&    );
.Ve
.PP
Create a new Koha::Script object. The \fIscript\fR parameter is mandatory,
and will usually be passed \fI\f(CI$0\fI\fR in the caller script. The \fIlock_name\fR
parameter is optional, and is used to generate the lock file if passed.
.PP
\fIlock_exec\fR
.IX Subsection "lock_exec"
.PP
.Vb 7
\&    # die if cannot get the lock
\&    try {
\&        $script\->lock_exec;
\&    }
\&    catch {
\&        die "$_";
\&    };
\&
\&    # wait for the lock to be released
\&    $script\->lock_exec({ wait => 1 });
.Ve
.PP
This method sets an execution lock to prevent concurrent execution of the caller
script. If passed the \fIwait\fR parameter with a true value, it will make the caller
wait until it can be granted the lock (flock's \s-1LOCK_NB\s0 behaviour). It will
otherwise throw an exception immediately.
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_initialize_locking\fR
.IX Subsection "_initialize_locking"
.PP
.Vb 1
\&    $self\->_initialize_locking
.Ve
.PP
This method initializes the locking configuration.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
