.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Config 3pm"
.TH Koha::Config 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Config \- Read Koha configuration file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Koha::Config;
\&
\&    my $config = Koha::Config\->get_instance;
\&    my $database = $config\->get(\*(Aqdatabase\*(Aq);
\&    my $serverinfo = $config\->get(\*(Aqbiblioserver\*(Aq, \*(Aqserverinfo\*(Aq);
\&
\&    my $otherconfig = Koha::Config\->get_instance(\*(Aq/path/to/other/koha\-conf.xml\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Koha::Config is a helper module for reading configuration variables from the
main Koha configuration file ($KOHA_CONF)
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "get_instance"
.IX Subsection "get_instance"
.Vb 2
\&    $config = Koha::Config\->get_instance;
\&    $config = Koha::Config\->get_instance($file);
.Ve
.PP
Reads \f(CW$file\fR and returns the corresponding \f(CW\*(C`Koha::Config\*(C'\fR object.
.PP
If \f(CW$file\fR is not given (or undef) it defaults to the result of
\&\f(CW\*(C`Koha::Config\->guess_koha_conf\*(C'\fR.
.PP
Multiple calls with the same arguments will return the same object, and the
file will be read only the first time.
.SS "read_from_file"
.IX Subsection "read_from_file"
.Vb 1
\&    $config = Koha::Config\->read_from_file($file);
.Ve
.PP
Reads \f(CW$file\fR and returns the corresponding \f(CW\*(C`Koha::Config\*(C'\fR object.
.PP
Unlike \f(CW\*(C`get_instance\*(C'\fR, this method will read the file at every call, so use it
carefully. In most cases, you should use \f(CW\*(C`get_instance\*(C'\fR instead.
.SS "guess_koha_conf"
.IX Subsection "guess_koha_conf"
.Vb 1
\&    $file = Koha::Config\->guess_koha_conf;
.Ve
.PP
Returns the path to Koha main configuration file.
.PP
Koha's main configuration file koha\-conf.xml is searched for according to this
priority list:
.IP "1. Path supplied via use C4::Context '/path/to/koha\-conf.xml'" 4
.IX Item "1. Path supplied via use C4::Context '/path/to/koha-conf.xml'"
.PD 0
.IP "2. Path supplied in \s-1KOHA_CONF\s0 environment variable." 4
.IX Item "2. Path supplied in KOHA_CONF environment variable."
.IP "3. Path supplied in \s-1INSTALLED_CONFIG_FNAME,\s0 as long as value has changed from its default of '_\|_KOHA_CONF_DIR_\|_/koha\-conf.xml', as happens when Koha is installed in 'standard' or 'single' mode." 4
.IX Item "3. Path supplied in INSTALLED_CONFIG_FNAME, as long as value has changed from its default of '__KOHA_CONF_DIR__/koha-conf.xml', as happens when Koha is installed in 'standard' or 'single' mode."
.IP "4. Path supplied in \s-1CONFIG_FNAME.\s0" 4
.IX Item "4. Path supplied in CONFIG_FNAME."
.PD
.PP
The first entry that refers to a readable file is used.
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.SS "get"
.IX Subsection "get"
.Vb 2
\&    $value = $config\->get($key);
\&    $value = $config\->get($key, $section);
.Ve
.PP
Returns the configuration entry corresponding to \f(CW$key\fR and \f(CW$section\fR.
The returned value can be a string, an arrayref or a hashref.
If \f(CW$key\fR is not found, it returns undef.
.PP
\&\f(CW$section\fR can be one of 'listen', 'server', 'serverinfo', 'config'.
If not given, \f(CW$section\fR defaults to 'config'.
.SS "timezone"
.IX Subsection "timezone"
.Vb 1
\&  $timezone = $config\->timezone
\&
\&  Returns the configured timezone. If not configured or invalid, it returns
\&  \*(Aqlocal\*(Aq.
.Ve
