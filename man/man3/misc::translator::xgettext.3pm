.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "misc::translator::xgettext 3pm"
.TH misc::translator::xgettext 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
xgettext.pl \- xgettext(1)\-like interface for .tt strings extraction
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script has behaviour similar to
\&\fBxgettext\fR\|(1), and generates gettext-compatible output files.
.PP
A gettext-like format provides the following advantages:
.IP "\-" 4
Translation to non-English-like languages with different word
order:  gettext's c\-format strings can theoretically be
emulated if we are able to do some analysis on the .tt input
and treat <\s-1TMPL_VAR\s0> in a way similar to \f(CW%s\fR.
.IP "\-" 4
Context for the extracted strings:  the gettext format provides
the filenames and line numbers where each string can be found.
The translator can read the source file and see the context,
in case the string by itself can mean several different things.
.IP "\-" 4
Place for the translator to add comments about the translations.
.IP "\-" 4
Gettext-compatible tools, if any, might be usable if we adopt
the gettext format.
.PP
This script has already been in use for over a year and should
be reasonable stable. Nevertheless, it is still somewhat
experimental and there are still some issues.
.PP
Please refer to the explanation in tmpl_process3 for further
details.
.PP
If you want to generate GNOME-style \s-1POTFILES\s0.in files, such
files (passed to \-f) can be generated thus:
.PP
.Vb 4
\&    (cd ../.. && find koha\-tmpl/opac\-tmpl/default/en \e
\&        \-name \e*.inc \-o \-name \e*.tt) > opac/POTFILES.in
\&    (cd ../.. && find koha\-tmpl/intranet\-tmpl/default/en \e
\&        \-name \e*.inc \-o \-name \e*.tt) > intranet/POTFILES.in
.Ve
.PP
This is, however, quite pointless, because the \*(L"create\*(R" and
\&\*(L"update\*(R" actions have already been implemented in tmpl_process3.pl.
.SS "Strings inside JavaScript"
.IX Subsection "Strings inside JavaScript"
In the \s-1SCRIPT\s0 elements, the script will attempt to scan for
_("\fIstring literal\fR") patterns, and extract the \fIstring literal\fR
as a translatable string.
.PP
Note that the C\-like _(...) notation is required.
.PP
The JavaScript must actually define a _ function
so that the code remains correct JavaScript.
A suitable definition of such a function can be
.PP
.Vb 1
\&        function _(s) { return s } // dummy function for gettext
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
tmpl_process3.pl,
\&\fBxgettext\fR\|(1),
\&\fBLocale::PO\fR\|(3),
translator_doc.txt
.SH "BUGS"
.IX Header "BUGS"
There probably are some. Bugs related to scanning of <\s-1INPUT\s0>
tags seem to be especially likely to be present.
.PP
Its diagnostics are probably too verbose.
.PP
When a <\s-1TMPL_VAR\s0> within a JavaScript-related attribute is
detected, the script currently displays no warnings at all.
It might be good to display some kind of warning.
.PP
Its sort order (\-s option) seems to be different than the real
\&\fBxgettext\fR\|(1)'s sort option. This will result in translation
strings inside the generated \s-1PO\s0 file spuriously moving about
when tmpl_process3.pl calls \fBmsgmerge\fR\|(1) to update the \s-1PO\s0 file.
.PP
If a Javascript string has leading spaces, it will
generate strings with spurious leading spaces,
leading to failure to match the strings when actually generating
translated files.
