.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "misc::cronjobs::create_koc_db 3pm"
.TH misc::cronjobs::create_koc_db 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
create_koc_db.pl \- create a database file for the offline circulation tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
create_koc_db.pl
.PP
.Vb 3
\& Options:
\&   \-help                          brief help message
\&   \-man                           full documentation
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 8
.IX Item "--help"
Print a brief help message and exits.
.IP "\fB\-\-man\fR" 8
.IX Item "--man"
Prints the manual page and exits.
.IP "\fB\-\-file\fR" 8
.IX Item "--file"
The filename that we should use for the database file that we produce. Defaults to \*(L"borrowers.db\*(R"
.IP "\fB\-\-force\fR" 8
.IX Item "--force"
Forcefully overwrite any existing db file. Defaults to false, so
program will terminate prematurely if the file already exists.
.IP "\fB\-\-sqlite2\fR" 8
.IX Item "--sqlite2"
This option cause the output file to be an SQLite2 database.
This is the format that the original offline circ client
( the one written in PHP/Gtk, version < 1.0 ) requires.
.IP "\fB\-\-sqlite3\fR" 8
.IX Item "--sqlite3"
This option cause the output file to be an SQLite3 database.
This is the format that the new offline circ client
( the one written in \*(C+/Qt4, version >= 1.0 ) requires.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script generates a sqlite database file full of patron and
holdings data that can be used by an offline circulation tool.
.SH "USAGE EXAMPLES"
.IX Header "USAGE EXAMPLES"
This program could be run from cron to occasionally refresh the
offline circulation database. For instance:
.PP
\&\f(CW\*(C`0 0 * * * create_koc_db.pl\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This program was originally created to interact with Kyle Hall's
offline circulation tool, which is available from
<http://kylehall.info/index.php/projects/koha\-tools/koha\-offline\-circulation/>,
but any similar tool could use the database that is produced.
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.SS "verify_dbd_sqlite"
.IX Subsection "verify_dbd_sqlite"
Since DBD::SQLite is a new prerequisite and an optional one, let's
make sure we have a new enough version of it.
.SS "prepare_file_for_writing"
.IX Subsection "prepare_file_for_writing"
pass in the filename that we're considering using for the SQLite db.
.PP
returns true if we can use it.
.PP
returns false if we can't. For example, if it alredy exists and we
don't have \-\-force or don't have permissions to unlink it.
.SS "create_borrowers_table"
.IX Subsection "create_borrowers_table"
Create sqlite borrowers table to mirror the koha borrowers table structure
.SS "populate_borrowers_table"
.IX Subsection "populate_borrowers_table"
Import the data from the koha.borrowers table into our sqlite table
.SS "add_fines_to_borrowers_table"
.IX Subsection "add_fines_to_borrowers_table"
Import the fines from koha.accountlines into the sqlite db
.SS "create_issue_table"
.IX Subsection "create_issue_table"
Create sqlite issues table with minimal information needed from koha tables issues, items, biblio, biblioitems
.SS "populate_issues_table"
.IX Subsection "populate_issues_table"
Import open issues from the koha database
.SS "get_columns_of_table"
.IX Subsection "get_columns_of_table"
pass in the name of a database table.
.PP
returns list of column names in that table.
.SS "get_columns_and_types_of_table"
.IX Subsection "get_columns_and_types_of_table"
pass in the name of a database table
.PP
returns a hash of column names to their types.
.SS "get_columns_for_issues_table"
.IX Subsection "get_columns_for_issues_table"
This sub returns a hashref where the keys are all the fields in the given tables, and the data is the field's type
