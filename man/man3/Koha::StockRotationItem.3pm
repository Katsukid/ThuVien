.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::StockRotationItem 3pm"
.TH Koha::StockRotationItem 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
StockRotationItem \- Koha StockRotationItem Object class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
StockRotationItem class used primarily by stockrotation .pls and the stock
rotation cron script.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Standard Koha::Objects definitions, and additional methods.
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI_type\fR
.IX Subsection "_type"
.PP
\fIitem\fR
.IX Subsection "item"
.PP
.Vb 1
\&  my $item = Koha::StockRotationItem\->item;
.Ve
.PP
Returns the item associated with the current stock rotation item.
.PP
\fIstage\fR
.IX Subsection "stage"
.PP
.Vb 1
\&  my $stage = Koha::StockRotationItem\->stage;
.Ve
.PP
Returns the stage associated with the current stock rotation item.
.PP
\fIneeds_repatriating\fR
.IX Subsection "needs_repatriating"
.PP
.Vb 1
\&  1|0 = $item\->needs_repatriating;
.Ve
.PP
Return 1 if this item is currently not at the library it should be at
according to our stockrotation plan.
.PP
\fIneeds_advancing\fR
.IX Subsection "needs_advancing"
.PP
.Vb 1
\&  1|0 = $item\->needs_advancing;
.Ve
.PP
Return 1 if this item is ready to be moved on to the next stage in its rota.
.PP
\fIrepatriate\fR
.IX Subsection "repatriate"
.PP
.Vb 1
\&  1|0 = $sritem\->repatriate
.Ve
.PP
Put this item into branch transfer with 'StockrotationRepatriation' comment, so
that it may return to it's stage.branch to continue its rota as normal.
.PP
Note: Stockrotation falls outside of the normal branch transfer limits and so we
pass 'ignore_limits' in the call to request_transfer.
.PP
\fIadvance\fR
.IX Subsection "advance"
.PP
.Vb 1
\&  1|0 = $sritem\->advance;
.Ve
.PP
Put this item into branch transfer with 'StockrotationAdvance' comment, to
transfer it to the next stage in its rota.
.PP
If this is the last stage in the rota and this rota is cyclical, we return to
the first stage.  If it is not cyclical, then we delete this
StockRotationItem.
.PP
If this item is 'indemand', and advance is invoked, we disable 'indemand' and
advance the item as per usual.
.PP
Note: Stockrotation falls outside of the normal branch transfer limits and so we
pass 'ignore_limits' in the call to request_transfer.
.PP
\fItoggle_indemand\fR
.IX Subsection "toggle_indemand"
.PP
.Vb 1
\&  $sritem\->toggle_indemand;
.Ve
.PP
Toggle this items in_demand status.
.PP
If the item is in the process of being advanced to the next stage then we cancel
the transfer, revert the advancement and reset the 'StockrotationAdvance' counter,
as though 'in_demand' had been set prior to the call to advance, by updating the
in progress transfer.
.PP
\fIinvestigate\fR
.IX Subsection "investigate"
.PP
.Vb 1
\&  my $report = $item\->investigate;
.Ve
.PP
Return the base set of information, namely this individual item's report, for
generating stockrotation reports about this stockrotationitem.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Sassmannshausen <alex.sassmannshausen@ptfs\-europe.com>
