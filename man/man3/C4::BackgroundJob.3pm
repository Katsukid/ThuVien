.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::BackgroundJob 3pm"
.TH C4::BackgroundJob 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::BackgroundJob \- manage long\-running jobs
initiated from the web staff interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& # start tracking a job
\& my $job = C4::BackgroundJob\->new($sessionID, $job_name, $job_invoker, $num_work_units);
\& my $jobID = $job\->id();
\& $job\->progress($work_units_processed);
\& $job\->finish($job_result_hashref);
\&
\& # get status and results of a job
\& my $job = C4::BackgroundJob\->fetch($sessionID, $jobID);
\& my $max_work_units = $job\->size();
\& my $work_units_processed = $job\->progress();
\& my $job_status = $job\->status();
\& my $job_name = $job\->name();
\& my $job_invoker = $job\->invoker();
\& my $results_hashref = $job\->results();
.Ve
.PP
This module manages tracking the progress and results
of (potentially) long-running jobs initiated from 
the staff user interface.  Such jobs can include
batch \s-1MARC\s0 and patron record imports.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\& my $job = C4::BackgroundJob\->new($sessionID, $job_name, $job_invoker, $num_work_units);
.Ve
.PP
Create a new job object and set its status to 'running'.  \f(CW$num_work_units\fR
should be a number representing the size of the job; the units of the
job size are up to the caller and could be number of records, 
number of bytes, etc.
.SS "id"
.IX Subsection "id"
.Vb 1
\& my $jobID = $job\->id();
.Ve
.PP
Read-only accessor for job \s-1ID.\s0
.SS "name"
.IX Subsection "name"
.Vb 2
\& my $name = $job\->name();
\& $job\->name($name);
.Ve
.PP
Read/write accessor for job name.
.SS "invoker"
.IX Subsection "invoker"
.Vb 2
\& my $invoker = $job\->invoker();
\&i $job\->invoker($invoker);
.Ve
.PP
Read/write accessor for job invoker.
.SS "progress"
.IX Subsection "progress"
.Vb 2
\& my $progress = $job\->progress();
\& $job\->progress($progress);
.Ve
.PP
Read/write accessor for job progress.
.SS "status"
.IX Subsection "status"
.Vb 1
\& my $status = $job\->status();
.Ve
.PP
Read-only accessor for job status.
.SS "size"
.IX Subsection "size"
.Vb 2
\& my $size = $job\->size();
\& $job\->size($size);
.Ve
.PP
Read/write accessor for job size.
.SS "finish"
.IX Subsection "finish"
.Vb 1
\& $job\->finish($results_hashref);
.Ve
.PP
Mark the job as finished, setting its status to 'completed'.
\&\f(CW$results_hashref\fR should be a reference to a hash containing
the results of the job.
.SS "results"
.IX Subsection "results"
.Vb 1
\& my $results_hashref = $job\->results();
.Ve
.PP
Retrieve the results of the current job.  Returns undef 
if the job status is not 'completed'.
.SS "fetch"
.IX Subsection "fetch"
.Vb 1
\& my $job = C4::BackgroundJob\->fetch($sessionID, $jobID);
.Ve
.PP
Retrieve a job that has been serialized to the database. 
Returns \f(CW\*(C`undef\*(C'\fR if the job does not exist in the current 
session.
.SS "set"
.IX Subsection "set"
.ie n .IP "$job\->set($hashref);" 4
.el .IP "\f(CW$job\fR\->set($hashref);" 4
.IX Item "$job->set($hashref);"
.PP
Set some variables into the hashref.
These variables can be retrieved using the get method.
.SS "get"
.IX Subsection "get"
.ie n .IP "$value = $job\->get($key);" 4
.el .IP "\f(CW$value\fR = \f(CW$job\fR\->get($key);" 4
.IX Item "$value = $job->get($key);"
.PP
Get a variable which has been previously stored with the set method.
.SS "clear"
.IX Subsection "clear"
.ie n .IP "$job\->\fBclear()\fR;" 4
.el .IP "\f(CW$job\fR\->\fBclear()\fR;" 4
.IX Item "$job->clear();"
.PP
Clear the job from the current session.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
