.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::BackgroundJob 3pm"
.TH Koha::BackgroundJob 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::BackgroundJob \- Koha BackgroundJob Object class
.PP
This is a base class for BackgroundJob, some methods must be subclassed.
.PP
Example of usage:
.PP
Producer:
my $job_id = Koha::BackgroundJob\->enqueue(
    {
        job_type => $job_type,
        job_size => $job_size,
        job_args => $job_args
    }
);
.PP
Consumer:
Koha::BackgroundJobs\->find($job_id)\->process;
See also "misc/background_jobs_worker.pl" for a full example
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIconnect\fR
.IX Subsection "connect"
.PP
Connect to the message broker using default guest/guest credential
.PP
\fIenqueue\fR
.IX Subsection "enqueue"
.PP
Enqueue a new job. It will insert a new row in the \s-1DB\s0 table and notify the broker that a new job has been enqueued.
.PP
\&\f(CW\*(C`job_size\*(C'\fR is the size of the job
\&\f(CW\*(C`job_args\*(C'\fR is the arguments of the job. It's a structure that will be \s-1JSON\s0 encoded.
.PP
Return the job_id of the newly created job.
.PP
\fIprocess\fR
.IX Subsection "process"
.PP
Process the job!
.PP
\fIstart\fR
.IX Subsection "start"
.PP
.Vb 1
\&    $self\->start;
.Ve
.PP
Marks the job as started.
.PP
\fIstep\fR
.IX Subsection "step"
.PP
.Vb 1
\&    $self\->step;
.Ve
.PP
Makes the job record a step has taken place.
.PP
\fIfinish\fR
.IX Subsection "finish"
.PP
.Vb 1
\&    $self\->finish;
.Ve
.PP
Makes the job record as finished. If the job status is \fIcancelled\fR, it is kept.
.PP
\fIjson\fR
.IX Subsection "json"
.PP
.Vb 1
\&   my $JSON_object = $self\->json;
.Ve
.PP
Returns a \s-1JSON\s0 object with utf8 disabled. Encoding to \s-1UTF\-8\s0 should be
done later.
.PP
\fIdecoded_data\fR
.IX Subsection "decoded_data"
.PP
.Vb 1
\&    my $job_data = $self\->decoded_data;
.Ve
.PP
Returns the decoded \s-1JSON\s0 contents from \f(CW$self\fR\->data.
.PP
\fIset_encoded_data\fR
.IX Subsection "set_encoded_data"
.PP
.Vb 1
\&    $self\->set_encoded_data( $data );
.Ve
.PP
Serializes \fI\f(CI$data\fI\fR as a \s-1JSON\s0 string and sets the \fIdata\fR attribute with it.
.PP
\fIjob_type\fR
.IX Subsection "job_type"
.PP
Return the job type of the job. Must be a string.
.PP
\fImessages\fR
.IX Subsection "messages"
.PP
Messages let during the processing of the job.
.PP
\fIreport\fR
.IX Subsection "report"
.PP
Report of the job.
.PP
\fIadditional_report\fR
.IX Subsection "additional_report"
.PP
Build additional variables for the job detail view.
.PP
\fIcancel\fR
.IX Subsection "cancel"
.PP
Cancel a job.
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_derived_class\fR
.IX Subsection "_derived_class"
.PP
\fItype_to_class_mapping\fR
.IX Subsection "type_to_class_mapping"
.PP
.Vb 1
\&    my $mapping = Koha::BackgroundJob\->new\->type_to_class_mapping;
.Ve
.PP
Returns the available types to class mappings.
.PP
\fIcore_types_to_classes\fR
.IX Subsection "core_types_to_classes"
.PP
.Vb 1
\&    my $mappings = Koha::BackgroundJob\->new\->core_types_to_classes
.Ve
.PP
Returns the core background jobs types to class mappings.
.PP
\fIplugin_types_to_classes\fR
.IX Subsection "plugin_types_to_classes"
.PP
.Vb 1
\&    my $mappings = Koha::BackgroundJob\->new\->plugin_types_to_classes
.Ve
.PP
Returns the plugin-defined background jobs types to class mappings.
.PP
\fIto_api\fR
.IX Subsection "to_api"
.PP
.Vb 1
\&    my $json = $job\->to_api;
.Ve
.PP
Overloaded method that returns a \s-1JSON\s0 representation of the Koha::BackgroundJob object,
suitable for \s-1API\s0 output.
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::BackgroundJob object
on the \s-1API.\s0
.PP
\fI_type\fR
.IX Subsection "_type"
