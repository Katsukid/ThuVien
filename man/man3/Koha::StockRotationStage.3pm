.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::StockRotationStage 3pm"
.TH Koha::StockRotationStage 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
StockRotationStage \- Koha StockRotationStage Object class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
StockRotationStage class used primarily by stockrotation .pls and the stock
rotation cron script.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Standard Koha::Objects definitions, and additional methods.
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI_type\fR
.IX Subsection "_type"
.PP
\fIstockrotationitems\fR
.IX Subsection "stockrotationitems"
.PP
.Vb 1
\&  my $stages = Koha::StockRotationStage\->stockrotationitems;
.Ve
.PP
Returns the items associated with the current stage.
.PP
\fIbranchcode\fR
.IX Subsection "branchcode"
.PP
.Vb 1
\&  my $branch = Koha::StockRotationStage\->branchcode;
.Ve
.PP
Returns the branch associated with the current stage.
.PP
\fIrota\fR
.IX Subsection "rota"
.PP
.Vb 1
\&  my $rota = Koha::StockRotationStage\->rota;
.Ve
.PP
Returns the rota associated with the current stage.
.PP
\fIsiblings\fR
.IX Subsection "siblings"
.PP
.Vb 1
\&  my $siblings = $stage\->siblings;
.Ve
.PP
Koha::Object wrapper around DBIx::Class::Ordered.
.PP
\fInext_siblings\fR
.IX Subsection "next_siblings"
.PP
.Vb 1
\&  my $next_siblings = $stage\->next_siblings;
.Ve
.PP
Koha::Object wrapper around DBIx::Class::Ordered.
.PP
\fIprevious_siblings\fR
.IX Subsection "previous_siblings"
.PP
.Vb 1
\&  my $previous_siblings = $stage\->previous_siblings;
.Ve
.PP
Koha::Object wrapper around DBIx::Class::Ordered.
.PP
\fInext_sibling\fR
.IX Subsection "next_sibling"
.PP
.Vb 1
\&  my $next = $stage\->next_sibling;
.Ve
.PP
Koha::Object wrapper around DBIx::Class::Ordered.
.PP
\fIprevious_sibling\fR
.IX Subsection "previous_sibling"
.PP
.Vb 1
\&  my $previous = $stage\->previous_sibling;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fIfirst_sibling\fR
.IX Subsection "first_sibling"
.PP
.Vb 1
\&  my $first = $stage\->first_sibling;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fIlast_sibling\fR
.IX Subsection "last_sibling"
.PP
.Vb 1
\&  my $last = $stage\->last_sibling;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fImove_previous\fR
.IX Subsection "move_previous"
.PP
.Vb 1
\&  1|0 = $stage\->move_previous;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fImove_next\fR
.IX Subsection "move_next"
.PP
.Vb 1
\&  1|0 = $stage\->move_next;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fImove_first\fR
.IX Subsection "move_first"
.PP
.Vb 1
\&  1|0 = $stage\->move_first;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fImove_last\fR
.IX Subsection "move_last"
.PP
.Vb 1
\&  1|0 = $stage\->move_last;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fImove_to\fR
.IX Subsection "move_to"
.PP
.Vb 1
\&  1|0 = $stage\->move_to($position);
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fImove_to_group\fR
.IX Subsection "move_to_group"
.PP
.Vb 1
\&  1|0 = $stage\->move_to_group($rota_id, [$position]);
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fIdelete\fR
.IX Subsection "delete"
.PP
.Vb 1
\&  1|0 = $stage\->delete;
.Ve
.PP
Koha::Object Wrapper around DBIx::Class::Ordered.
.PP
\fIinvestigate\fR
.IX Subsection "investigate"
.PP
.Vb 1
\&  my $report = $stage\->investigate($report_so_far);
.Ve
.PP
Return a stage based report.  This report will mutate and augment the report
that is passed to it.  It slots item reports into the branched and temporary
rota sections of the report.  It also increments a number of counters.
.PP
For details of intent and context of this procedure, please see
Koha::StockRotationRota\->investigate.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex Sassmannshausen <alex.sassmannshausen@ptfs\-europe.com>
