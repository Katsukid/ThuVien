.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Biblio::Metadata 3pm"
.TH Koha::Biblio::Metadata 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Metadata \- Koha Metadata Object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIrecord\fR
.IX Subsection "record"
.PP
my \f(CW$record\fR = \f(CW$metadata\fR\->record;
.PP
Returns an object representing the metadata record. The expected record type
corresponds to this table:
.PP
.Vb 5
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    | format     | object type    |
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    | marcxml    | MARC::Record   |
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    $record = $biblio\->metadata\->record({
\&        {
\&            embed_items => 0|1
\&            itemnumbers => $itemnumbers,
\&            opac        => $opac
\&        }
\&    );
\&
\&    Koha::Biblio::Metadata::record(
\&        {
\&            record       => $record,
\&            embed_items  => 1,
\&            biblionumber => $biblionumber,
\&            itemnumbers  => $itemnumbers,
\&            opac         => $opac
\&        }
\&    );
.Ve
.PP
Given a MARC::Record object containing a bib record,
modify it to include the items attached to it as 9XX
per the bib's \s-1MARC\s0 framework.
if \f(CW$itemnumbers\fR is defined, only specified itemnumbers are embedded.
.PP
If \f(CW$opac\fR is true, then opac-relevant suppressions are included.
.PP
If opac filtering will be done, patron should be passed to properly
override if necessary.
.PP
Error handling
.IX Subsection "Error handling"
.IP "If an unsupported format is found, it throws a \fIKoha::Exceptions::Metadata\fR exception." 4
.IX Item "If an unsupported format is found, it throws a Koha::Exceptions::Metadata exception."
.PD 0
.IP "If it fails to create the record object, it throws a \fIKoha::Exceptions::Metadata::Invalid\fR exception." 4
.IX Item "If it fails to create the record object, it throws a Koha::Exceptions::Metadata::Invalid exception."
.PD
.PP
\fIrecord_strip_nonxml\fR
.IX Subsection "record_strip_nonxml"
.PP
my \f(CW$record\fR = \f(CW$metadata\fR\->record_strip_nonxml;
.PP
This subroutine is intended for cases where we encounter a record that cannot be parsed, but want
to make a good effort to present the record (for harvesting, deletion, editing) rather than throwing
an exception
.PP
Will return undef if the record cannot be built
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_embed_items\fR
.IX Subsection "_embed_items"
.PP
\fI_type\fR
.IX Subsection "_type"
