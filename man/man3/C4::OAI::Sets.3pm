.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::OAI::Sets 3pm"
.TH C4::OAI::Sets 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::OAI::Sets \- OAI Sets management functions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
C4::OAI::Sets contains functions for managing storage and editing of \s-1OAI\s0 Sets.
.PP
\&\s-1OAI\s0 Set description can be found here <http://www.openarchives.org/OAI/openarchivesprotocol.html#Set>
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetOAISets"
.IX Subsection "GetOAISets"
.Vb 1
\&    $oai_sets = GetOAISets;
.Ve
.PP
GetOAISets return a array reference of hash references describing the sets.
The hash references looks like this:
.PP
.Vb 9
\&    {
\&        \*(Aqname\*(Aq         => \*(Aqset name\*(Aq,
\&        \*(Aqspec\*(Aq         => \*(Aqset spec\*(Aq,
\&        \*(Aqdescriptions\*(Aq => [
\&            \*(Aqdescription 1\*(Aq,
\&            \*(Aqdescription 2\*(Aq,
\&            ...
\&        ]
\&    }
.Ve
.SS "GetOAISet"
.IX Subsection "GetOAISet"
.Vb 1
\&    $set = GetOAISet($set_id);
.Ve
.PP
GetOAISet returns a hash reference describing the set with the given set_id.
.PP
See GetOAISets to see what the hash looks like.
.SS "GetOAISetBySpec"
.IX Subsection "GetOAISetBySpec"
.Vb 1
\&    my $set = GetOAISetBySpec($setSpec);
.Ve
.PP
Returns a hash describing the set whose spec is \f(CW$setSpec\fR
.SS "ModOAISet"
.IX Subsection "ModOAISet"
.Vb 7
\&    my $set = {
\&        \*(Aqid\*(Aq => $set_id,                 # mandatory
\&        \*(Aqspec\*(Aq => $spec,                 # mandatory
\&        \*(Aqname\*(Aq => $name,                 # mandatory
\&        \*(Aqdescriptions => \e@descriptions, # optional, [] to remove descriptions
\&    };
\&    ModOAISet($set);
.Ve
.PP
ModOAISet modify a set in the database.
.SS "DelOAISet"
.IX Subsection "DelOAISet"
.Vb 1
\&    DelOAISet($set_id);
.Ve
.PP
DelOAISet remove the set with the given set_id
.SS "AddOAISet"
.IX Subsection "AddOAISet"
.Vb 7
\&    my $set = {
\&        \*(Aqid\*(Aq => $set_id,                 # mandatory
\&        \*(Aqspec\*(Aq => $spec,                 # mandatory
\&        \*(Aqname\*(Aq => $name,                 # mandatory
\&        \*(Aqdescriptions => \e@descriptions, # optional
\&    };
\&    my $set_id = AddOAISet($set);
.Ve
.PP
AddOAISet adds a new set and returns its id, or undef if something went wrong.
.SS "GetOAISetsMappings"
.IX Subsection "GetOAISetsMappings"
.Vb 1
\&    my $mappings = GetOAISetsMappings;
.Ve
.PP
GetOAISetsMappings returns mappings for all \s-1OAI\s0 Sets.
.PP
Mappings define how biblios are categorized in sets.
A mapping is defined by six properties:
.PP
.Vb 8
\&    {
\&        marcfield => \*(AqXXX\*(Aq,              # the MARC field to check
\&        marcsubfield => \*(AqY\*(Aq,             # the MARC subfield to check
\&        operator => \*(AqA\*(Aq,                 # the operator \*(Aqequal\*(Aq or \*(Aqnotequal\*(Aq; \*(Aqequal\*(Aq if \*(Aq\*(Aq
\&        marcvalue => \*(Aqzzzz\*(Aq,             # the value to check
\&        rule_operator => \*(Aqand|or|undef\*(Aq, # the operator between the rules
\&        rule_order    => \*(Aqn\*(Aq             # the order of the rule for the mapping
\&    }
.Ve
.PP
If defined in a set mapping, a biblio which have at least one 'Y' subfield of
one '\s-1XXX\s0' field equal to 'zzzz' will belong to this set.
.PP
GetOAISetsMappings returns a hashref of arrayrefs of hashrefs.
The first hashref keys are the sets IDs, so it looks like this:
.PP
.Vb 10
\&    $mappings = {
\&        \*(Aq1\*(Aq => [
\&            {
\&                marcfield => \*(AqXXX\*(Aq,
\&                marcsubfield => \*(AqY\*(Aq,
\&                operator => \*(AqA\*(Aq,
\&                marcvalue => \*(Aqzzzz\*(Aq,
\&                rule_operator => \*(Aqand|or|undef\*(Aq,
\&                rule_order => \*(Aqn\*(Aq
\&            },
\&            {
\&                ...
\&            },
\&            ...
\&        ],
\&        \*(Aq2\*(Aq => [...],
\&        ...
\&    };
.Ve
.SS "GetOAISetMappings"
.IX Subsection "GetOAISetMappings"
.Vb 1
\&    my $set_mappings = GetOAISetMappings($set_id);
.Ve
.PP
Return mappings for the set with given set_id. It's an arrayref of hashrefs
.SS "ModOAISetMappings {"
.IX Subsection "ModOAISetMappings {"
.Vb 10
\&    my $mappings = [
\&        {
\&            marcfield => \*(AqXXX\*(Aq,
\&            marcsubfield => \*(AqY\*(Aq,
\&            operator => \*(AqA\*(Aq,
\&            marcvalue => \*(Aqzzzz\*(Aq
\&        },
\&        ...
\&    ];
\&    ModOAISetMappings($set_id, $mappings);
.Ve
.PP
ModOAISetMappings modifies mappings of a given set.
.SS "GetOAISetsBiblio"
.IX Subsection "GetOAISetsBiblio"
.Vb 1
\&    $oai_sets = GetOAISetsBiblio($biblionumber);
.Ve
.PP
Return the \s-1OAI\s0 sets where biblio appears.
.PP
Return value is an arrayref of hashref where each element of the array is a set.
Keys of hash are id, spec and name
.SS "DelOAISetsBiblio"
.IX Subsection "DelOAISetsBiblio"
.Vb 1
\&    DelOAISetsBiblio($biblionumber);
.Ve
.PP
Remove a biblio from all sets
.SS "CalcOAISetsBiblio"
.IX Subsection "CalcOAISetsBiblio"
.Vb 1
\&    my @sets = CalcOAISetsBiblio($record, $oai_sets_mappings);
.Ve
.PP
Return a list of set ids the record belongs to. \f(CW$record\fR must be a MARC::Record
and \f(CW$oai_sets_mappings\fR (optional) must be a hashref returned by
GetOAISetsMappings
.SS "ModOAISetsBiblios"
.IX Subsection "ModOAISetsBiblios"
.Vb 6
\&    my $oai_sets_biblios = {
\&        \*(Aq1\*(Aq => [1, 3, 4],   # key is the set_id, and value is an array ref of biblionumbers
\&        \*(Aq2\*(Aq => [],
\&        ...
\&    };
\&    ModOAISetsBiblios($oai_sets_biblios);
.Ve
.PP
ModOAISetsBiblios deletes all records from oai_sets_biblios table and calls AddOAISetsBiblios.
This table is then used in opac/oai.pl.
.SS "UpdateOAISetsBiblio"
.IX Subsection "UpdateOAISetsBiblio"
.Vb 1
\&    UpdateOAISetsBiblio($biblionumber, $record);
.Ve
.PP
Update \s-1OAI\s0 sets for one biblio. The two parameters are mandatory.
\&\f(CW$record\fR is a MARC::Record.
.SS "AddOAISetsBiblios"
.IX Subsection "AddOAISetsBiblios"
.Vb 6
\&    my $oai_sets_biblios = {
\&        \*(Aq1\*(Aq => [1, 3, 4],   # key is the set_id, and value is an array ref of biblionumbers
\&        \*(Aq2\*(Aq => [],
\&        ...
\&    };
\&    ModOAISetsBiblios($oai_sets_biblios);
.Ve
.PP
AddOAISetsBiblios insert given infos in oai_sets_biblios table.
This table is then used in opac/oai.pl.
