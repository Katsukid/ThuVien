.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::DateUtils 3pm"
.TH Koha::DateUtils 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "DateUtils"
.IX Header "DateUtils"
Koha::DateUtils \- Transitional wrappers to ease use of DateTime
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Koha has historically only used dates not datetimes and been content to
handle these as strings. It also has confused formatting with actual dates
this is a temporary module for wrappers to hide the complexity of switch to DateTime
.SS "dt_ftom_string"
.IX Subsection "dt_ftom_string"
\&\f(CW$dt\fR = dt_from_string($date_string, [$format, \f(CW$timezone\fR ]);
.PP
Passed a date string returns a DateTime object format and timezone default
to the system preferences. If the date string is empty DateTime\->now is returned
.SS "output_pref"
.IX Subsection "output_pref"
\&\f(CW$date_string\fR = output_pref({ dt => \f(CW$dt\fR [, dateformat => \f(CW$date_format\fR, timeformat => \f(CW$time_format\fR, dateonly => 0|1, as_due_date => 0|1 ] });
\&\f(CW$date_string\fR = output_pref( \f(CW$dt\fR );
.PP
Returns a string containing the time & date formatted as per the C4::Context setting,
or \f(CW\*(C`undef\*(C'\fR if \f(CW\*(C`undef\*(C'\fR was provided.
.PP
This routine can either be passed a DateTime object or or a hashref.  If it is
passed a hashref, the expected keys are a mandatory 'dt' for the DateTime,
an optional 'dateformat' to override the dateformat system preference, an
optional 'timeformat' to override the TimeFormat system preference value,
and an optional 'dateonly' to specify that only the formatted date string
should be returned without the time.
.SS "format_sqldatetime"
.IX Subsection "format_sqldatetime"
\&\f(CW$string\fR = format_sqldatetime( \f(CW$string_as_returned_from_db\fR );
.PP
a convenience routine for calling dt_from_string and formatting the result
with output_pref as it is a frequent activity in scripts
.SS "flatpickr_date_format"
.IX Subsection "flatpickr_date_format"
\&\f(CW$date_format\fR = flatpickr_date_format( \f(CW$koha_date_format\fR );
.PP
Converts Koha's date format to Flatpickr's. E.g. 'us' returns 'm/d/Y'.
.PP
If no argument is given, the dateformat preference is assumed.
.PP
Returns undef if format is unknown.
