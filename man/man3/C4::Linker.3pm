.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::Linker 3pm"
.TH C4::Linker 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Linker \- Base class for linking authorities to bibliographic records
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Linker (%params );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Base class for C4::Linker::X. Subclasses need to provide the following methods
.PP
\&\fBget_link ($field)\fR \- return the authid for the authority that should be
linked to the provided MARC::Field object, and a boolean to indicate whether
the match is \*(L"fuzzy\*(R" (the semantics of \*(L"fuzzy\*(R" are up to the individual plugin).
In order to handle authority limits, get_link should always end with:
    return \f(CW$self\fR\->SUPER::_handle_auth_limit($authid), \f(CW$fuzzy\fR;
.PP
\&\fBupdate_cache ($heading, \f(CB$authid\fB)\fR \- updates internal linker cache for
\&\f(CW$heading\fR with \f(CW$authid\fR of a new created authotiry record
.PP
\&\fBflip_heading ($field)\fR \- return a MARC::Field object with the heading flipped
to the preferred form.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "_handle_auth_limit"
.IX Subsection "_handle_auth_limit"
.Vb 1
\&    return $self\->SUPER::_handle_auth_limit($authid), $fuzzy;
.Ve
.PP
Function to be called by subclasses to handle authority record limits.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
C4::Linker::Default
.SH "AUTHOR"
.IX Header "AUTHOR"
Jared Camins-Esakov, C & P Bibliography Services, <jcamins@cpbibliography.com>
