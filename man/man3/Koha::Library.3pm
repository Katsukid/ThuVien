.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Library 3pm"
.TH Koha::Library 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Library \- Koha Library Object class
.SH "API"
.IX Header "API"
.SS "Class methods"
.IX Subsection "Class methods"
\fIstore\fR
.IX Subsection "store"
.PP
Library specific store to ensure relevant caches are flushed on change
.SS "delete"
.IX Subsection "delete"
Library specific \f(CW\*(C`delete\*(C'\fR to clear relevant caches on delete.
.PP
\fIstockrotationstages\fR
.IX Subsection "stockrotationstages"
.PP
.Vb 1
\&  my $stages = Koha::Library\->stockrotationstages;
.Ve
.PP
Returns the stockrotation stages associated with this Library.
.PP
\fIoutgoing_transfers\fR
.IX Subsection "outgoing_transfers"
.PP
.Vb 1
\&  my $outgoing_transfers = Koha::Library\->outgoing_transfers;
.Ve
.PP
Returns the outgoing item transfers associated with this Library.
.PP
\fIinbound_transfers\fR
.IX Subsection "inbound_transfers"
.PP
.Vb 1
\&  my $inbound_transfers = Koha::Library\->inbound_transfers;
.Ve
.PP
Returns the inbound item transfers associated with this Library.
.PP
\fIget_effective_marcorgcode\fR
.IX Subsection "get_effective_marcorgcode"
.PP
.Vb 1
\&    my $marcorgcode = Koha::Libraries\->find( $library_id )\->get_effective_marcorgcode();
.Ve
.PP
Returns the effective \s-1MARC\s0 organization code of the library. It falls back to the value
from the \fIMARCOrgCode\fR syspref if undefined for the library.
.PP
\fIsmtp_server\fR
.IX Subsection "smtp_server"
.PP
.Vb 3
\&    my $smtp_server = $library\->smtp_server;
\&    $library\->smtp_server({ smtp_server => $smtp_server });
\&    $library\->smtp_server({ smtp_server => undef });
.Ve
.PP
Accessor for getting and setting the library's \s-1SMTP\s0 server.
.PP
Returns the effective \s-1SMTP\s0 server configuration to be used on the library. The returned
value is always a \fIKoha::SMTP::Server\fR object.
.PP
Setting it to undef will remove the link to a specific \s-1SMTP\s0 server and effectively
make the library use the default setting
.PP
\fIfrom_email_address\fR
.IX Subsection "from_email_address"
.PP
.Vb 1
\&  my $from_email = Koha::Library\->from_email_address;
.Ve
.PP
Returns the official 'from' email address for the branch.
.PP
It may well be a 'noreply' or other inaccessible local domain
address that is being used to satisfy spam protection filters.
.PP
\fIinbound_email_address\fR
.IX Subsection "inbound_email_address"
.PP
.Vb 1
\&  my $to_email = Koha::Library\->inbound_email_address;
.Ve
.PP
Returns an effective email address which should be accessible to librarians at the branch.
.PP
\&\s-1NOTE:\s0 This is the address to use for 'reply_to' or 'to' fields; It should not usually be
used as the 'from' address for emails as it may lead to mail being caught by spam filters.
.PP
\fIinbound_ill_address\fR
.IX Subsection "inbound_ill_address"
.PP
.Vb 1
\&  my $to_email = Koha::Library\->inbound_ill_address;
.Ve
.PP
Returns an effective email address which should be accessible to librarians at the branch
for inter library loans communication.
.PP
\fIlibrary_groups\fR
.IX Subsection "library_groups"
.PP
Return the Library groups of this library
.PP
\fIcash_registers\fR
.IX Subsection "cash_registers"
.PP
Return Cash::Registers associated with this Library
.PP
\fIget_hold_libraries\fR
.IX Subsection "get_hold_libraries"
.PP
Return all libraries (including self) that belong to the same hold groups
.PP
\fIvalidate_hold_sibling\fR
.IX Subsection "validate_hold_sibling"
.PP
Return if given library is a valid hold group member
.PP
\fIpublic_read_list\fR
.IX Subsection "public_read_list"
.PP
This method returns the list of publicly readable database fields for both \s-1API\s0 and \s-1UI\s0 output purposes
.PP
\fIto_api_mapping\fR
.IX Subsection "to_api_mapping"
.PP
This method returns the mapping for representing a Koha::Library object
on the \s-1API.\s0
.PP
\fIopac_info\fR
.IX Subsection "opac_info"
.PP
.Vb 1
\&    $library\->opac_info({ lang => $lang });
.Ve
.PP
Returns additional contents block OpacLibraryInfo for \f(CW$lang\fR or 'default'.
.PP
Note: This replaces the former branches.opac_info column.
.SS "Internal methods"
.IX Subsection "Internal methods"
\fI_type\fR
.IX Subsection "_type"
