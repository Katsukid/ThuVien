.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "C4::XSLT 3pm"
.TH C4::XSLT 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::XSLT \- Functions for displaying XSLT\-generated content
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "XSLTParse4Display"
.IX Subsection "XSLTParse4Display"
Returns xml for biblionumber and requested \s-1XSLT\s0 transformation.
Returns undef if the transform fails.
.PP
Used in \s-1OPAC\s0 results and detail, intranet results and detail, list display.
(Depending on the settings of your \s-1XSLT\s0 preferences.)
.PP
The helper function _get_best_default_xslt_filename is used in a unit test.
.SS "buildKohaItemsNamespace"
.IX Subsection "buildKohaItemsNamespace"
.Vb 1
\&    my $items_xml = buildKohaItemsNamespace( $biblionumber, [ $hidden_items, $items ] );
.Ve
.PP
Returns \s-1XML\s0 for items. It accepts two optional parameters:
\&\- \fI\f(CI$hidden_items\fI\fR: An arrayref of itemnumber values, for items that should be hidden
\&\- \fI\f(CI$items\fI\fR: A Koha::Items resultset, for the items to be returned
.PP
If both parameters are passed, \fI\f(CI$items\fI\fR is used as the basis resultset, and \fI\f(CI$hidden_items\fI\fR
are filtered out of it.
.PP
Is only used in this module currently.
.SS "engine"
.IX Subsection "engine"
Returns reference to \s-1XSLT\s0 handler object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Joshua Ferraro <jmf@liblime.com>
.PP
Koha Development Team <http://koha\-community.org/>
