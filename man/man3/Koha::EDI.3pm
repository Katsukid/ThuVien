.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::EDI 3pm"
.TH Koha::EDI 3pm "2023-10-03" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::EDI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   Module exporting subroutines used in EDI processing for Koha
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&   Subroutines called by batch processing to handle Edifact
\&   messages of various types and related utilities
.Ve
.SH "BUGS"
.IX Header "BUGS"
.Vb 2
\&   These routines should really be methods of some object.
\&   get_edifact_ean is a stopgap which should be replaced
.Ve
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.SS "process_quote"
.IX Subsection "process_quote"
.Vb 1
\&    process_quote(quote_message);
\&
\&   passed a message object for a quote, parses it creating an order basket
\&   and orderlines in the database
\&   updates the message\*(Aqs status to received in the database and adds the
\&   link to basket
.Ve
.SS "process_invoice"
.IX Subsection "process_invoice"
.Vb 1
\&    process_invoice(invoice_message)
\&
\&    passed a message object for an invoice, add the contained invoices
\&    and update the orderlines referred to in the invoice
\&    As an Edifact invoice is in effect a despatch note this receipts the
\&    appropriate quantities in the orders
\&
\&    no meaningful return value
.Ve
.SS "process_ordrsp"
.IX Subsection "process_ordrsp"
.Vb 1
\&     process_ordrsp(ordrsp_message)
\&
\&     passed a message object for a supplier response, process the contents
\&     If an orderline is cancelled cancel the corresponding orderline in koha
\&     otherwise record the supplier message against it
\&
\&     no meaningful return value
.Ve
.SS "create_edi_order"
.IX Subsection "create_edi_order"
.Vb 1
\&    create_edi_order( { parameter_hashref } )
\&
\&    parameters must include basketno and ean
\&
\&    branchcode can optionally be passed
\&
\&    returns 1 on success undef otherwise
\&
\&    if the parameter noingest is set the formatted order is returned
\&    and not saved in the database. This functionality is intended for debugging only
.Ve
.SS "receipt_items"
.IX Subsection "receipt_items"
.Vb 1
\&    receipt_items( schema_obj, invoice_line, ordernumber, $quantity)
\&
\&    receipts the items recorded on this invoice line
\&
\&    no meaningful return
.Ve
.SS "transfer_items"
.IX Subsection "transfer_items"
.Vb 1
\&    transfer_items(schema, invoice_line, originating_order, receiving_order, $quantity)
\&
\&    Transfer the items covered by this invoice line from their original
\&    order to another order recording the partial fulfillment of the original
\&    order
\&
\&    no meaningful return
.Ve
.SS "get_edifact_ean"
.IX Subsection "get_edifact_ean"
.Vb 1
\&    $ean = get_edifact_ean();
\&
\&    routine to return the ean.
.Ve
.SS "quote_item"
.IX Subsection "quote_item"
.Vb 1
\&     quote_item(lineitem, quote_message);
\&
\&      Called by process_quote to handle an individual lineitem
\&     Generate the biblios and items if required and orderline linking to them
\&
\&     Returns 1 on success undef on error
\&
\&     Most usual cause of error is a line with no or incorrect budget codes
\&     which woild cause order creation to abort
\&     If other correct lines exist these are processed and the erroneous line os logged
.Ve
.SS "title_level_class"
.IX Subsection "title_level_class"
.Vb 1
\&      classmark = title_level_class(edi_item)
\&
\&      Trys to return a title level classmark from a quote message line
\&      Will return a dewey or lcc classmark if one exists according to the
\&      value in DefaultClassificationSource syspref
\&
\&      If unable to returns the shelfmark or classification from the GIR segment
\&
\&      If all else fails returns empty string
.Ve
.SS "_create_bib_from_quote"
.IX Subsection "_create_bib_from_quote"
.Vb 1
\&       marc_record_obj = _create_bib_from_quote(lineitem, quote)
\&
\&       Returns a MARC::Record object based on the  info in the quote\*(Aqs lineitem
.Ve
.SS "_create_item_from_quote"
.IX Subsection "_create_item_from_quote"
.Vb 1
\&       item_hashref = _create_item_from_quote( lineitem, quote)
\&
\&       returns a hashref representing the item fields specified in the quote
.Ve
.SS "_get_invoiced_price"
.IX Subsection "_get_invoiced_price"
.Vb 1
\&      (price, price_tax_excluded) = _get_invoiced_price(line_object, $quantity)
\&
\&      Returns an array of unitprice and unitprice_tax_excluded derived from the lineitem
\&      monetary fields
.Ve
.SS "_discounted_price"
.IX Subsection "_discounted_price"
.Vb 1
\&      ecost = _discounted_price(discount, item_price, discounted_price)
\&
\&      utility subroutine to return a price calculated from the
\&      vendors discount and quoted price
\&      if invoice has a field containing discounted price that is returned
\&      instead of recalculating
.Ve
.SS "_check_for_existing_bib"
.IX Subsection "_check_for_existing_bib"
.Vb 1
\&     (biblionumber, biblioitemnumber) = _check_for_existing_bib(isbn_or_ean)
\&
\&     passed an isbn or ean attempts to locate a match bib
\&     On success returns biblionumber and biblioitemnumber
\&     On failure returns undefined/an empty list
.Ve
.SS "_get_budget"
.IX Subsection "_get_budget"
.Vb 1
\&     b = _get_budget(schema_obj, budget_code)
\&
\&     Returns the Aqbudget object for the active budget given the passed budget_code
\&     or undefined if one does not exist
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&   Colin Campbell <colin.campbell@ptfs\-europe.com>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&   Copyright 2014,2015 PTFS\-Europe Ltd
\&   This program is free software, You may redistribute it under
\&   under the terms of the GNU General Public License
.Ve
